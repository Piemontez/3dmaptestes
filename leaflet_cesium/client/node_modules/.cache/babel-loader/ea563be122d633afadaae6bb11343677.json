{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport deprecationWarning from \"../Core/deprecationWarning.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport getJsonFromTypedArray from \"../Core/getJsonFromTypedArray.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport RequestType from \"../Core/RequestType.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport Axis from \"./Axis.js\";\nimport Cesium3DTileBatchTable from \"./Cesium3DTileBatchTable.js\";\nimport Cesium3DTileFeature from \"./Cesium3DTileFeature.js\";\nimport Cesium3DTileFeatureTable from \"./Cesium3DTileFeatureTable.js\";\nimport ClassificationModel from \"./ClassificationModel.js\";\nimport Model from \"./Model.js\";\nimport ModelUtility from \"./ModelUtility.js\";\nimport ModelAnimationLoop from \"./ModelAnimationLoop.js\";\n/**\n * Represents the contents of a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Batched3DModel|Batched 3D Model}\n * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Batched3DModel3DTileContent\n * @constructor\n *\n * @private\n */\n\nfunction Batched3DModel3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._model = undefined;\n  this._batchTable = undefined;\n  this._features = undefined; // Populate from gltf when available\n\n  this._batchIdAttributeName = undefined;\n  this._diffuseAttributeOrUniformName = {};\n  this._rtcCenterTransform = undefined;\n  this._contentModelMatrix = undefined;\n  this.featurePropertiesDirty = false;\n  initialize(this, arrayBuffer, byteOffset);\n} // This can be overridden for testing purposes\n\n\nBatched3DModel3DTileContent._deprecationWarning = deprecationWarning;\nObject.defineProperties(Batched3DModel3DTileContent.prototype, {\n  featuresLength: {\n    get: function () {\n      return this._batchTable.featuresLength;\n    }\n  },\n  pointsLength: {\n    get: function () {\n      return 0;\n    }\n  },\n  trianglesLength: {\n    get: function () {\n      return this._model.trianglesLength;\n    }\n  },\n  geometryByteLength: {\n    get: function () {\n      return this._model.geometryByteLength;\n    }\n  },\n  texturesByteLength: {\n    get: function () {\n      return this._model.texturesByteLength;\n    }\n  },\n  batchTableByteLength: {\n    get: function () {\n      return this._batchTable.memorySizeInBytes;\n    }\n  },\n  innerContents: {\n    get: function () {\n      return undefined;\n    }\n  },\n  readyPromise: {\n    get: function () {\n      return this._model.readyPromise;\n    }\n  },\n  tileset: {\n    get: function () {\n      return this._tileset;\n    }\n  },\n  tile: {\n    get: function () {\n      return this._tile;\n    }\n  },\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    }\n  },\n  batchTable: {\n    get: function () {\n      return this._batchTable;\n    }\n  }\n});\nvar sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\nfunction getBatchIdAttributeName(gltf) {\n  var batchIdAttributeName = ModelUtility.getAttributeOrUniformBySemantic(gltf, \"_BATCHID\");\n\n  if (!defined(batchIdAttributeName)) {\n    batchIdAttributeName = ModelUtility.getAttributeOrUniformBySemantic(gltf, \"BATCHID\");\n\n    if (defined(batchIdAttributeName)) {\n      Batched3DModel3DTileContent._deprecationWarning(\"b3dm-legacy-batchid\", \"The glTF in this b3dm uses the semantic `BATCHID`. Application-specific semantics should be prefixed with an underscore: `_BATCHID`.\");\n    }\n  }\n\n  return batchIdAttributeName;\n}\n\nfunction getVertexShaderCallback(content) {\n  return function (vs, programId) {\n    var batchTable = content._batchTable;\n    var handleTranslucent = !defined(content._tileset.classificationType);\n    var gltf = content._model.gltf;\n\n    if (defined(gltf)) {\n      content._batchIdAttributeName = getBatchIdAttributeName(gltf);\n      content._diffuseAttributeOrUniformName[programId] = ModelUtility.getDiffuseAttributeOrUniform(gltf, programId);\n    }\n\n    var callback = batchTable.getVertexShaderCallback(handleTranslucent, content._batchIdAttributeName, content._diffuseAttributeOrUniformName[programId]);\n    return defined(callback) ? callback(vs) : vs;\n  };\n}\n\nfunction getFragmentShaderCallback(content) {\n  return function (fs, programId) {\n    var batchTable = content._batchTable;\n    var handleTranslucent = !defined(content._tileset.classificationType);\n    var gltf = content._model.gltf;\n\n    if (defined(gltf)) {\n      content._diffuseAttributeOrUniformName[programId] = ModelUtility.getDiffuseAttributeOrUniform(gltf, programId);\n    }\n\n    var callback = batchTable.getFragmentShaderCallback(handleTranslucent, content._diffuseAttributeOrUniformName[programId]);\n    return defined(callback) ? callback(fs) : fs;\n  };\n}\n\nfunction getPickIdCallback(content) {\n  return function () {\n    return content._batchTable.getPickId();\n  };\n}\n\nfunction getClassificationFragmentShaderCallback(content) {\n  return function (fs) {\n    var batchTable = content._batchTable;\n    var callback = batchTable.getClassificationFragmentShaderCallback();\n    return defined(callback) ? callback(fs) : fs;\n  };\n}\n\nfunction createColorChangedCallback(content) {\n  return function (batchId, color) {\n    content._model.updateCommands(batchId, color);\n  };\n}\n\nfunction initialize(content, arrayBuffer, byteOffset) {\n  var tileset = content._tileset;\n  var tile = content._tile;\n  var resource = content._resource;\n  var byteStart = defaultValue(byteOffset, 0);\n  byteOffset = byteStart;\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic\n\n  var version = view.getUint32(byteOffset, true);\n\n  if (version !== 1) {\n    throw new RuntimeError(\"Only Batched 3D Model version 1 is supported.  Version \" + version + \" is not.\");\n  }\n\n  byteOffset += sizeOfUint32;\n  var byteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n  var batchLength; // Legacy header #1: [batchLength] [batchTableByteLength]\n  // Legacy header #2: [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength]\n  // Current header: [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength]\n  // If the header is in the first legacy format 'batchTableJsonByteLength' will be the start of the JSON string (a quotation mark) or the glTF magic.\n  // Accordingly its first byte will be either 0x22 or 0x67, and so the minimum uint32 expected is 0x22000000 = 570425344 = 570MB. It is unlikely that the feature table JSON will exceed this length.\n  // The check for the second legacy format is similar, except it checks 'batchTableBinaryByteLength' instead\n\n  if (batchTableJsonByteLength >= 570425344) {\n    // First legacy check\n    byteOffset -= sizeOfUint32 * 2;\n    batchLength = featureTableJsonByteLength;\n    batchTableJsonByteLength = featureTableBinaryByteLength;\n    batchTableBinaryByteLength = 0;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n\n    Batched3DModel3DTileContent._deprecationWarning(\"b3dm-legacy-header\", \"This b3dm header is using the legacy format [batchLength] [batchTableByteLength]. The new format is [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength] from https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Batched3DModel.\");\n  } else if (batchTableBinaryByteLength >= 570425344) {\n    // Second legacy check\n    byteOffset -= sizeOfUint32;\n    batchLength = batchTableJsonByteLength;\n    batchTableJsonByteLength = featureTableJsonByteLength;\n    batchTableBinaryByteLength = featureTableBinaryByteLength;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n\n    Batched3DModel3DTileContent._deprecationWarning(\"b3dm-legacy-header\", \"This b3dm header is using the legacy format [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength]. The new format is [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength] from https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Batched3DModel.\");\n  }\n\n  var featureTableJson;\n\n  if (featureTableJsonByteLength === 0) {\n    featureTableJson = {\n      BATCH_LENGTH: defaultValue(batchLength, 0)\n    };\n  } else {\n    featureTableJson = getJsonFromTypedArray(uint8Array, byteOffset, featureTableJsonByteLength);\n    byteOffset += featureTableJsonByteLength;\n  }\n\n  var featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n  var featureTable = new Cesium3DTileFeatureTable(featureTableJson, featureTableBinary);\n  batchLength = featureTable.getGlobalProperty(\"BATCH_LENGTH\");\n  featureTable.featuresLength = batchLength;\n  var batchTableJson;\n  var batchTableBinary;\n\n  if (batchTableJsonByteLength > 0) {\n    // PERFORMANCE_IDEA: is it possible to allocate this on-demand?  Perhaps keep the\n    // arraybuffer/string compressed in memory and then decompress it when it is first accessed.\n    //\n    // We could also make another request for it, but that would make the property set/get\n    // API async, and would double the number of numbers in some cases.\n    batchTableJson = getJsonFromTypedArray(uint8Array, byteOffset, batchTableJsonByteLength);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength); // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n\n      batchTableBinary = new Uint8Array(batchTableBinary);\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  var colorChangedCallback;\n\n  if (defined(tileset.classificationType)) {\n    colorChangedCallback = createColorChangedCallback(content);\n  }\n\n  var batchTable = new Cesium3DTileBatchTable(content, batchLength, batchTableJson, batchTableBinary, colorChangedCallback);\n  content._batchTable = batchTable;\n  var gltfByteLength = byteStart + byteLength - byteOffset;\n\n  if (gltfByteLength === 0) {\n    throw new RuntimeError(\"glTF byte length must be greater than 0.\");\n  }\n\n  var gltfView;\n\n  if (byteOffset % 4 === 0) {\n    gltfView = new Uint8Array(arrayBuffer, byteOffset, gltfByteLength);\n  } else {\n    // Create a copy of the glb so that it is 4-byte aligned\n    Batched3DModel3DTileContent._deprecationWarning(\"b3dm-glb-unaligned\", \"The embedded glb is not aligned to a 4-byte boundary.\");\n\n    gltfView = new Uint8Array(uint8Array.subarray(byteOffset, byteOffset + gltfByteLength));\n  }\n\n  var pickObject = {\n    content: content,\n    primitive: tileset\n  };\n  content._rtcCenterTransform = Matrix4.IDENTITY;\n  var rtcCenter = featureTable.getGlobalProperty(\"RTC_CENTER\", ComponentDatatype.FLOAT, 3);\n\n  if (defined(rtcCenter)) {\n    content._rtcCenterTransform = Matrix4.fromTranslation(Cartesian3.fromArray(rtcCenter));\n  }\n\n  content._contentModelMatrix = Matrix4.multiply(tile.computedTransform, content._rtcCenterTransform, new Matrix4());\n\n  if (!defined(tileset.classificationType)) {\n    // PERFORMANCE_IDEA: patch the shader on demand, e.g., the first time show/color changes.\n    // The pick shader still needs to be patched.\n    content._model = new Model({\n      gltf: gltfView,\n      cull: false,\n      // The model is already culled by 3D Tiles\n      releaseGltfJson: true,\n      // Models are unique and will not benefit from caching so save memory\n      opaquePass: Pass.CESIUM_3D_TILE,\n      // Draw opaque portions of the model during the 3D Tiles pass\n      basePath: resource,\n      requestType: RequestType.TILES3D,\n      modelMatrix: content._contentModelMatrix,\n      upAxis: tileset._gltfUpAxis,\n      forwardAxis: Axis.X,\n      shadows: tileset.shadows,\n      debugWireframe: tileset.debugWireframe,\n      incrementallyLoadTextures: false,\n      vertexShaderLoaded: getVertexShaderCallback(content),\n      fragmentShaderLoaded: getFragmentShaderCallback(content),\n      uniformMapLoaded: batchTable.getUniformMapCallback(),\n      pickIdLoaded: getPickIdCallback(content),\n      addBatchIdToGeneratedShaders: batchLength > 0,\n      // If the batch table has values in it, generated shaders will need a batchId attribute\n      pickObject: pickObject,\n      imageBasedLightingFactor: tileset.imageBasedLightingFactor,\n      lightColor: tileset.lightColor,\n      luminanceAtZenith: tileset.luminanceAtZenith,\n      sphericalHarmonicCoefficients: tileset.sphericalHarmonicCoefficients,\n      specularEnvironmentMaps: tileset.specularEnvironmentMaps,\n      backFaceCulling: tileset.backFaceCulling\n    });\n\n    content._model.readyPromise.then(function (model) {\n      model.activeAnimations.addAll({\n        loop: ModelAnimationLoop.REPEAT\n      });\n    });\n  } else {\n    // This transcodes glTF to an internal representation for geometry so we can take advantage of the re-batching of vector data.\n    // For a list of limitations on the input glTF, see the documentation for classificationType of Cesium3DTileset.\n    content._model = new ClassificationModel({\n      gltf: gltfView,\n      cull: false,\n      // The model is already culled by 3D Tiles\n      basePath: resource,\n      requestType: RequestType.TILES3D,\n      modelMatrix: content._contentModelMatrix,\n      upAxis: tileset._gltfUpAxis,\n      forwardAxis: Axis.X,\n      debugWireframe: tileset.debugWireframe,\n      vertexShaderLoaded: getVertexShaderCallback(content),\n      classificationShaderLoaded: getClassificationFragmentShaderCallback(content),\n      uniformMapLoaded: batchTable.getUniformMapCallback(),\n      pickIdLoaded: getPickIdCallback(content),\n      classificationType: tileset._classificationType,\n      batchTable: batchTable\n    });\n  }\n}\n\nfunction createFeatures(content) {\n  var featuresLength = content.featuresLength;\n\n  if (!defined(content._features) && featuresLength > 0) {\n    var features = new Array(featuresLength);\n\n    for (var i = 0; i < featuresLength; ++i) {\n      features[i] = new Cesium3DTileFeature(content, i);\n    }\n\n    content._features = features;\n  }\n}\n\nBatched3DModel3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return this._batchTable.hasProperty(batchId, name);\n};\n\nBatched3DModel3DTileContent.prototype.getFeature = function (batchId) {\n  //>>includeStart('debug', pragmas.debug);\n  var featuresLength = this.featuresLength;\n\n  if (!defined(batchId) || batchId < 0 || batchId >= featuresLength) {\n    throw new DeveloperError(\"batchId is required and between zero and featuresLength - 1 (\" + (featuresLength - 1) + \").\");\n  } //>>includeEnd('debug');\n\n\n  createFeatures(this);\n  return this._features[batchId];\n};\n\nBatched3DModel3DTileContent.prototype.applyDebugSettings = function (enabled, color) {\n  color = enabled ? color : Color.WHITE;\n\n  if (this.featuresLength === 0) {\n    this._model.color = color;\n  } else {\n    this._batchTable.setAllColor(color);\n  }\n};\n\nBatched3DModel3DTileContent.prototype.applyStyle = function (style) {\n  if (this.featuresLength === 0) {\n    var hasColorStyle = defined(style) && defined(style.color);\n    var hasShowStyle = defined(style) && defined(style.show);\n    this._model.color = hasColorStyle ? style.color.evaluateColor(undefined, this._model.color) : Color.clone(Color.WHITE, this._model.color);\n    this._model.show = hasShowStyle ? style.show.evaluate(undefined) : true;\n  } else {\n    this._batchTable.applyStyle(style);\n  }\n};\n\nBatched3DModel3DTileContent.prototype.update = function (tileset, frameState) {\n  var commandStart = frameState.commandList.length; // In the PROCESSING state we may be calling update() to move forward\n  // the content's resource loading.  In the READY state, it will\n  // actually generate commands.\n\n  this._batchTable.update(tileset, frameState);\n\n  this._contentModelMatrix = Matrix4.multiply(this._tile.computedTransform, this._rtcCenterTransform, this._contentModelMatrix);\n  this._model.modelMatrix = this._contentModelMatrix;\n  this._model.shadows = this._tileset.shadows;\n  this._model.imageBasedLightingFactor = this._tileset.imageBasedLightingFactor;\n  this._model.lightColor = this._tileset.lightColor;\n  this._model.luminanceAtZenith = this._tileset.luminanceAtZenith;\n  this._model.sphericalHarmonicCoefficients = this._tileset.sphericalHarmonicCoefficients;\n  this._model.specularEnvironmentMaps = this._tileset.specularEnvironmentMaps;\n  this._model.backFaceCulling = this._tileset.backFaceCulling;\n  this._model.debugWireframe = this._tileset.debugWireframe; // Update clipping planes\n\n  var tilesetClippingPlanes = this._tileset.clippingPlanes;\n  this._model.referenceMatrix = this._tileset.clippingPlanesOriginMatrix;\n\n  if (defined(tilesetClippingPlanes) && this._tile.clippingPlanesDirty) {\n    // Dereference the clipping planes from the model if they are irrelevant.\n    // Link/Dereference directly to avoid ownership checks.\n    // This will also trigger synchronous shader regeneration to remove or add the clipping plane and color blending code.\n    this._model._clippingPlanes = tilesetClippingPlanes.enabled && this._tile._isClipped ? tilesetClippingPlanes : undefined;\n  } // If the model references a different ClippingPlaneCollection due to the tileset's collection being replaced with a\n  // ClippingPlaneCollection that gives this tile the same clipping status, update the model to use the new ClippingPlaneCollection.\n\n\n  if (defined(tilesetClippingPlanes) && defined(this._model._clippingPlanes) && this._model._clippingPlanes !== tilesetClippingPlanes) {\n    this._model._clippingPlanes = tilesetClippingPlanes;\n  }\n\n  this._model.update(frameState); // If any commands were pushed, add derived commands\n\n\n  var commandEnd = frameState.commandList.length;\n\n  if (commandStart < commandEnd && (frameState.passes.render || frameState.passes.pick) && !defined(tileset.classificationType)) {\n    this._batchTable.addDerivedCommands(frameState, commandStart);\n  }\n};\n\nBatched3DModel3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nBatched3DModel3DTileContent.prototype.destroy = function () {\n  this._model = this._model && this._model.destroy();\n  this._batchTable = this._batchTable && this._batchTable.destroy();\n  return destroyObject(this);\n};\n\nexport default Batched3DModel3DTileContent;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Scene/Batched3DModel3DTileContent.js"],"names":["Cartesian3","Color","ComponentDatatype","defaultValue","defined","deprecationWarning","destroyObject","DeveloperError","getJsonFromTypedArray","Matrix4","RequestType","RuntimeError","Pass","Axis","Cesium3DTileBatchTable","Cesium3DTileFeature","Cesium3DTileFeatureTable","ClassificationModel","Model","ModelUtility","ModelAnimationLoop","Batched3DModel3DTileContent","tileset","tile","resource","arrayBuffer","byteOffset","_tileset","_tile","_resource","_model","undefined","_batchTable","_features","_batchIdAttributeName","_diffuseAttributeOrUniformName","_rtcCenterTransform","_contentModelMatrix","featurePropertiesDirty","initialize","_deprecationWarning","Object","defineProperties","prototype","featuresLength","get","pointsLength","trianglesLength","geometryByteLength","texturesByteLength","batchTableByteLength","memorySizeInBytes","innerContents","readyPromise","url","getUrlComponent","batchTable","sizeOfUint32","Uint32Array","BYTES_PER_ELEMENT","getBatchIdAttributeName","gltf","batchIdAttributeName","getAttributeOrUniformBySemantic","getVertexShaderCallback","content","vs","programId","handleTranslucent","classificationType","getDiffuseAttributeOrUniform","callback","getFragmentShaderCallback","fs","getPickIdCallback","getPickId","getClassificationFragmentShaderCallback","createColorChangedCallback","batchId","color","updateCommands","byteStart","uint8Array","Uint8Array","view","DataView","version","getUint32","byteLength","featureTableJsonByteLength","featureTableBinaryByteLength","batchTableJsonByteLength","batchTableBinaryByteLength","batchLength","featureTableJson","BATCH_LENGTH","featureTableBinary","featureTable","getGlobalProperty","batchTableJson","batchTableBinary","colorChangedCallback","gltfByteLength","gltfView","subarray","pickObject","primitive","IDENTITY","rtcCenter","FLOAT","fromTranslation","fromArray","multiply","computedTransform","cull","releaseGltfJson","opaquePass","CESIUM_3D_TILE","basePath","requestType","TILES3D","modelMatrix","upAxis","_gltfUpAxis","forwardAxis","X","shadows","debugWireframe","incrementallyLoadTextures","vertexShaderLoaded","fragmentShaderLoaded","uniformMapLoaded","getUniformMapCallback","pickIdLoaded","addBatchIdToGeneratedShaders","imageBasedLightingFactor","lightColor","luminanceAtZenith","sphericalHarmonicCoefficients","specularEnvironmentMaps","backFaceCulling","then","model","activeAnimations","addAll","loop","REPEAT","classificationShaderLoaded","_classificationType","createFeatures","features","Array","i","hasProperty","name","getFeature","applyDebugSettings","enabled","WHITE","setAllColor","applyStyle","style","hasColorStyle","hasShowStyle","show","evaluateColor","clone","evaluate","update","frameState","commandStart","commandList","length","tilesetClippingPlanes","clippingPlanes","referenceMatrix","clippingPlanesOriginMatrix","clippingPlanesDirty","_clippingPlanes","_isClipped","commandEnd","passes","render","pick","addDerivedCommands","isDestroyed","destroy"],"mappings":"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","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport deprecationWarning from \"../Core/deprecationWarning.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport getJsonFromTypedArray from \"../Core/getJsonFromTypedArray.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport RequestType from \"../Core/RequestType.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport Axis from \"./Axis.js\";\nimport Cesium3DTileBatchTable from \"./Cesium3DTileBatchTable.js\";\nimport Cesium3DTileFeature from \"./Cesium3DTileFeature.js\";\nimport Cesium3DTileFeatureTable from \"./Cesium3DTileFeatureTable.js\";\nimport ClassificationModel from \"./ClassificationModel.js\";\nimport Model from \"./Model.js\";\nimport ModelUtility from \"./ModelUtility.js\";\nimport ModelAnimationLoop from \"./ModelAnimationLoop.js\";\n\n/**\n * Represents the contents of a\n * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Batched3DModel|Batched 3D Model}\n * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset.\n * <p>\n * Implements the {@link Cesium3DTileContent} interface.\n * </p>\n *\n * @alias Batched3DModel3DTileContent\n * @constructor\n *\n * @private\n */\nfunction Batched3DModel3DTileContent(\n  tileset,\n  tile,\n  resource,\n  arrayBuffer,\n  byteOffset\n) {\n  this._tileset = tileset;\n  this._tile = tile;\n  this._resource = resource;\n  this._model = undefined;\n  this._batchTable = undefined;\n  this._features = undefined;\n\n  // Populate from gltf when available\n  this._batchIdAttributeName = undefined;\n  this._diffuseAttributeOrUniformName = {};\n\n  this._rtcCenterTransform = undefined;\n  this._contentModelMatrix = undefined;\n\n  this.featurePropertiesDirty = false;\n\n  initialize(this, arrayBuffer, byteOffset);\n}\n\n// This can be overridden for testing purposes\nBatched3DModel3DTileContent._deprecationWarning = deprecationWarning;\n\nObject.defineProperties(Batched3DModel3DTileContent.prototype, {\n  featuresLength: {\n    get: function () {\n      return this._batchTable.featuresLength;\n    },\n  },\n\n  pointsLength: {\n    get: function () {\n      return 0;\n    },\n  },\n\n  trianglesLength: {\n    get: function () {\n      return this._model.trianglesLength;\n    },\n  },\n\n  geometryByteLength: {\n    get: function () {\n      return this._model.geometryByteLength;\n    },\n  },\n\n  texturesByteLength: {\n    get: function () {\n      return this._model.texturesByteLength;\n    },\n  },\n\n  batchTableByteLength: {\n    get: function () {\n      return this._batchTable.memorySizeInBytes;\n    },\n  },\n\n  innerContents: {\n    get: function () {\n      return undefined;\n    },\n  },\n\n  readyPromise: {\n    get: function () {\n      return this._model.readyPromise;\n    },\n  },\n\n  tileset: {\n    get: function () {\n      return this._tileset;\n    },\n  },\n\n  tile: {\n    get: function () {\n      return this._tile;\n    },\n  },\n\n  url: {\n    get: function () {\n      return this._resource.getUrlComponent(true);\n    },\n  },\n\n  batchTable: {\n    get: function () {\n      return this._batchTable;\n    },\n  },\n});\n\nvar sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\nfunction getBatchIdAttributeName(gltf) {\n  var batchIdAttributeName = ModelUtility.getAttributeOrUniformBySemantic(\n    gltf,\n    \"_BATCHID\"\n  );\n  if (!defined(batchIdAttributeName)) {\n    batchIdAttributeName = ModelUtility.getAttributeOrUniformBySemantic(\n      gltf,\n      \"BATCHID\"\n    );\n    if (defined(batchIdAttributeName)) {\n      Batched3DModel3DTileContent._deprecationWarning(\n        \"b3dm-legacy-batchid\",\n        \"The glTF in this b3dm uses the semantic `BATCHID`. Application-specific semantics should be prefixed with an underscore: `_BATCHID`.\"\n      );\n    }\n  }\n  return batchIdAttributeName;\n}\n\nfunction getVertexShaderCallback(content) {\n  return function (vs, programId) {\n    var batchTable = content._batchTable;\n    var handleTranslucent = !defined(content._tileset.classificationType);\n\n    var gltf = content._model.gltf;\n    if (defined(gltf)) {\n      content._batchIdAttributeName = getBatchIdAttributeName(gltf);\n      content._diffuseAttributeOrUniformName[\n        programId\n      ] = ModelUtility.getDiffuseAttributeOrUniform(gltf, programId);\n    }\n\n    var callback = batchTable.getVertexShaderCallback(\n      handleTranslucent,\n      content._batchIdAttributeName,\n      content._diffuseAttributeOrUniformName[programId]\n    );\n    return defined(callback) ? callback(vs) : vs;\n  };\n}\n\nfunction getFragmentShaderCallback(content) {\n  return function (fs, programId) {\n    var batchTable = content._batchTable;\n    var handleTranslucent = !defined(content._tileset.classificationType);\n\n    var gltf = content._model.gltf;\n    if (defined(gltf)) {\n      content._diffuseAttributeOrUniformName[\n        programId\n      ] = ModelUtility.getDiffuseAttributeOrUniform(gltf, programId);\n    }\n    var callback = batchTable.getFragmentShaderCallback(\n      handleTranslucent,\n      content._diffuseAttributeOrUniformName[programId]\n    );\n    return defined(callback) ? callback(fs) : fs;\n  };\n}\n\nfunction getPickIdCallback(content) {\n  return function () {\n    return content._batchTable.getPickId();\n  };\n}\n\nfunction getClassificationFragmentShaderCallback(content) {\n  return function (fs) {\n    var batchTable = content._batchTable;\n    var callback = batchTable.getClassificationFragmentShaderCallback();\n    return defined(callback) ? callback(fs) : fs;\n  };\n}\n\nfunction createColorChangedCallback(content) {\n  return function (batchId, color) {\n    content._model.updateCommands(batchId, color);\n  };\n}\n\nfunction initialize(content, arrayBuffer, byteOffset) {\n  var tileset = content._tileset;\n  var tile = content._tile;\n  var resource = content._resource;\n\n  var byteStart = defaultValue(byteOffset, 0);\n  byteOffset = byteStart;\n\n  var uint8Array = new Uint8Array(arrayBuffer);\n  var view = new DataView(arrayBuffer);\n  byteOffset += sizeOfUint32; // Skip magic\n\n  var version = view.getUint32(byteOffset, true);\n  if (version !== 1) {\n    throw new RuntimeError(\n      \"Only Batched 3D Model version 1 is supported.  Version \" +\n        version +\n        \" is not.\"\n    );\n  }\n  byteOffset += sizeOfUint32;\n\n  var byteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += sizeOfUint32;\n\n  var batchLength;\n\n  // Legacy header #1: [batchLength] [batchTableByteLength]\n  // Legacy header #2: [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength]\n  // Current header: [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength]\n  // If the header is in the first legacy format 'batchTableJsonByteLength' will be the start of the JSON string (a quotation mark) or the glTF magic.\n  // Accordingly its first byte will be either 0x22 or 0x67, and so the minimum uint32 expected is 0x22000000 = 570425344 = 570MB. It is unlikely that the feature table JSON will exceed this length.\n  // The check for the second legacy format is similar, except it checks 'batchTableBinaryByteLength' instead\n  if (batchTableJsonByteLength >= 570425344) {\n    // First legacy check\n    byteOffset -= sizeOfUint32 * 2;\n    batchLength = featureTableJsonByteLength;\n    batchTableJsonByteLength = featureTableBinaryByteLength;\n    batchTableBinaryByteLength = 0;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n    Batched3DModel3DTileContent._deprecationWarning(\n      \"b3dm-legacy-header\",\n      \"This b3dm header is using the legacy format [batchLength] [batchTableByteLength]. The new format is [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength] from https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Batched3DModel.\"\n    );\n  } else if (batchTableBinaryByteLength >= 570425344) {\n    // Second legacy check\n    byteOffset -= sizeOfUint32;\n    batchLength = batchTableJsonByteLength;\n    batchTableJsonByteLength = featureTableJsonByteLength;\n    batchTableBinaryByteLength = featureTableBinaryByteLength;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n    Batched3DModel3DTileContent._deprecationWarning(\n      \"b3dm-legacy-header\",\n      \"This b3dm header is using the legacy format [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength]. The new format is [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength] from https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Batched3DModel.\"\n    );\n  }\n\n  var featureTableJson;\n  if (featureTableJsonByteLength === 0) {\n    featureTableJson = {\n      BATCH_LENGTH: defaultValue(batchLength, 0),\n    };\n  } else {\n    featureTableJson = getJsonFromTypedArray(\n      uint8Array,\n      byteOffset,\n      featureTableJsonByteLength\n    );\n    byteOffset += featureTableJsonByteLength;\n  }\n\n  var featureTableBinary = new Uint8Array(\n    arrayBuffer,\n    byteOffset,\n    featureTableBinaryByteLength\n  );\n  byteOffset += featureTableBinaryByteLength;\n\n  var featureTable = new Cesium3DTileFeatureTable(\n    featureTableJson,\n    featureTableBinary\n  );\n\n  batchLength = featureTable.getGlobalProperty(\"BATCH_LENGTH\");\n  featureTable.featuresLength = batchLength;\n\n  var batchTableJson;\n  var batchTableBinary;\n  if (batchTableJsonByteLength > 0) {\n    // PERFORMANCE_IDEA: is it possible to allocate this on-demand?  Perhaps keep the\n    // arraybuffer/string compressed in memory and then decompress it when it is first accessed.\n    //\n    // We could also make another request for it, but that would make the property set/get\n    // API async, and would double the number of numbers in some cases.\n    batchTableJson = getJsonFromTypedArray(\n      uint8Array,\n      byteOffset,\n      batchTableJsonByteLength\n    );\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      batchTableBinary = new Uint8Array(\n        arrayBuffer,\n        byteOffset,\n        batchTableBinaryByteLength\n      );\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      batchTableBinary = new Uint8Array(batchTableBinary);\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  var colorChangedCallback;\n  if (defined(tileset.classificationType)) {\n    colorChangedCallback = createColorChangedCallback(content);\n  }\n\n  var batchTable = new Cesium3DTileBatchTable(\n    content,\n    batchLength,\n    batchTableJson,\n    batchTableBinary,\n    colorChangedCallback\n  );\n  content._batchTable = batchTable;\n\n  var gltfByteLength = byteStart + byteLength - byteOffset;\n  if (gltfByteLength === 0) {\n    throw new RuntimeError(\"glTF byte length must be greater than 0.\");\n  }\n\n  var gltfView;\n  if (byteOffset % 4 === 0) {\n    gltfView = new Uint8Array(arrayBuffer, byteOffset, gltfByteLength);\n  } else {\n    // Create a copy of the glb so that it is 4-byte aligned\n    Batched3DModel3DTileContent._deprecationWarning(\n      \"b3dm-glb-unaligned\",\n      \"The embedded glb is not aligned to a 4-byte boundary.\"\n    );\n    gltfView = new Uint8Array(\n      uint8Array.subarray(byteOffset, byteOffset + gltfByteLength)\n    );\n  }\n\n  var pickObject = {\n    content: content,\n    primitive: tileset,\n  };\n\n  content._rtcCenterTransform = Matrix4.IDENTITY;\n  var rtcCenter = featureTable.getGlobalProperty(\n    \"RTC_CENTER\",\n    ComponentDatatype.FLOAT,\n    3\n  );\n  if (defined(rtcCenter)) {\n    content._rtcCenterTransform = Matrix4.fromTranslation(\n      Cartesian3.fromArray(rtcCenter)\n    );\n  }\n\n  content._contentModelMatrix = Matrix4.multiply(\n    tile.computedTransform,\n    content._rtcCenterTransform,\n    new Matrix4()\n  );\n\n  if (!defined(tileset.classificationType)) {\n    // PERFORMANCE_IDEA: patch the shader on demand, e.g., the first time show/color changes.\n    // The pick shader still needs to be patched.\n    content._model = new Model({\n      gltf: gltfView,\n      cull: false, // The model is already culled by 3D Tiles\n      releaseGltfJson: true, // Models are unique and will not benefit from caching so save memory\n      opaquePass: Pass.CESIUM_3D_TILE, // Draw opaque portions of the model during the 3D Tiles pass\n      basePath: resource,\n      requestType: RequestType.TILES3D,\n      modelMatrix: content._contentModelMatrix,\n      upAxis: tileset._gltfUpAxis,\n      forwardAxis: Axis.X,\n      shadows: tileset.shadows,\n      debugWireframe: tileset.debugWireframe,\n      incrementallyLoadTextures: false,\n      vertexShaderLoaded: getVertexShaderCallback(content),\n      fragmentShaderLoaded: getFragmentShaderCallback(content),\n      uniformMapLoaded: batchTable.getUniformMapCallback(),\n      pickIdLoaded: getPickIdCallback(content),\n      addBatchIdToGeneratedShaders: batchLength > 0, // If the batch table has values in it, generated shaders will need a batchId attribute\n      pickObject: pickObject,\n      imageBasedLightingFactor: tileset.imageBasedLightingFactor,\n      lightColor: tileset.lightColor,\n      luminanceAtZenith: tileset.luminanceAtZenith,\n      sphericalHarmonicCoefficients: tileset.sphericalHarmonicCoefficients,\n      specularEnvironmentMaps: tileset.specularEnvironmentMaps,\n      backFaceCulling: tileset.backFaceCulling,\n    });\n    content._model.readyPromise.then(function (model) {\n      model.activeAnimations.addAll({\n        loop: ModelAnimationLoop.REPEAT,\n      });\n    });\n  } else {\n    // This transcodes glTF to an internal representation for geometry so we can take advantage of the re-batching of vector data.\n    // For a list of limitations on the input glTF, see the documentation for classificationType of Cesium3DTileset.\n    content._model = new ClassificationModel({\n      gltf: gltfView,\n      cull: false, // The model is already culled by 3D Tiles\n      basePath: resource,\n      requestType: RequestType.TILES3D,\n      modelMatrix: content._contentModelMatrix,\n      upAxis: tileset._gltfUpAxis,\n      forwardAxis: Axis.X,\n      debugWireframe: tileset.debugWireframe,\n      vertexShaderLoaded: getVertexShaderCallback(content),\n      classificationShaderLoaded: getClassificationFragmentShaderCallback(\n        content\n      ),\n      uniformMapLoaded: batchTable.getUniformMapCallback(),\n      pickIdLoaded: getPickIdCallback(content),\n      classificationType: tileset._classificationType,\n      batchTable: batchTable,\n    });\n  }\n}\n\nfunction createFeatures(content) {\n  var featuresLength = content.featuresLength;\n  if (!defined(content._features) && featuresLength > 0) {\n    var features = new Array(featuresLength);\n    for (var i = 0; i < featuresLength; ++i) {\n      features[i] = new Cesium3DTileFeature(content, i);\n    }\n    content._features = features;\n  }\n}\n\nBatched3DModel3DTileContent.prototype.hasProperty = function (batchId, name) {\n  return this._batchTable.hasProperty(batchId, name);\n};\n\nBatched3DModel3DTileContent.prototype.getFeature = function (batchId) {\n  //>>includeStart('debug', pragmas.debug);\n  var featuresLength = this.featuresLength;\n  if (!defined(batchId) || batchId < 0 || batchId >= featuresLength) {\n    throw new DeveloperError(\n      \"batchId is required and between zero and featuresLength - 1 (\" +\n        (featuresLength - 1) +\n        \").\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  createFeatures(this);\n  return this._features[batchId];\n};\n\nBatched3DModel3DTileContent.prototype.applyDebugSettings = function (\n  enabled,\n  color\n) {\n  color = enabled ? color : Color.WHITE;\n  if (this.featuresLength === 0) {\n    this._model.color = color;\n  } else {\n    this._batchTable.setAllColor(color);\n  }\n};\n\nBatched3DModel3DTileContent.prototype.applyStyle = function (style) {\n  if (this.featuresLength === 0) {\n    var hasColorStyle = defined(style) && defined(style.color);\n    var hasShowStyle = defined(style) && defined(style.show);\n    this._model.color = hasColorStyle\n      ? style.color.evaluateColor(undefined, this._model.color)\n      : Color.clone(Color.WHITE, this._model.color);\n    this._model.show = hasShowStyle ? style.show.evaluate(undefined) : true;\n  } else {\n    this._batchTable.applyStyle(style);\n  }\n};\n\nBatched3DModel3DTileContent.prototype.update = function (tileset, frameState) {\n  var commandStart = frameState.commandList.length;\n\n  // In the PROCESSING state we may be calling update() to move forward\n  // the content's resource loading.  In the READY state, it will\n  // actually generate commands.\n  this._batchTable.update(tileset, frameState);\n\n  this._contentModelMatrix = Matrix4.multiply(\n    this._tile.computedTransform,\n    this._rtcCenterTransform,\n    this._contentModelMatrix\n  );\n  this._model.modelMatrix = this._contentModelMatrix;\n\n  this._model.shadows = this._tileset.shadows;\n  this._model.imageBasedLightingFactor = this._tileset.imageBasedLightingFactor;\n  this._model.lightColor = this._tileset.lightColor;\n  this._model.luminanceAtZenith = this._tileset.luminanceAtZenith;\n  this._model.sphericalHarmonicCoefficients = this._tileset.sphericalHarmonicCoefficients;\n  this._model.specularEnvironmentMaps = this._tileset.specularEnvironmentMaps;\n  this._model.backFaceCulling = this._tileset.backFaceCulling;\n  this._model.debugWireframe = this._tileset.debugWireframe;\n\n  // Update clipping planes\n  var tilesetClippingPlanes = this._tileset.clippingPlanes;\n  this._model.referenceMatrix = this._tileset.clippingPlanesOriginMatrix;\n  if (defined(tilesetClippingPlanes) && this._tile.clippingPlanesDirty) {\n    // Dereference the clipping planes from the model if they are irrelevant.\n    // Link/Dereference directly to avoid ownership checks.\n    // This will also trigger synchronous shader regeneration to remove or add the clipping plane and color blending code.\n    this._model._clippingPlanes =\n      tilesetClippingPlanes.enabled && this._tile._isClipped\n        ? tilesetClippingPlanes\n        : undefined;\n  }\n\n  // If the model references a different ClippingPlaneCollection due to the tileset's collection being replaced with a\n  // ClippingPlaneCollection that gives this tile the same clipping status, update the model to use the new ClippingPlaneCollection.\n  if (\n    defined(tilesetClippingPlanes) &&\n    defined(this._model._clippingPlanes) &&\n    this._model._clippingPlanes !== tilesetClippingPlanes\n  ) {\n    this._model._clippingPlanes = tilesetClippingPlanes;\n  }\n\n  this._model.update(frameState);\n\n  // If any commands were pushed, add derived commands\n  var commandEnd = frameState.commandList.length;\n  if (\n    commandStart < commandEnd &&\n    (frameState.passes.render || frameState.passes.pick) &&\n    !defined(tileset.classificationType)\n  ) {\n    this._batchTable.addDerivedCommands(frameState, commandStart);\n  }\n};\n\nBatched3DModel3DTileContent.prototype.isDestroyed = function () {\n  return false;\n};\n\nBatched3DModel3DTileContent.prototype.destroy = function () {\n  this._model = this._model && this._model.destroy();\n  this._batchTable = this._batchTable && this._batchTable.destroy();\n  return destroyObject(this);\n};\nexport default Batched3DModel3DTileContent;\n"]},"metadata":{},"sourceType":"module"}