{"ast":null,"code":"import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n/**\n * @typedef {Object} GoogleEarthEnterpriseMapsProvider.ConstructorOptions\n *\n * Initialization options for the GoogleEarthEnterpriseMapsProvider constructor\n *\n * @property {Resource|String} url The url of the Google Earth server hosting the imagery.\n * @property {Number} channel The channel (id) to be used when requesting data from the server.\n *        The channel number can be found by looking at the json file located at:\n *        earth.localdomain/default_map/query?request=Json&vars=geeServerDefs The /default_map path may\n *        differ depending on your Google Earth Enterprise server configuration. Look for the \"id\" that\n *        is associated with a \"ImageryMaps\" requestType. There may be more than one id available.\n *        Example:\n *        {\n *          layers: [\n *            {\n *              id: 1002,\n *              requestType: \"ImageryMaps\"\n *            },\n *            {\n *              id: 1007,\n *              requestType: \"VectorMapsRaster\"\n *            }\n *          ]\n *        }\n * @property {String} [path=\"/default_map\"] The path of the Google Earth server hosting the imagery.\n * @property {Number} [maximumLevel] The maximum level-of-detail supported by the Google Earth\n *        Enterprise server, or undefined if there is no limit.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded. To ensure that no tiles are discarded, construct and pass\n *        a {@link NeverTileDiscardPolicy} for this parameter.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n */\n\n/**\n * Provides tiled imagery using the Google Earth Imagery API.\n *\n * Notes: This imagery provider does not work with the public Google Earth servers. It works with the\n *        Google Earth Enterprise Server.\n *\n *        By default the Google Earth Enterprise server does not set the\n *        {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing} headers. You can either\n *        use a proxy server which adds these headers, or in the /opt/google/gehttpd/conf/gehttpd.conf\n *        and add the 'Header set Access-Control-Allow-Origin \"*\"' option to the '&lt;Directory /&gt;' and\n *        '&lt;Directory \"/opt/google/gehttpd/htdocs\"&gt;' directives.\n *\n *        This provider is for use with 2D Maps API as part of Google Earth Enterprise. For 3D Earth API uses, it\n *        is necessary to use {@link GoogleEarthEnterpriseImageryProvider}\n *\n * @alias GoogleEarthEnterpriseMapsProvider\n * @constructor\n *\n * @param {GoogleEarthEnterpriseMapsProvider.ConstructorOptions} options Object describing initialization options\n *\n * @exception {RuntimeError} Could not find layer with channel (id) of <code>options.channel</code>.\n * @exception {RuntimeError} Could not find a version in channel (id) <code>options.channel</code>.\n * @exception {RuntimeError} Unsupported projection <code>data.projection</code>.\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * var google = new Cesium.GoogleEarthEnterpriseMapsProvider({\n *     url : 'https://earth.localdomain',\n *     channel : 1008\n * });\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\n\nfunction GoogleEarthEnterpriseMapsProvider(options) {\n  options = defaultValue(options, {}); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n\n  if (!defined(options.channel)) {\n    throw new DeveloperError(\"options.channel is required.\");\n  } //>>includeEnd('debug');\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n\n  this.defaultAlpha = undefined;\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultNightAlpha = undefined;\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultDayAlpha = undefined;\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultBrightness = undefined;\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultContrast = undefined;\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultHue = undefined;\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultSaturation = undefined;\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default 1.9\n   */\n\n  this.defaultGamma = 1.9;\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n\n  this.defaultMinificationFilter = undefined;\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n\n  this.defaultMagnificationFilter = undefined;\n  var url = options.url;\n  var path = defaultValue(options.path, \"/default_map\");\n  var resource = Resource.createIfNeeded(url).getDerivedResource({\n    // We used to just append path to url, so now that we do proper URI resolution, removed the /\n    url: path[0] === \"/\" ? path.substring(1) : path\n  });\n  resource.appendForwardSlash();\n  this._resource = resource;\n  this._url = url;\n  this._path = path;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  this._channel = options.channel;\n  this._requestType = \"ImageryMaps\";\n  this._credit = new Credit('<a href=\"http://www.google.com/enterprise/mapsearth/products/earthenterprise.html\"><img src=\"' + GoogleEarthEnterpriseMapsProvider.logoUrl + '\" title=\"Google Imagery\"/></a>');\n  this._tilingScheme = undefined;\n  this._version = undefined;\n  this._tileWidth = 256;\n  this._tileHeight = 256;\n  this._maximumLevel = options.maximumLevel;\n  this._errorEvent = new Event();\n  this._ready = false;\n  this._readyPromise = when.defer();\n  var metadataResource = resource.getDerivedResource({\n    url: \"query\",\n    queryParameters: {\n      request: \"Json\",\n      vars: \"geeServerDefs\",\n      is2d: \"t\"\n    }\n  });\n  var that = this;\n  var metadataError;\n\n  function metadataSuccess(text) {\n    var data; // The Google Earth server sends malformed JSON data currently...\n\n    try {\n      // First, try parsing it like normal in case a future version sends correctly formatted JSON\n      data = JSON.parse(text);\n    } catch (e) {\n      // Quote object strings manually, then try parsing again\n      data = JSON.parse(text.replace(/([\\[\\{,])[\\n\\r ]*([A-Za-z0-9]+)[\\n\\r ]*:/g, '$1\"$2\":'));\n    }\n\n    var layer;\n\n    for (var i = 0; i < data.layers.length; i++) {\n      if (data.layers[i].id === that._channel) {\n        layer = data.layers[i];\n        break;\n      }\n    }\n\n    var message;\n\n    if (!defined(layer)) {\n      message = \"Could not find layer with channel (id) of \" + that._channel + \".\";\n      metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, message, undefined, undefined, undefined, requestMetadata);\n      throw new RuntimeError(message);\n    }\n\n    if (!defined(layer.version)) {\n      message = \"Could not find a version in channel (id) \" + that._channel + \".\";\n      metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, message, undefined, undefined, undefined, requestMetadata);\n      throw new RuntimeError(message);\n    }\n\n    that._version = layer.version;\n\n    if (defined(data.projection) && data.projection === \"flat\") {\n      that._tilingScheme = new GeographicTilingScheme({\n        numberOfLevelZeroTilesX: 2,\n        numberOfLevelZeroTilesY: 2,\n        rectangle: new Rectangle(-Math.PI, -Math.PI, Math.PI, Math.PI),\n        ellipsoid: options.ellipsoid\n      }); // Default to mercator projection when projection is undefined\n    } else if (!defined(data.projection) || data.projection === \"mercator\") {\n      that._tilingScheme = new WebMercatorTilingScheme({\n        numberOfLevelZeroTilesX: 2,\n        numberOfLevelZeroTilesY: 2,\n        ellipsoid: options.ellipsoid\n      });\n    } else {\n      message = \"Unsupported projection \" + data.projection + \".\";\n      metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, message, undefined, undefined, undefined, requestMetadata);\n      throw new RuntimeError(message);\n    }\n\n    that._ready = true;\n\n    that._readyPromise.resolve(true);\n\n    TileProviderError.handleSuccess(metadataError);\n  }\n\n  function metadataFailure(e) {\n    var message = \"An error occurred while accessing \" + metadataResource.url + \".\";\n    metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, message, undefined, undefined, undefined, requestMetadata);\n\n    that._readyPromise.reject(new RuntimeError(message));\n  }\n\n  function requestMetadata() {\n    var metadata = metadataResource.fetchText();\n    when(metadata, metadataSuccess, metadataFailure);\n  }\n\n  requestMetadata();\n}\n\nObject.defineProperties(GoogleEarthEnterpriseMapsProvider.prototype, {\n  /**\n   * Gets the URL of the Google Earth MapServer.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._url;\n    }\n  },\n\n  /**\n   * Gets the url path of the data on the Google Earth server.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  path: {\n    get: function () {\n      return this._path;\n    }\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n\n  /**\n   * Gets the imagery channel (id) currently being used.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  channel: {\n    get: function () {\n      return this._channel;\n    }\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileWidth must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileWidth;\n    }\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileHeight must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileHeight;\n    }\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"maximumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._maximumLevel;\n    }\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"minimumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return 0;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tilingScheme must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the version of the data used by this provider.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  version: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"version must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._version;\n    }\n  },\n\n  /**\n   * Gets the type of data that is being requested from the provider.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  requestType: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"requestType must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._requestType;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"rectangle must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tilingScheme.rectangle;\n    }\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileDiscardPolicy must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileDiscardPolicy;\n    }\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    }\n  }\n});\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\nGoogleEarthEnterpriseMapsProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\n\n\nGoogleEarthEnterpriseMapsProvider.prototype.requestImage = function (x, y, level, request) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\"requestImage must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  var resource = this._resource.getDerivedResource({\n    url: \"query\",\n    request: request,\n    queryParameters: {\n      request: this._requestType,\n      channel: this._channel,\n      version: this._version,\n      x: x,\n      y: y,\n      z: level + 1 // Google Earth starts with a zoom level of 1, not 0\n\n    }\n  });\n\n  return ImageryProvider.loadImage(this, resource);\n};\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\n\n\nGoogleEarthEnterpriseMapsProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n};\n\nGoogleEarthEnterpriseMapsProvider._logoUrl = undefined;\nObject.defineProperties(GoogleEarthEnterpriseMapsProvider, {\n  /**\n   * Gets or sets the URL to the Google Earth logo for display in the credit.\n   * @memberof GoogleEarthEnterpriseMapsProvider\n   * @type {String}\n   */\n  logoUrl: {\n    get: function () {\n      if (!defined(GoogleEarthEnterpriseMapsProvider._logoUrl)) {\n        GoogleEarthEnterpriseMapsProvider._logoUrl = buildModuleUrl(\"Assets/Images/google_earth_credit.png\");\n      }\n\n      return GoogleEarthEnterpriseMapsProvider._logoUrl;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value); //>>includeEnd('debug');\n\n      GoogleEarthEnterpriseMapsProvider._logoUrl = value;\n    }\n  }\n});\nexport default GoogleEarthEnterpriseMapsProvider;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Scene/GoogleEarthEnterpriseMapsProvider.js"],"names":["buildModuleUrl","Check","Credit","defaultValue","defined","DeveloperError","Event","GeographicTilingScheme","Rectangle","Resource","RuntimeError","TileProviderError","WebMercatorTilingScheme","when","ImageryProvider","GoogleEarthEnterpriseMapsProvider","options","url","channel","defaultAlpha","undefined","defaultNightAlpha","defaultDayAlpha","defaultBrightness","defaultContrast","defaultHue","defaultSaturation","defaultGamma","defaultMinificationFilter","defaultMagnificationFilter","path","resource","createIfNeeded","getDerivedResource","substring","appendForwardSlash","_resource","_url","_path","_tileDiscardPolicy","tileDiscardPolicy","_channel","_requestType","_credit","logoUrl","_tilingScheme","_version","_tileWidth","_tileHeight","_maximumLevel","maximumLevel","_errorEvent","_ready","_readyPromise","defer","metadataResource","queryParameters","request","vars","is2d","that","metadataError","metadataSuccess","text","data","JSON","parse","e","replace","layer","i","layers","length","id","message","handleError","requestMetadata","version","projection","numberOfLevelZeroTilesX","numberOfLevelZeroTilesY","rectangle","Math","PI","ellipsoid","resolve","handleSuccess","metadataFailure","reject","metadata","fetchText","Object","defineProperties","prototype","get","proxy","tileWidth","tileHeight","minimumLevel","tilingScheme","requestType","errorEvent","ready","readyPromise","promise","credit","hasAlphaChannel","getTileCredits","x","y","level","requestImage","z","loadImage","pickFeatures","longitude","latitude","_logoUrl","set","value"],"mappings":"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","sourcesContent":["import buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Check from \"../Core/Check.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n\n/**\n * @typedef {Object} GoogleEarthEnterpriseMapsProvider.ConstructorOptions\n *\n * Initialization options for the GoogleEarthEnterpriseMapsProvider constructor\n *\n * @property {Resource|String} url The url of the Google Earth server hosting the imagery.\n * @property {Number} channel The channel (id) to be used when requesting data from the server.\n *        The channel number can be found by looking at the json file located at:\n *        earth.localdomain/default_map/query?request=Json&vars=geeServerDefs The /default_map path may\n *        differ depending on your Google Earth Enterprise server configuration. Look for the \"id\" that\n *        is associated with a \"ImageryMaps\" requestType. There may be more than one id available.\n *        Example:\n *        {\n *          layers: [\n *            {\n *              id: 1002,\n *              requestType: \"ImageryMaps\"\n *            },\n *            {\n *              id: 1007,\n *              requestType: \"VectorMapsRaster\"\n *            }\n *          ]\n *        }\n * @property {String} [path=\"/default_map\"] The path of the Google Earth server hosting the imagery.\n * @property {Number} [maximumLevel] The maximum level-of-detail supported by the Google Earth\n *        Enterprise server, or undefined if there is no limit.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded. To ensure that no tiles are discarded, construct and pass\n *        a {@link NeverTileDiscardPolicy} for this parameter.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n */\n\n/**\n * Provides tiled imagery using the Google Earth Imagery API.\n *\n * Notes: This imagery provider does not work with the public Google Earth servers. It works with the\n *        Google Earth Enterprise Server.\n *\n *        By default the Google Earth Enterprise server does not set the\n *        {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing} headers. You can either\n *        use a proxy server which adds these headers, or in the /opt/google/gehttpd/conf/gehttpd.conf\n *        and add the 'Header set Access-Control-Allow-Origin \"*\"' option to the '&lt;Directory /&gt;' and\n *        '&lt;Directory \"/opt/google/gehttpd/htdocs\"&gt;' directives.\n *\n *        This provider is for use with 2D Maps API as part of Google Earth Enterprise. For 3D Earth API uses, it\n *        is necessary to use {@link GoogleEarthEnterpriseImageryProvider}\n *\n * @alias GoogleEarthEnterpriseMapsProvider\n * @constructor\n *\n * @param {GoogleEarthEnterpriseMapsProvider.ConstructorOptions} options Object describing initialization options\n *\n * @exception {RuntimeError} Could not find layer with channel (id) of <code>options.channel</code>.\n * @exception {RuntimeError} Could not find a version in channel (id) <code>options.channel</code>.\n * @exception {RuntimeError} Unsupported projection <code>data.projection</code>.\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * var google = new Cesium.GoogleEarthEnterpriseMapsProvider({\n *     url : 'https://earth.localdomain',\n *     channel : 1008\n * });\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction GoogleEarthEnterpriseMapsProvider(options) {\n  options = defaultValue(options, {});\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  if (!defined(options.channel)) {\n    throw new DeveloperError(\"options.channel is required.\");\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default 1.9\n   */\n  this.defaultGamma = 1.9;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  var url = options.url;\n  var path = defaultValue(options.path, \"/default_map\");\n\n  var resource = Resource.createIfNeeded(url).getDerivedResource({\n    // We used to just append path to url, so now that we do proper URI resolution, removed the /\n    url: path[0] === \"/\" ? path.substring(1) : path,\n  });\n\n  resource.appendForwardSlash();\n\n  this._resource = resource;\n  this._url = url;\n  this._path = path;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  this._channel = options.channel;\n  this._requestType = \"ImageryMaps\";\n  this._credit = new Credit(\n    '<a href=\"http://www.google.com/enterprise/mapsearth/products/earthenterprise.html\"><img src=\"' +\n      GoogleEarthEnterpriseMapsProvider.logoUrl +\n      '\" title=\"Google Imagery\"/></a>'\n  );\n\n  this._tilingScheme = undefined;\n\n  this._version = undefined;\n\n  this._tileWidth = 256;\n  this._tileHeight = 256;\n  this._maximumLevel = options.maximumLevel;\n\n  this._errorEvent = new Event();\n\n  this._ready = false;\n  this._readyPromise = when.defer();\n\n  var metadataResource = resource.getDerivedResource({\n    url: \"query\",\n    queryParameters: {\n      request: \"Json\",\n      vars: \"geeServerDefs\",\n      is2d: \"t\",\n    },\n  });\n  var that = this;\n  var metadataError;\n\n  function metadataSuccess(text) {\n    var data;\n\n    // The Google Earth server sends malformed JSON data currently...\n    try {\n      // First, try parsing it like normal in case a future version sends correctly formatted JSON\n      data = JSON.parse(text);\n    } catch (e) {\n      // Quote object strings manually, then try parsing again\n      data = JSON.parse(\n        text.replace(/([\\[\\{,])[\\n\\r ]*([A-Za-z0-9]+)[\\n\\r ]*:/g, '$1\"$2\":')\n      );\n    }\n\n    var layer;\n    for (var i = 0; i < data.layers.length; i++) {\n      if (data.layers[i].id === that._channel) {\n        layer = data.layers[i];\n        break;\n      }\n    }\n\n    var message;\n\n    if (!defined(layer)) {\n      message =\n        \"Could not find layer with channel (id) of \" + that._channel + \".\";\n      metadataError = TileProviderError.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestMetadata\n      );\n      throw new RuntimeError(message);\n    }\n\n    if (!defined(layer.version)) {\n      message =\n        \"Could not find a version in channel (id) \" + that._channel + \".\";\n      metadataError = TileProviderError.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestMetadata\n      );\n      throw new RuntimeError(message);\n    }\n    that._version = layer.version;\n\n    if (defined(data.projection) && data.projection === \"flat\") {\n      that._tilingScheme = new GeographicTilingScheme({\n        numberOfLevelZeroTilesX: 2,\n        numberOfLevelZeroTilesY: 2,\n        rectangle: new Rectangle(-Math.PI, -Math.PI, Math.PI, Math.PI),\n        ellipsoid: options.ellipsoid,\n      });\n      // Default to mercator projection when projection is undefined\n    } else if (!defined(data.projection) || data.projection === \"mercator\") {\n      that._tilingScheme = new WebMercatorTilingScheme({\n        numberOfLevelZeroTilesX: 2,\n        numberOfLevelZeroTilesY: 2,\n        ellipsoid: options.ellipsoid,\n      });\n    } else {\n      message = \"Unsupported projection \" + data.projection + \".\";\n      metadataError = TileProviderError.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestMetadata\n      );\n      throw new RuntimeError(message);\n    }\n\n    that._ready = true;\n    that._readyPromise.resolve(true);\n    TileProviderError.handleSuccess(metadataError);\n  }\n\n  function metadataFailure(e) {\n    var message =\n      \"An error occurred while accessing \" + metadataResource.url + \".\";\n    metadataError = TileProviderError.handleError(\n      metadataError,\n      that,\n      that._errorEvent,\n      message,\n      undefined,\n      undefined,\n      undefined,\n      requestMetadata\n    );\n    that._readyPromise.reject(new RuntimeError(message));\n  }\n\n  function requestMetadata() {\n    var metadata = metadataResource.fetchText();\n    when(metadata, metadataSuccess, metadataFailure);\n  }\n\n  requestMetadata();\n}\n\nObject.defineProperties(GoogleEarthEnterpriseMapsProvider.prototype, {\n  /**\n   * Gets the URL of the Google Earth MapServer.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._url;\n    },\n  },\n\n  /**\n   * Gets the url path of the data on the Google Earth server.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  path: {\n    get: function () {\n      return this._path;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the imagery channel (id) currently being used.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  channel: {\n    get: function () {\n      return this._channel;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileWidth must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileHeight must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"maximumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"minimumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tilingScheme must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the version of the data used by this provider.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  version: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"version must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._version;\n    },\n  },\n\n  /**\n   * Gets the type of data that is being requested from the provider.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  requestType: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"requestType must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._requestType;\n    },\n  },\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"rectangle must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileDiscardPolicy must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof GoogleEarthEnterpriseMapsProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nGoogleEarthEnterpriseMapsProvider.prototype.getTileCredits = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link GoogleEarthEnterpriseMapsProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nGoogleEarthEnterpriseMapsProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\n      \"requestImage must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var resource = this._resource.getDerivedResource({\n    url: \"query\",\n    request: request,\n    queryParameters: {\n      request: this._requestType,\n      channel: this._channel,\n      version: this._version,\n      x: x,\n      y: y,\n      z: level + 1, // Google Earth starts with a zoom level of 1, not 0\n    },\n  });\n\n  return ImageryProvider.loadImage(this, resource);\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nGoogleEarthEnterpriseMapsProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return undefined;\n};\n\nGoogleEarthEnterpriseMapsProvider._logoUrl = undefined;\n\nObject.defineProperties(GoogleEarthEnterpriseMapsProvider, {\n  /**\n   * Gets or sets the URL to the Google Earth logo for display in the credit.\n   * @memberof GoogleEarthEnterpriseMapsProvider\n   * @type {String}\n   */\n  logoUrl: {\n    get: function () {\n      if (!defined(GoogleEarthEnterpriseMapsProvider._logoUrl)) {\n        GoogleEarthEnterpriseMapsProvider._logoUrl = buildModuleUrl(\n          \"Assets/Images/google_earth_credit.png\"\n        );\n      }\n      return GoogleEarthEnterpriseMapsProvider._logoUrl;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"value\", value);\n      //>>includeEnd('debug');\n\n      GoogleEarthEnterpriseMapsProvider._logoUrl = value;\n    },\n  },\n});\nexport default GoogleEarthEnterpriseMapsProvider;\n"]},"metadata":{},"sourceType":"module"}