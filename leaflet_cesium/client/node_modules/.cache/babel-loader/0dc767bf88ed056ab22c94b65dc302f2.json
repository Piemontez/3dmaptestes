{"ast":null,"code":"import Credit from \"../Core/Credit.js\";\nimport decodeGoogleEarthEnterpriseData from \"../Core/decodeGoogleEarthEnterpriseData.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport GoogleEarthEnterpriseMetadata from \"../Core/GoogleEarthEnterpriseMetadata.js\";\nimport loadImageFromTypedArray from \"../Core/loadImageFromTypedArray.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Request from \"../Core/Request.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport protobuf from \"../ThirdParty/protobuf-minimal.js\";\nimport when from \"../ThirdParty/when.js\";\n/**\n * @private\n */\n\nfunction GoogleEarthEnterpriseDiscardPolicy() {\n  this._image = new Image();\n}\n/**\n * Determines if the discard policy is ready to process images.\n * @returns {Boolean} True if the discard policy is ready to process images; otherwise, false.\n */\n\n\nGoogleEarthEnterpriseDiscardPolicy.prototype.isReady = function () {\n  return true;\n};\n/**\n * Given a tile image, decide whether to discard that image.\n *\n * @param {HTMLImageElement} image An image to test.\n * @returns {Boolean} True if the image should be discarded; otherwise, false.\n */\n\n\nGoogleEarthEnterpriseDiscardPolicy.prototype.shouldDiscardImage = function (image) {\n  return image === this._image;\n};\n/**\n * @typedef {Object} GoogleEarthEnterpriseImageryProvider.ConstructorOptions\n *\n * Initialization options for the GoogleEarthEnterpriseImageryProvider constructor\n *\n * @property {Resource|String} url The url of the Google Earth Enterprise server hosting the imagery.\n * @property {GoogleEarthEnterpriseMetadata} metadata A metadata object that can be used to share metadata requests with a GoogleEarthEnterpriseTerrainProvider.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded. If this value is not specified, a default\n *        is to discard tiles that fail to download.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * Provides tiled imagery using the Google Earth Enterprise REST API.\n *\n * Notes: This provider is for use with the 3D Earth API of Google Earth Enterprise,\n *        {@link GoogleEarthEnterpriseMapsProvider} should be used with 2D Maps API.\n *\n * @alias GoogleEarthEnterpriseImageryProvider\n * @constructor\n *\n * @param {GoogleEarthEnterpriseImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @see GoogleEarthEnterpriseTerrainProvider\n * @see ArcGisMapServerImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * var geeMetadata = new GoogleEarthEnterpriseMetadata('http://www.earthenterprise.org/3d');\n * var gee = new Cesium.GoogleEarthEnterpriseImageryProvider({\n *     metadata : geeMetadata\n * });\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\n\n\nfunction GoogleEarthEnterpriseImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT); //>>includeStart('debug', pragmas.debug);\n\n  if (!(defined(options.url) || defined(options.metadata))) {\n    throw new DeveloperError(\"options.url or options.metadata is required.\");\n  } //>>includeEnd('debug');\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n\n  this.defaultAlpha = undefined;\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultNightAlpha = undefined;\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultDayAlpha = undefined;\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultBrightness = undefined;\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultContrast = undefined;\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultHue = undefined;\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultSaturation = undefined;\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultGamma = undefined;\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n\n  this.defaultMinificationFilter = undefined;\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n\n  this.defaultMagnificationFilter = undefined;\n  var metadata;\n\n  if (defined(options.metadata)) {\n    metadata = options.metadata;\n  } else {\n    var resource = Resource.createIfNeeded(options.url);\n    metadata = new GoogleEarthEnterpriseMetadata(resource);\n  }\n\n  this._metadata = metadata;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n  this._tilingScheme = new GeographicTilingScheme({\n    numberOfLevelZeroTilesX: 2,\n    numberOfLevelZeroTilesY: 2,\n    rectangle: new Rectangle(-CesiumMath.PI, -CesiumMath.PI, CesiumMath.PI, CesiumMath.PI),\n    ellipsoid: options.ellipsoid\n  });\n  var credit = options.credit;\n\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n\n  this._credit = credit;\n  this._tileWidth = 256;\n  this._tileHeight = 256;\n  this._maximumLevel = 23; // Install the default tile discard policy if none has been supplied.\n\n  if (!defined(this._tileDiscardPolicy)) {\n    this._tileDiscardPolicy = new GoogleEarthEnterpriseDiscardPolicy();\n  }\n\n  this._errorEvent = new Event();\n  this._ready = false;\n  var that = this;\n  var metadataError;\n  this._readyPromise = metadata.readyPromise.then(function (result) {\n    if (!metadata.imageryPresent) {\n      var e = new RuntimeError(\"The server \" + metadata.url + \" doesn't have imagery\");\n      metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, e.message, undefined, undefined, undefined, e);\n      return when.reject(e);\n    }\n\n    TileProviderError.handleSuccess(metadataError);\n    that._ready = result;\n    return result;\n  }).otherwise(function (e) {\n    metadataError = TileProviderError.handleError(metadataError, that, that._errorEvent, e.message, undefined, undefined, undefined, e);\n    return when.reject(e);\n  });\n}\n\nObject.defineProperties(GoogleEarthEnterpriseImageryProvider.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server url hosting the imagery.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._metadata.url;\n    }\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._metadata.proxy;\n    }\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileWidth must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileWidth;\n    }\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileHeight must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileHeight;\n    }\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"maximumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._maximumLevel;\n    }\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"minimumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return 0;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tilingScheme must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"rectangle must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tilingScheme.rectangle;\n    }\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\"tileDiscardPolicy must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileDiscardPolicy;\n    }\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return false;\n    }\n  }\n});\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\nGoogleEarthEnterpriseImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\"getTileCredits must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  var metadata = this._metadata;\n  var info = metadata.getTileInformation(x, y, level);\n\n  if (defined(info)) {\n    var credit = metadata.providers[info.imageryProvider];\n\n    if (defined(credit)) {\n      return [credit];\n    }\n  }\n\n  return undefined;\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\n\n\nGoogleEarthEnterpriseImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\"requestImage must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  var invalidImage = this._tileDiscardPolicy._image; // Empty image or undefined depending on discard policy\n\n  var metadata = this._metadata;\n  var quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  var info = metadata.getTileInformation(x, y, level);\n\n  if (!defined(info)) {\n    if (metadata.isValid(quadKey)) {\n      var metadataRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction\n      });\n      metadata.populateSubtree(x, y, level, metadataRequest);\n      return undefined; // No metadata so return undefined so we can be loaded later\n    }\n\n    return invalidImage; // Image doesn't exist\n  }\n\n  if (!info.hasImagery()) {\n    // Already have info and there isn't any imagery here\n    return invalidImage;\n  }\n\n  var promise = buildImageResource(this, info, x, y, level, request).fetchArrayBuffer();\n\n  if (!defined(promise)) {\n    return undefined; // Throttled\n  }\n\n  return promise.then(function (image) {\n    decodeGoogleEarthEnterpriseData(metadata.key, image);\n    var a = new Uint8Array(image);\n    var type;\n    var protoImagery = metadata.protoImagery;\n\n    if (!defined(protoImagery) || !protoImagery) {\n      type = getImageType(a);\n    }\n\n    if (!defined(type) && (!defined(protoImagery) || protoImagery)) {\n      var message = decodeEarthImageryPacket(a);\n      type = message.imageType;\n      a = message.imageData;\n    }\n\n    if (!defined(type) || !defined(a)) {\n      return invalidImage;\n    }\n\n    return loadImageFromTypedArray({\n      uint8Array: a,\n      format: type,\n      flipY: true\n    });\n  });\n};\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\n\n\nGoogleEarthEnterpriseImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return undefined;\n}; //\n// Functions to handle imagery packets\n//\n\n\nfunction buildImageResource(imageryProvider, info, x, y, level, request) {\n  var quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  var version = info.imageryVersion;\n  version = defined(version) && version > 0 ? version : 1;\n  return imageryProvider._metadata.resource.getDerivedResource({\n    url: \"flatfile?f1-0\" + quadKey + \"-i.\" + version.toString(),\n    request: request\n  });\n} // Detects if a Uint8Array is a JPEG or PNG\n\n\nfunction getImageType(image) {\n  var jpeg = \"JFIF\";\n\n  if (image[6] === jpeg.charCodeAt(0) && image[7] === jpeg.charCodeAt(1) && image[8] === jpeg.charCodeAt(2) && image[9] === jpeg.charCodeAt(3)) {\n    return \"image/jpeg\";\n  }\n\n  var png = \"PNG\";\n\n  if (image[1] === png.charCodeAt(0) && image[2] === png.charCodeAt(1) && image[3] === png.charCodeAt(2)) {\n    return \"image/png\";\n  }\n\n  return undefined;\n} // Decodes an Imagery protobuf into the message\n// Partially generated with the help of protobuf.js static generator\n\n\nfunction decodeEarthImageryPacket(data) {\n  var reader = protobuf.Reader.create(data);\n  var end = reader.len;\n  var message = {};\n\n  while (reader.pos < end) {\n    var tag = reader.uint32();\n\n    switch (tag >>> 3) {\n      case 1:\n        message.imageType = reader.uint32();\n        break;\n\n      case 2:\n        message.imageData = reader.bytes();\n        break;\n\n      case 3:\n        message.alphaType = reader.uint32();\n        break;\n\n      case 4:\n        message.imageAlpha = reader.bytes();\n        break;\n\n      case 5:\n        var copyrightIds = message.copyrightIds;\n\n        if (!defined(copyrightIds)) {\n          copyrightIds = message.copyrightIds = [];\n        }\n\n        if ((tag & 7) === 2) {\n          var end2 = reader.uint32() + reader.pos;\n\n          while (reader.pos < end2) {\n            copyrightIds.push(reader.uint32());\n          }\n        } else {\n          copyrightIds.push(reader.uint32());\n        }\n\n        break;\n\n      default:\n        reader.skipType(tag & 7);\n        break;\n    }\n  }\n\n  var imageType = message.imageType;\n\n  if (defined(imageType)) {\n    switch (imageType) {\n      case 0:\n        message.imageType = \"image/jpeg\";\n        break;\n\n      case 4:\n        message.imageType = \"image/png\";\n        break;\n\n      default:\n        throw new RuntimeError(\"GoogleEarthEnterpriseImageryProvider: Unsupported image type.\");\n    }\n  }\n\n  var alphaType = message.alphaType;\n\n  if (defined(alphaType) && alphaType !== 0) {\n    console.log(\"GoogleEarthEnterpriseImageryProvider: External alpha not supported.\");\n    delete message.alphaType;\n    delete message.imageAlpha;\n  }\n\n  return message;\n}\n\nexport default GoogleEarthEnterpriseImageryProvider;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Scene/GoogleEarthEnterpriseImageryProvider.js"],"names":["Credit","decodeGoogleEarthEnterpriseData","defaultValue","defined","DeveloperError","Event","GeographicTilingScheme","GoogleEarthEnterpriseMetadata","loadImageFromTypedArray","CesiumMath","Rectangle","Request","Resource","RuntimeError","TileProviderError","protobuf","when","GoogleEarthEnterpriseDiscardPolicy","_image","Image","prototype","isReady","shouldDiscardImage","image","GoogleEarthEnterpriseImageryProvider","options","EMPTY_OBJECT","url","metadata","defaultAlpha","undefined","defaultNightAlpha","defaultDayAlpha","defaultBrightness","defaultContrast","defaultHue","defaultSaturation","defaultGamma","defaultMinificationFilter","defaultMagnificationFilter","resource","createIfNeeded","_metadata","_tileDiscardPolicy","tileDiscardPolicy","_tilingScheme","numberOfLevelZeroTilesX","numberOfLevelZeroTilesY","rectangle","PI","ellipsoid","credit","_credit","_tileWidth","_tileHeight","_maximumLevel","_errorEvent","_ready","that","metadataError","_readyPromise","readyPromise","then","result","imageryPresent","e","handleError","message","reject","handleSuccess","otherwise","Object","defineProperties","get","proxy","tileWidth","tileHeight","maximumLevel","minimumLevel","tilingScheme","errorEvent","ready","hasAlphaChannel","getTileCredits","x","y","level","info","getTileInformation","providers","imageryProvider","requestImage","request","invalidImage","quadKey","tileXYToQuadKey","isValid","metadataRequest","throttle","throttleByServer","type","priorityFunction","populateSubtree","hasImagery","promise","buildImageResource","fetchArrayBuffer","key","a","Uint8Array","protoImagery","getImageType","decodeEarthImageryPacket","imageType","imageData","uint8Array","format","flipY","pickFeatures","longitude","latitude","version","imageryVersion","getDerivedResource","toString","jpeg","charCodeAt","png","data","reader","Reader","create","end","len","pos","tag","uint32","bytes","alphaType","imageAlpha","copyrightIds","end2","push","skipType","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,+BAAP,MAA4C,4CAA5C;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,sBAAP,MAAmC,mCAAnC;AACA,OAAOC,6BAAP,MAA0C,0CAA1C;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AAEA;AACA;AACA;;AACA,SAASC,kCAAT,GAA8C;AAC5C,OAAKC,MAAL,GAAc,IAAIC,KAAJ,EAAd;AACD;AAED;AACA;AACA;AACA;;;AACAF,kCAAkC,CAACG,SAAnC,CAA6CC,OAA7C,GAAuD,YAAY;AACjE,SAAO,IAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,kCAAkC,CAACG,SAAnC,CAA6CE,kBAA7C,GAAkE,UAChEC,KADgE,EAEhE;AACA,SAAOA,KAAK,KAAK,KAAKL,MAAtB;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,oCAAT,CAA8CC,OAA9C,EAAuD;AACrDA,EAAAA,OAAO,GAAGvB,YAAY,CAACuB,OAAD,EAAUvB,YAAY,CAACwB,YAAvB,CAAtB,CADqD,CAGrD;;AACA,MAAI,EAAEvB,OAAO,CAACsB,OAAO,CAACE,GAAT,CAAP,IAAwBxB,OAAO,CAACsB,OAAO,CAACG,QAAT,CAAjC,CAAJ,EAA0D;AACxD,UAAM,IAAIxB,cAAJ,CAAmB,8CAAnB,CAAN;AACD,GANoD,CAOrD;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,OAAKyB,YAAL,GAAoBC,SAApB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,iBAAL,GAAyBD,SAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKE,eAAL,GAAuBF,SAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKG,iBAAL,GAAyBH,SAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKI,eAAL,GAAuBJ,SAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKK,UAAL,GAAkBL,SAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKM,iBAAL,GAAyBN,SAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKO,YAAL,GAAoBP,SAApB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKQ,yBAAL,GAAiCR,SAAjC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKS,0BAAL,GAAkCT,SAAlC;AAEA,MAAIF,QAAJ;;AACA,MAAIzB,OAAO,CAACsB,OAAO,CAACG,QAAT,CAAX,EAA+B;AAC7BA,IAAAA,QAAQ,GAAGH,OAAO,CAACG,QAAnB;AACD,GAFD,MAEO;AACL,QAAIY,QAAQ,GAAG5B,QAAQ,CAAC6B,cAAT,CAAwBhB,OAAO,CAACE,GAAhC,CAAf;AACAC,IAAAA,QAAQ,GAAG,IAAIrB,6BAAJ,CAAkCiC,QAAlC,CAAX;AACD;;AACD,OAAKE,SAAL,GAAiBd,QAAjB;AACA,OAAKe,kBAAL,GAA0BlB,OAAO,CAACmB,iBAAlC;AAEA,OAAKC,aAAL,GAAqB,IAAIvC,sBAAJ,CAA2B;AAC9CwC,IAAAA,uBAAuB,EAAE,CADqB;AAE9CC,IAAAA,uBAAuB,EAAE,CAFqB;AAG9CC,IAAAA,SAAS,EAAE,IAAItC,SAAJ,CACT,CAACD,UAAU,CAACwC,EADH,EAET,CAACxC,UAAU,CAACwC,EAFH,EAGTxC,UAAU,CAACwC,EAHF,EAITxC,UAAU,CAACwC,EAJF,CAHmC;AAS9CC,IAAAA,SAAS,EAAEzB,OAAO,CAACyB;AAT2B,GAA3B,CAArB;AAYA,MAAIC,MAAM,GAAG1B,OAAO,CAAC0B,MAArB;;AACA,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,IAAAA,MAAM,GAAG,IAAInD,MAAJ,CAAWmD,MAAX,CAAT;AACD;;AACD,OAAKC,OAAL,GAAeD,MAAf;AAEA,OAAKE,UAAL,GAAkB,GAAlB;AACA,OAAKC,WAAL,GAAmB,GAAnB;AACA,OAAKC,aAAL,GAAqB,EAArB,CA7HqD,CA+HrD;;AACA,MAAI,CAACpD,OAAO,CAAC,KAAKwC,kBAAN,CAAZ,EAAuC;AACrC,SAAKA,kBAAL,GAA0B,IAAI1B,kCAAJ,EAA1B;AACD;;AAED,OAAKuC,WAAL,GAAmB,IAAInD,KAAJ,EAAnB;AAEA,OAAKoD,MAAL,GAAc,KAAd;AACA,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,aAAJ;AACA,OAAKC,aAAL,GAAqBhC,QAAQ,CAACiC,YAAT,CAClBC,IADkB,CACb,UAAUC,MAAV,EAAkB;AACtB,QAAI,CAACnC,QAAQ,CAACoC,cAAd,EAA8B;AAC5B,UAAIC,CAAC,GAAG,IAAIpD,YAAJ,CACN,gBAAgBe,QAAQ,CAACD,GAAzB,GAA+B,uBADzB,CAAR;AAGAgC,MAAAA,aAAa,GAAG7C,iBAAiB,CAACoD,WAAlB,CACdP,aADc,EAEdD,IAFc,EAGdA,IAAI,CAACF,WAHS,EAIdS,CAAC,CAACE,OAJY,EAKdrC,SALc,EAMdA,SANc,EAOdA,SAPc,EAQdmC,CARc,CAAhB;AAUA,aAAOjD,IAAI,CAACoD,MAAL,CAAYH,CAAZ,CAAP;AACD;;AAEDnD,IAAAA,iBAAiB,CAACuD,aAAlB,CAAgCV,aAAhC;AACAD,IAAAA,IAAI,CAACD,MAAL,GAAcM,MAAd;AACA,WAAOA,MAAP;AACD,GAtBkB,EAuBlBO,SAvBkB,CAuBR,UAAUL,CAAV,EAAa;AACtBN,IAAAA,aAAa,GAAG7C,iBAAiB,CAACoD,WAAlB,CACdP,aADc,EAEdD,IAFc,EAGdA,IAAI,CAACF,WAHS,EAIdS,CAAC,CAACE,OAJY,EAKdrC,SALc,EAMdA,SANc,EAOdA,SAPc,EAQdmC,CARc,CAAhB;AAUA,WAAOjD,IAAI,CAACoD,MAAL,CAAYH,CAAZ,CAAP;AACD,GAnCkB,CAArB;AAoCD;;AAEDM,MAAM,CAACC,gBAAP,CAAwBhD,oCAAoC,CAACJ,SAA7D,EAAwE;AACtE;AACF;AACA;AACA;AACA;AACA;AACEO,EAAAA,GAAG,EAAE;AACH8C,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAK/B,SAAL,CAAef,GAAtB;AACD;AAHE,GAPiE;;AAatE;AACF;AACA;AACA;AACA;AACA;AACE+C,EAAAA,KAAK,EAAE;AACLD,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAK/B,SAAL,CAAegC,KAAtB;AACD;AAHI,GAnB+D;;AAyBtE;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAE;AACTF,IAAAA,GAAG,EAAE,YAAY;AACf;AACA,UAAI,CAAC,KAAKhB,MAAV,EAAkB;AAChB,cAAM,IAAIrD,cAAJ,CACJ,oEADI,CAAN;AAGD,OANc,CAOf;;;AAEA,aAAO,KAAKiD,UAAZ;AACD;AAXQ,GAhC2D;;AA8CtE;AACF;AACA;AACA;AACA;AACA;AACA;AACEuB,EAAAA,UAAU,EAAE;AACVH,IAAAA,GAAG,EAAE,YAAY;AACf;AACA,UAAI,CAAC,KAAKhB,MAAV,EAAkB;AAChB,cAAM,IAAIrD,cAAJ,CACJ,qEADI,CAAN;AAGD,OANc,CAOf;;;AAEA,aAAO,KAAKkD,WAAZ;AACD;AAXS,GArD0D;;AAmEtE;AACF;AACA;AACA;AACA;AACA;AACA;AACEuB,EAAAA,YAAY,EAAE;AACZJ,IAAAA,GAAG,EAAE,YAAY;AACf;AACA,UAAI,CAAC,KAAKhB,MAAV,EAAkB;AAChB,cAAM,IAAIrD,cAAJ,CACJ,uEADI,CAAN;AAGD,OANc,CAOf;;;AAEA,aAAO,KAAKmD,aAAZ;AACD;AAXW,GA1EwD;;AAwFtE;AACF;AACA;AACA;AACA;AACA;AACA;AACEuB,EAAAA,YAAY,EAAE;AACZL,IAAAA,GAAG,EAAE,YAAY;AACf;AACA,UAAI,CAAC,KAAKhB,MAAV,EAAkB;AAChB,cAAM,IAAIrD,cAAJ,CACJ,uEADI,CAAN;AAGD,OANc,CAOf;;;AAEA,aAAO,CAAP;AACD;AAXW,GA/FwD;;AA6GtE;AACF;AACA;AACA;AACA;AACA;AACA;AACE2E,EAAAA,YAAY,EAAE;AACZN,IAAAA,GAAG,EAAE,YAAY;AACf;AACA,UAAI,CAAC,KAAKhB,MAAV,EAAkB;AAChB,cAAM,IAAIrD,cAAJ,CACJ,uEADI,CAAN;AAGD,OANc,CAOf;;;AAEA,aAAO,KAAKyC,aAAZ;AACD;AAXW,GApHwD;;AAkItE;AACF;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,SAAS,EAAE;AACTyB,IAAAA,GAAG,EAAE,YAAY;AACf;AACA,UAAI,CAAC,KAAKhB,MAAV,EAAkB;AAChB,cAAM,IAAIrD,cAAJ,CACJ,oEADI,CAAN;AAGD,OANc,CAOf;;;AAEA,aAAO,KAAKyC,aAAL,CAAmBG,SAA1B;AACD;AAXQ,GAzI2D;;AAuJtE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEJ,EAAAA,iBAAiB,EAAE;AACjB6B,IAAAA,GAAG,EAAE,YAAY;AACf;AACA,UAAI,CAAC,KAAKhB,MAAV,EAAkB;AAChB,cAAM,IAAIrD,cAAJ,CACJ,4EADI,CAAN;AAGD,OANc,CAOf;;;AAEA,aAAO,KAAKuC,kBAAZ;AACD;AAXgB,GAhKmD;;AA8KtE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEqC,EAAAA,UAAU,EAAE;AACVP,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKjB,WAAZ;AACD;AAHS,GAtL0D;;AA4LtE;AACF;AACA;AACA;AACA;AACA;AACEyB,EAAAA,KAAK,EAAE;AACLR,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKhB,MAAZ;AACD;AAHI,GAlM+D;;AAwMtE;AACF;AACA;AACA;AACA;AACA;AACEI,EAAAA,YAAY,EAAE;AACZY,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKb,aAAZ;AACD;AAHW,GA9MwD;;AAoNtE;AACF;AACA;AACA;AACA;AACA;AACA;AACET,EAAAA,MAAM,EAAE;AACNsB,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKrB,OAAZ;AACD;AAHK,GA3N8D;;AAiOtE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE8B,EAAAA,eAAe,EAAE;AACfT,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAP;AACD;AAHc;AA3OqD,CAAxE;AAkPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAjD,oCAAoC,CAACJ,SAArC,CAA+C+D,cAA/C,GAAgE,UAC9DC,CAD8D,EAE9DC,CAF8D,EAG9DC,KAH8D,EAI9D;AACA;AACA,MAAI,CAAC,KAAK7B,MAAV,EAAkB;AAChB,UAAM,IAAIrD,cAAJ,CACJ,yEADI,CAAN;AAGD,GAND,CAOA;;;AAEA,MAAIwB,QAAQ,GAAG,KAAKc,SAApB;AACA,MAAI6C,IAAI,GAAG3D,QAAQ,CAAC4D,kBAAT,CAA4BJ,CAA5B,EAA+BC,CAA/B,EAAkCC,KAAlC,CAAX;;AACA,MAAInF,OAAO,CAACoF,IAAD,CAAX,EAAmB;AACjB,QAAIpC,MAAM,GAAGvB,QAAQ,CAAC6D,SAAT,CAAmBF,IAAI,CAACG,eAAxB,CAAb;;AACA,QAAIvF,OAAO,CAACgD,MAAD,CAAX,EAAqB;AACnB,aAAO,CAACA,MAAD,CAAP;AACD;AACF;;AAED,SAAOrB,SAAP;AACD,CAvBD;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,oCAAoC,CAACJ,SAArC,CAA+CuE,YAA/C,GAA8D,UAC5DP,CAD4D,EAE5DC,CAF4D,EAG5DC,KAH4D,EAI5DM,OAJ4D,EAK5D;AACA;AACA,MAAI,CAAC,KAAKnC,MAAV,EAAkB;AAChB,UAAM,IAAIrD,cAAJ,CACJ,uEADI,CAAN;AAGD,GAND,CAOA;;;AAEA,MAAIyF,YAAY,GAAG,KAAKlD,kBAAL,CAAwBzB,MAA3C,CATA,CASmD;;AACnD,MAAIU,QAAQ,GAAG,KAAKc,SAApB;AACA,MAAIoD,OAAO,GAAGvF,6BAA6B,CAACwF,eAA9B,CAA8CX,CAA9C,EAAiDC,CAAjD,EAAoDC,KAApD,CAAd;AACA,MAAIC,IAAI,GAAG3D,QAAQ,CAAC4D,kBAAT,CAA4BJ,CAA5B,EAA+BC,CAA/B,EAAkCC,KAAlC,CAAX;;AACA,MAAI,CAACnF,OAAO,CAACoF,IAAD,CAAZ,EAAoB;AAClB,QAAI3D,QAAQ,CAACoE,OAAT,CAAiBF,OAAjB,CAAJ,EAA+B;AAC7B,UAAIG,eAAe,GAAG,IAAItF,OAAJ,CAAY;AAChCuF,QAAAA,QAAQ,EAAEN,OAAO,CAACM,QADc;AAEhCC,QAAAA,gBAAgB,EAAEP,OAAO,CAACO,gBAFM;AAGhCC,QAAAA,IAAI,EAAER,OAAO,CAACQ,IAHkB;AAIhCC,QAAAA,gBAAgB,EAAET,OAAO,CAACS;AAJM,OAAZ,CAAtB;AAMAzE,MAAAA,QAAQ,CAAC0E,eAAT,CAAyBlB,CAAzB,EAA4BC,CAA5B,EAA+BC,KAA/B,EAAsCW,eAAtC;AACA,aAAOnE,SAAP,CAR6B,CAQX;AACnB;;AACD,WAAO+D,YAAP,CAXkB,CAWG;AACtB;;AAED,MAAI,CAACN,IAAI,CAACgB,UAAL,EAAL,EAAwB;AACtB;AACA,WAAOV,YAAP;AACD;;AACD,MAAIW,OAAO,GAAGC,kBAAkB,CAC9B,IAD8B,EAE9BlB,IAF8B,EAG9BH,CAH8B,EAI9BC,CAJ8B,EAK9BC,KAL8B,EAM9BM,OAN8B,CAAlB,CAOZc,gBAPY,EAAd;;AAQA,MAAI,CAACvG,OAAO,CAACqG,OAAD,CAAZ,EAAuB;AACrB,WAAO1E,SAAP,CADqB,CACH;AACnB;;AAED,SAAO0E,OAAO,CAAC1C,IAAR,CAAa,UAAUvC,KAAV,EAAiB;AACnCtB,IAAAA,+BAA+B,CAAC2B,QAAQ,CAAC+E,GAAV,EAAepF,KAAf,CAA/B;AACA,QAAIqF,CAAC,GAAG,IAAIC,UAAJ,CAAetF,KAAf,CAAR;AACA,QAAI6E,IAAJ;AAEA,QAAIU,YAAY,GAAGlF,QAAQ,CAACkF,YAA5B;;AACA,QAAI,CAAC3G,OAAO,CAAC2G,YAAD,CAAR,IAA0B,CAACA,YAA/B,EAA6C;AAC3CV,MAAAA,IAAI,GAAGW,YAAY,CAACH,CAAD,CAAnB;AACD;;AAED,QAAI,CAACzG,OAAO,CAACiG,IAAD,CAAR,KAAmB,CAACjG,OAAO,CAAC2G,YAAD,CAAR,IAA0BA,YAA7C,CAAJ,EAAgE;AAC9D,UAAI3C,OAAO,GAAG6C,wBAAwB,CAACJ,CAAD,CAAtC;AACAR,MAAAA,IAAI,GAAGjC,OAAO,CAAC8C,SAAf;AACAL,MAAAA,CAAC,GAAGzC,OAAO,CAAC+C,SAAZ;AACD;;AAED,QAAI,CAAC/G,OAAO,CAACiG,IAAD,CAAR,IAAkB,CAACjG,OAAO,CAACyG,CAAD,CAA9B,EAAmC;AACjC,aAAOf,YAAP;AACD;;AAED,WAAOrF,uBAAuB,CAAC;AAC7B2G,MAAAA,UAAU,EAAEP,CADiB;AAE7BQ,MAAAA,MAAM,EAAEhB,IAFqB;AAG7BiB,MAAAA,KAAK,EAAE;AAHsB,KAAD,CAA9B;AAKD,GAzBM,CAAP;AA0BD,CA1ED;AA4EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7F,oCAAoC,CAACJ,SAArC,CAA+CkG,YAA/C,GAA8D,UAC5DlC,CAD4D,EAE5DC,CAF4D,EAG5DC,KAH4D,EAI5DiC,SAJ4D,EAK5DC,QAL4D,EAM5D;AACA,SAAO1F,SAAP;AACD,CARD,C,CAUA;AACA;AACA;;;AACA,SAAS2E,kBAAT,CAA4Bf,eAA5B,EAA6CH,IAA7C,EAAmDH,CAAnD,EAAsDC,CAAtD,EAAyDC,KAAzD,EAAgEM,OAAhE,EAAyE;AACvE,MAAIE,OAAO,GAAGvF,6BAA6B,CAACwF,eAA9B,CAA8CX,CAA9C,EAAiDC,CAAjD,EAAoDC,KAApD,CAAd;AACA,MAAImC,OAAO,GAAGlC,IAAI,CAACmC,cAAnB;AACAD,EAAAA,OAAO,GAAGtH,OAAO,CAACsH,OAAD,CAAP,IAAoBA,OAAO,GAAG,CAA9B,GAAkCA,OAAlC,GAA4C,CAAtD;AAEA,SAAO/B,eAAe,CAAChD,SAAhB,CAA0BF,QAA1B,CAAmCmF,kBAAnC,CAAsD;AAC3DhG,IAAAA,GAAG,EAAE,kBAAkBmE,OAAlB,GAA4B,KAA5B,GAAoC2B,OAAO,CAACG,QAAR,EADkB;AAE3DhC,IAAAA,OAAO,EAAEA;AAFkD,GAAtD,CAAP;AAID,C,CAED;;;AACA,SAASmB,YAAT,CAAsBxF,KAAtB,EAA6B;AAC3B,MAAIsG,IAAI,GAAG,MAAX;;AACA,MACEtG,KAAK,CAAC,CAAD,CAAL,KAAasG,IAAI,CAACC,UAAL,CAAgB,CAAhB,CAAb,IACAvG,KAAK,CAAC,CAAD,CAAL,KAAasG,IAAI,CAACC,UAAL,CAAgB,CAAhB,CADb,IAEAvG,KAAK,CAAC,CAAD,CAAL,KAAasG,IAAI,CAACC,UAAL,CAAgB,CAAhB,CAFb,IAGAvG,KAAK,CAAC,CAAD,CAAL,KAAasG,IAAI,CAACC,UAAL,CAAgB,CAAhB,CAJf,EAKE;AACA,WAAO,YAAP;AACD;;AAED,MAAIC,GAAG,GAAG,KAAV;;AACA,MACExG,KAAK,CAAC,CAAD,CAAL,KAAawG,GAAG,CAACD,UAAJ,CAAe,CAAf,CAAb,IACAvG,KAAK,CAAC,CAAD,CAAL,KAAawG,GAAG,CAACD,UAAJ,CAAe,CAAf,CADb,IAEAvG,KAAK,CAAC,CAAD,CAAL,KAAawG,GAAG,CAACD,UAAJ,CAAe,CAAf,CAHf,EAIE;AACA,WAAO,WAAP;AACD;;AAED,SAAOhG,SAAP;AACD,C,CAED;AACA;;;AACA,SAASkF,wBAAT,CAAkCgB,IAAlC,EAAwC;AACtC,MAAIC,MAAM,GAAGlH,QAAQ,CAACmH,MAAT,CAAgBC,MAAhB,CAAuBH,IAAvB,CAAb;AACA,MAAII,GAAG,GAAGH,MAAM,CAACI,GAAjB;AACA,MAAIlE,OAAO,GAAG,EAAd;;AACA,SAAO8D,MAAM,CAACK,GAAP,GAAaF,GAApB,EAAyB;AACvB,QAAIG,GAAG,GAAGN,MAAM,CAACO,MAAP,EAAV;;AACA,YAAQD,GAAG,KAAK,CAAhB;AACE,WAAK,CAAL;AACEpE,QAAAA,OAAO,CAAC8C,SAAR,GAAoBgB,MAAM,CAACO,MAAP,EAApB;AACA;;AACF,WAAK,CAAL;AACErE,QAAAA,OAAO,CAAC+C,SAAR,GAAoBe,MAAM,CAACQ,KAAP,EAApB;AACA;;AACF,WAAK,CAAL;AACEtE,QAAAA,OAAO,CAACuE,SAAR,GAAoBT,MAAM,CAACO,MAAP,EAApB;AACA;;AACF,WAAK,CAAL;AACErE,QAAAA,OAAO,CAACwE,UAAR,GAAqBV,MAAM,CAACQ,KAAP,EAArB;AACA;;AACF,WAAK,CAAL;AACE,YAAIG,YAAY,GAAGzE,OAAO,CAACyE,YAA3B;;AACA,YAAI,CAACzI,OAAO,CAACyI,YAAD,CAAZ,EAA4B;AAC1BA,UAAAA,YAAY,GAAGzE,OAAO,CAACyE,YAAR,GAAuB,EAAtC;AACD;;AACD,YAAI,CAACL,GAAG,GAAG,CAAP,MAAc,CAAlB,EAAqB;AACnB,cAAIM,IAAI,GAAGZ,MAAM,CAACO,MAAP,KAAkBP,MAAM,CAACK,GAApC;;AACA,iBAAOL,MAAM,CAACK,GAAP,GAAaO,IAApB,EAA0B;AACxBD,YAAAA,YAAY,CAACE,IAAb,CAAkBb,MAAM,CAACO,MAAP,EAAlB;AACD;AACF,SALD,MAKO;AACLI,UAAAA,YAAY,CAACE,IAAb,CAAkBb,MAAM,CAACO,MAAP,EAAlB;AACD;;AACD;;AACF;AACEP,QAAAA,MAAM,CAACc,QAAP,CAAgBR,GAAG,GAAG,CAAtB;AACA;AA7BJ;AA+BD;;AAED,MAAItB,SAAS,GAAG9C,OAAO,CAAC8C,SAAxB;;AACA,MAAI9G,OAAO,CAAC8G,SAAD,CAAX,EAAwB;AACtB,YAAQA,SAAR;AACE,WAAK,CAAL;AACE9C,QAAAA,OAAO,CAAC8C,SAAR,GAAoB,YAApB;AACA;;AACF,WAAK,CAAL;AACE9C,QAAAA,OAAO,CAAC8C,SAAR,GAAoB,WAApB;AACA;;AACF;AACE,cAAM,IAAIpG,YAAJ,CACJ,+DADI,CAAN;AARJ;AAYD;;AAED,MAAI6H,SAAS,GAAGvE,OAAO,CAACuE,SAAxB;;AACA,MAAIvI,OAAO,CAACuI,SAAD,CAAP,IAAsBA,SAAS,KAAK,CAAxC,EAA2C;AACzCM,IAAAA,OAAO,CAACC,GAAR,CACE,qEADF;AAGA,WAAO9E,OAAO,CAACuE,SAAf;AACA,WAAOvE,OAAO,CAACwE,UAAf;AACD;;AAED,SAAOxE,OAAP;AACD;;AACD,eAAe3C,oCAAf","sourcesContent":["import Credit from \"../Core/Credit.js\";\nimport decodeGoogleEarthEnterpriseData from \"../Core/decodeGoogleEarthEnterpriseData.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport GoogleEarthEnterpriseMetadata from \"../Core/GoogleEarthEnterpriseMetadata.js\";\nimport loadImageFromTypedArray from \"../Core/loadImageFromTypedArray.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Request from \"../Core/Request.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TileProviderError from \"../Core/TileProviderError.js\";\nimport protobuf from \"../ThirdParty/protobuf-minimal.js\";\nimport when from \"../ThirdParty/when.js\";\n\n/**\n * @private\n */\nfunction GoogleEarthEnterpriseDiscardPolicy() {\n  this._image = new Image();\n}\n\n/**\n * Determines if the discard policy is ready to process images.\n * @returns {Boolean} True if the discard policy is ready to process images; otherwise, false.\n */\nGoogleEarthEnterpriseDiscardPolicy.prototype.isReady = function () {\n  return true;\n};\n\n/**\n * Given a tile image, decide whether to discard that image.\n *\n * @param {HTMLImageElement} image An image to test.\n * @returns {Boolean} True if the image should be discarded; otherwise, false.\n */\nGoogleEarthEnterpriseDiscardPolicy.prototype.shouldDiscardImage = function (\n  image\n) {\n  return image === this._image;\n};\n\n/**\n * @typedef {Object} GoogleEarthEnterpriseImageryProvider.ConstructorOptions\n *\n * Initialization options for the GoogleEarthEnterpriseImageryProvider constructor\n *\n * @property {Resource|String} url The url of the Google Earth Enterprise server hosting the imagery.\n * @property {GoogleEarthEnterpriseMetadata} metadata A metadata object that can be used to share metadata requests with a GoogleEarthEnterpriseTerrainProvider.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @property {TileDiscardPolicy} [tileDiscardPolicy] The policy that determines if a tile\n *        is invalid and should be discarded. If this value is not specified, a default\n *        is to discard tiles that fail to download.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * Provides tiled imagery using the Google Earth Enterprise REST API.\n *\n * Notes: This provider is for use with the 3D Earth API of Google Earth Enterprise,\n *        {@link GoogleEarthEnterpriseMapsProvider} should be used with 2D Maps API.\n *\n * @alias GoogleEarthEnterpriseImageryProvider\n * @constructor\n *\n * @param {GoogleEarthEnterpriseImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @see GoogleEarthEnterpriseTerrainProvider\n * @see ArcGisMapServerImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n *\n * @example\n * var geeMetadata = new GoogleEarthEnterpriseMetadata('http://www.earthenterprise.org/3d');\n * var gee = new Cesium.GoogleEarthEnterpriseImageryProvider({\n *     metadata : geeMetadata\n * });\n *\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n */\nfunction GoogleEarthEnterpriseImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!(defined(options.url) || defined(options.metadata))) {\n    throw new DeveloperError(\"options.url or options.metadata is required.\");\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  var metadata;\n  if (defined(options.metadata)) {\n    metadata = options.metadata;\n  } else {\n    var resource = Resource.createIfNeeded(options.url);\n    metadata = new GoogleEarthEnterpriseMetadata(resource);\n  }\n  this._metadata = metadata;\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n\n  this._tilingScheme = new GeographicTilingScheme({\n    numberOfLevelZeroTilesX: 2,\n    numberOfLevelZeroTilesY: 2,\n    rectangle: new Rectangle(\n      -CesiumMath.PI,\n      -CesiumMath.PI,\n      CesiumMath.PI,\n      CesiumMath.PI\n    ),\n    ellipsoid: options.ellipsoid,\n  });\n\n  var credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n\n  this._tileWidth = 256;\n  this._tileHeight = 256;\n  this._maximumLevel = 23;\n\n  // Install the default tile discard policy if none has been supplied.\n  if (!defined(this._tileDiscardPolicy)) {\n    this._tileDiscardPolicy = new GoogleEarthEnterpriseDiscardPolicy();\n  }\n\n  this._errorEvent = new Event();\n\n  this._ready = false;\n  var that = this;\n  var metadataError;\n  this._readyPromise = metadata.readyPromise\n    .then(function (result) {\n      if (!metadata.imageryPresent) {\n        var e = new RuntimeError(\n          \"The server \" + metadata.url + \" doesn't have imagery\"\n        );\n        metadataError = TileProviderError.handleError(\n          metadataError,\n          that,\n          that._errorEvent,\n          e.message,\n          undefined,\n          undefined,\n          undefined,\n          e\n        );\n        return when.reject(e);\n      }\n\n      TileProviderError.handleSuccess(metadataError);\n      that._ready = result;\n      return result;\n    })\n    .otherwise(function (e) {\n      metadataError = TileProviderError.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        e.message,\n        undefined,\n        undefined,\n        undefined,\n        e\n      );\n      return when.reject(e);\n    });\n}\n\nObject.defineProperties(GoogleEarthEnterpriseImageryProvider.prototype, {\n  /**\n   * Gets the name of the Google Earth Enterprise server url hosting the imagery.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._metadata.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._metadata.proxy;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileWidth must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileHeight must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"maximumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"minimumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return 0;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tilingScheme must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"rectangle must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tilingScheme.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tileDiscardPolicy must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage\n   * and texture upload time.\n   * @memberof GoogleEarthEnterpriseImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return false;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.getTileCredits = function (\n  x,\n  y,\n  level\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\n      \"getTileCredits must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var metadata = this._metadata;\n  var info = metadata.getTileInformation(x, y, level);\n  if (defined(info)) {\n    var credit = metadata.providers[info.imageryProvider];\n    if (defined(credit)) {\n      return [credit];\n    }\n  }\n\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link GoogleEarthEnterpriseImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this._ready) {\n    throw new DeveloperError(\n      \"requestImage must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var invalidImage = this._tileDiscardPolicy._image; // Empty image or undefined depending on discard policy\n  var metadata = this._metadata;\n  var quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  var info = metadata.getTileInformation(x, y, level);\n  if (!defined(info)) {\n    if (metadata.isValid(quadKey)) {\n      var metadataRequest = new Request({\n        throttle: request.throttle,\n        throttleByServer: request.throttleByServer,\n        type: request.type,\n        priorityFunction: request.priorityFunction,\n      });\n      metadata.populateSubtree(x, y, level, metadataRequest);\n      return undefined; // No metadata so return undefined so we can be loaded later\n    }\n    return invalidImage; // Image doesn't exist\n  }\n\n  if (!info.hasImagery()) {\n    // Already have info and there isn't any imagery here\n    return invalidImage;\n  }\n  var promise = buildImageResource(\n    this,\n    info,\n    x,\n    y,\n    level,\n    request\n  ).fetchArrayBuffer();\n  if (!defined(promise)) {\n    return undefined; // Throttled\n  }\n\n  return promise.then(function (image) {\n    decodeGoogleEarthEnterpriseData(metadata.key, image);\n    var a = new Uint8Array(image);\n    var type;\n\n    var protoImagery = metadata.protoImagery;\n    if (!defined(protoImagery) || !protoImagery) {\n      type = getImageType(a);\n    }\n\n    if (!defined(type) && (!defined(protoImagery) || protoImagery)) {\n      var message = decodeEarthImageryPacket(a);\n      type = message.imageType;\n      a = message.imageData;\n    }\n\n    if (!defined(type) || !defined(a)) {\n      return invalidImage;\n    }\n\n    return loadImageFromTypedArray({\n      uint8Array: a,\n      format: type,\n      flipY: true,\n    });\n  });\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nGoogleEarthEnterpriseImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return undefined;\n};\n\n//\n// Functions to handle imagery packets\n//\nfunction buildImageResource(imageryProvider, info, x, y, level, request) {\n  var quadKey = GoogleEarthEnterpriseMetadata.tileXYToQuadKey(x, y, level);\n  var version = info.imageryVersion;\n  version = defined(version) && version > 0 ? version : 1;\n\n  return imageryProvider._metadata.resource.getDerivedResource({\n    url: \"flatfile?f1-0\" + quadKey + \"-i.\" + version.toString(),\n    request: request,\n  });\n}\n\n// Detects if a Uint8Array is a JPEG or PNG\nfunction getImageType(image) {\n  var jpeg = \"JFIF\";\n  if (\n    image[6] === jpeg.charCodeAt(0) &&\n    image[7] === jpeg.charCodeAt(1) &&\n    image[8] === jpeg.charCodeAt(2) &&\n    image[9] === jpeg.charCodeAt(3)\n  ) {\n    return \"image/jpeg\";\n  }\n\n  var png = \"PNG\";\n  if (\n    image[1] === png.charCodeAt(0) &&\n    image[2] === png.charCodeAt(1) &&\n    image[3] === png.charCodeAt(2)\n  ) {\n    return \"image/png\";\n  }\n\n  return undefined;\n}\n\n// Decodes an Imagery protobuf into the message\n// Partially generated with the help of protobuf.js static generator\nfunction decodeEarthImageryPacket(data) {\n  var reader = protobuf.Reader.create(data);\n  var end = reader.len;\n  var message = {};\n  while (reader.pos < end) {\n    var tag = reader.uint32();\n    switch (tag >>> 3) {\n      case 1:\n        message.imageType = reader.uint32();\n        break;\n      case 2:\n        message.imageData = reader.bytes();\n        break;\n      case 3:\n        message.alphaType = reader.uint32();\n        break;\n      case 4:\n        message.imageAlpha = reader.bytes();\n        break;\n      case 5:\n        var copyrightIds = message.copyrightIds;\n        if (!defined(copyrightIds)) {\n          copyrightIds = message.copyrightIds = [];\n        }\n        if ((tag & 7) === 2) {\n          var end2 = reader.uint32() + reader.pos;\n          while (reader.pos < end2) {\n            copyrightIds.push(reader.uint32());\n          }\n        } else {\n          copyrightIds.push(reader.uint32());\n        }\n        break;\n      default:\n        reader.skipType(tag & 7);\n        break;\n    }\n  }\n\n  var imageType = message.imageType;\n  if (defined(imageType)) {\n    switch (imageType) {\n      case 0:\n        message.imageType = \"image/jpeg\";\n        break;\n      case 4:\n        message.imageType = \"image/png\";\n        break;\n      default:\n        throw new RuntimeError(\n          \"GoogleEarthEnterpriseImageryProvider: Unsupported image type.\"\n        );\n    }\n  }\n\n  var alphaType = message.alphaType;\n  if (defined(alphaType) && alphaType !== 0) {\n    console.log(\n      \"GoogleEarthEnterpriseImageryProvider: External alpha not supported.\"\n    );\n    delete message.alphaType;\n    delete message.imageAlpha;\n  }\n\n  return message;\n}\nexport default GoogleEarthEnterpriseImageryProvider;\n"]},"metadata":{},"sourceType":"module"}