{"ast":null,"code":"import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport combine from \"../Core/combine.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\nvar templateRegex = /{[^}]+}/g;\nvar tags = {\n  x: xTag,\n  y: yTag,\n  z: zTag,\n  s: sTag,\n  reverseX: reverseXTag,\n  reverseY: reverseYTag,\n  reverseZ: reverseZTag,\n  westDegrees: westDegreesTag,\n  southDegrees: southDegreesTag,\n  eastDegrees: eastDegreesTag,\n  northDegrees: northDegreesTag,\n  westProjected: westProjectedTag,\n  southProjected: southProjectedTag,\n  eastProjected: eastProjectedTag,\n  northProjected: northProjectedTag,\n  width: widthTag,\n  height: heightTag\n};\nvar pickFeaturesTags = combine(tags, {\n  i: iTag,\n  j: jTag,\n  reverseI: reverseITag,\n  reverseJ: reverseJTag,\n  longitudeDegrees: longitudeDegreesTag,\n  latitudeDegrees: latitudeDegreesTag,\n  longitudeProjected: longitudeProjectedTag,\n  latitudeProjected: latitudeProjectedTag,\n  format: formatTag\n});\n/**\n * @typedef {Object} UrlTemplateImageryProvider.ConstructorOptions\n *\n * Initialization options for the UrlTemplateImageryProvider constructor\n *\n * @property {Promise.<Object>|Object} [options] Object with the following properties:\n * @property {Resource|String} url  The URL template to use to request tiles.  It has the following keywords:\n * <ul>\n *     <li><code>{z}</code>: The level of the tile in the tiling scheme.  Level zero is the root of the quadtree pyramid.</li>\n *     <li><code>{x}</code>: The tile X coordinate in the tiling scheme, where 0 is the Westernmost tile.</li>\n *     <li><code>{y}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Northernmost tile.</li>\n *     <li><code>{s}</code>: One of the available subdomains, used to overcome browser limits on the number of simultaneous requests per host.</li>\n *     <li><code>{reverseX}</code>: The tile X coordinate in the tiling scheme, where 0 is the Easternmost tile.</li>\n *     <li><code>{reverseY}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Southernmost tile.</li>\n *     <li><code>{reverseZ}</code>: The level of the tile in the tiling scheme, where level zero is the maximum level of the quadtree pyramid.  In order to use reverseZ, maximumLevel must be defined.</li>\n *     <li><code>{westDegrees}</code>: The Western edge of the tile in geodetic degrees.</li>\n *     <li><code>{southDegrees}</code>: The Southern edge of the tile in geodetic degrees.</li>\n *     <li><code>{eastDegrees}</code>: The Eastern edge of the tile in geodetic degrees.</li>\n *     <li><code>{northDegrees}</code>: The Northern edge of the tile in geodetic degrees.</li>\n *     <li><code>{westProjected}</code>: The Western edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{southProjected}</code>: The Southern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{eastProjected}</code>: The Eastern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{northProjected}</code>: The Northern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{width}</code>: The width of each tile in pixels.</li>\n *     <li><code>{height}</code>: The height of each tile in pixels.</li>\n * </ul>\n * @property {Resource|String} [pickFeaturesUrl] The URL template to use to pick features.  If this property is not specified,\n *                 {@link UrlTemplateImageryProvider#pickFeatures} will immediately returned undefined, indicating no\n *                 features picked.  The URL template supports all of the keywords supported by the <code>url</code>\n *                 parameter, plus the following:\n * <ul>\n *     <li><code>{i}</code>: The pixel column (horizontal coordinate) of the picked position, where the Westernmost pixel is 0.</li>\n *     <li><code>{j}</code>: The pixel row (vertical coordinate) of the picked position, where the Northernmost pixel is 0.</li>\n *     <li><code>{reverseI}</code>: The pixel column (horizontal coordinate) of the picked position, where the Easternmost pixel is 0.</li>\n *     <li><code>{reverseJ}</code>: The pixel row (vertical coordinate) of the picked position, where the Southernmost pixel is 0.</li>\n *     <li><code>{longitudeDegrees}</code>: The longitude of the picked position in degrees.</li>\n *     <li><code>{latitudeDegrees}</code>: The latitude of the picked position in degrees.</li>\n *     <li><code>{longitudeProjected}</code>: The longitude of the picked position in the projected coordinates of the tiling scheme.</li>\n *     <li><code>{latitudeProjected}</code>: The latitude of the picked position in the projected coordinates of the tiling scheme.</li>\n *     <li><code>{format}</code>: The format in which to get feature information, as specified in the {@link GetFeatureInfoFormat}.</li>\n * </ul>\n * @property {Object} [urlSchemeZeroPadding] Gets the URL scheme zero padding for each tile coordinate. The format is '000' where\n * each coordinate will be padded on the left with zeros to match the width of the passed string of zeros. e.g. Setting:\n * urlSchemeZeroPadding : { '{x}' : '0000'}\n * will cause an 'x' value of 12 to return the string '0012' for {x} in the generated URL.\n * It the passed object has the following keywords:\n * <ul>\n *  <li> <code>{z}</code>: The zero padding for the level of the tile in the tiling scheme.</li>\n *  <li> <code>{x}</code>: The zero padding for the tile X coordinate in the tiling scheme.</li>\n *  <li> <code>{y}</code>: The zero padding for the the tile Y coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseX}</code>: The zero padding for the tile reverseX coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseY}</code>: The zero padding for the tile reverseY coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseZ}</code>: The zero padding for the reverseZ coordinate of the tile in the tiling scheme.</li>\n * </ul>\n * @property {String|String[]} [subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n * @property {Credit|String} [credit=''] A credit for the data source, which is displayed on the canvas.\n * @property {Number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @property {Number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {TilingScheme} [tilingScheme=WebMercatorTilingScheme] The tiling scheme specifying how the ellipsoidal\n * surface is broken into tiles.  If this parameter is not provided, a {@link WebMercatorTilingScheme}\n * is used.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @property {Number} [tileWidth=256] Pixel width of image tiles.\n * @property {Number} [tileHeight=256] Pixel height of image tiles.\n * @property {Boolean} [hasAlphaChannel=true] true if the images provided by this imagery provider\n *                  include an alpha channel; otherwise, false.  If this property is false, an alpha channel, if\n *                  present, will be ignored.  If this property is true, any images without an alpha channel will\n *                  be treated as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n *                  and texture upload time are potentially reduced.\n * @property {GetFeatureInfoFormat[]} [getFeatureInfoFormats] The formats in which to get feature information at a\n *                                 specific location when {@link UrlTemplateImageryProvider#pickFeatures} is invoked.  If this\n *                                 parameter is not specified, feature picking is disabled.\n * @property {Boolean} [enablePickFeatures=true] If true, {@link UrlTemplateImageryProvider#pickFeatures} will\n *        request the <code>pickFeaturesUrl</code> and attempt to interpret the features included in the response.  If false,\n *        {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n *        features) without communicating with the server.  Set this property to false if you know your data\n *        source does not support picking features or if you don't want this provider's features to be pickable. Note\n *        that this can be dynamically overridden by modifying the {@link UriTemplateImageryProvider#enablePickFeatures}\n *        property.\n * @property {Object} [customTags] Allow to replace custom keywords in the URL template. The object must have strings as keys and functions as values.\n */\n\n/**\n * Provides imagery by requesting tiles using a specified URL template.\n *\n * @alias UrlTemplateImageryProvider\n * @constructor\n *\n * @param {UrlTemplateImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @example\n * // Access Natural Earth II imagery, which uses a TMS tiling scheme and Geographic (EPSG:4326) project\n * var tms = new Cesium.UrlTemplateImageryProvider({\n *     url : Cesium.buildModuleUrl('Assets/Textures/NaturalEarthII') + '/{z}/{x}/{reverseY}.jpg',\n *     credit : '© Analytical Graphics, Inc.',\n *     tilingScheme : new Cesium.GeographicTilingScheme(),\n *     maximumLevel : 5\n * });\n * // Access the CartoDB Positron basemap, which uses an OpenStreetMap-like tiling scheme.\n * var positron = new Cesium.UrlTemplateImageryProvider({\n *     url : 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',\n *     credit : 'Map tiles by CartoDB, under CC BY 3.0. Data by OpenStreetMap, under ODbL.'\n * });\n * // Access a Web Map Service (WMS) server.\n * var wms = new Cesium.UrlTemplateImageryProvider({\n *    url : 'https://programs.communications.gov.au/geoserver/ows?tiled=true&' +\n *          'transparent=true&format=image%2Fpng&exceptions=application%2Fvnd.ogc.se_xml&' +\n *          'styles=&service=WMS&version=1.1.1&request=GetMap&' +\n *          'layers=public%3AMyBroadband_Availability&srs=EPSG%3A3857&' +\n *          'bbox={westProjected}%2C{southProjected}%2C{eastProjected}%2C{northProjected}&' +\n *          'width=256&height=256',\n *    rectangle : Cesium.Rectangle.fromDegrees(96.799393, -43.598214999057824, 153.63925700000001, -9.2159219997013)\n * });\n * // Using custom tags in your template url.\n * var custom = new Cesium.UrlTemplateImageryProvider({\n *    url : 'https://yoururl/{Time}/{z}/{y}/{x}.png',\n *    customTags : {\n *        Time: function(imageryProvider, x, y, level) {\n *            return '20171231'\n *        }\n *    }\n * });\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n */\n\nfunction UrlTemplateImageryProvider(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options)) {\n    throw new DeveloperError(\"options is required.\");\n  }\n\n  if (!when.isPromise(options) && !defined(options.url)) {\n    throw new DeveloperError(\"options is required.\");\n  } //>>includeEnd('debug');\n\n\n  this._errorEvent = new Event();\n  this._resource = undefined;\n  this._urlSchemeZeroPadding = undefined;\n  this._pickFeaturesResource = undefined;\n  this._tileWidth = undefined;\n  this._tileHeight = undefined;\n  this._maximumLevel = undefined;\n  this._minimumLevel = undefined;\n  this._tilingScheme = undefined;\n  this._rectangle = undefined;\n  this._tileDiscardPolicy = undefined;\n  this._credit = undefined;\n  this._hasAlphaChannel = undefined;\n  this._readyPromise = undefined;\n  this._tags = undefined;\n  this._pickFeaturesTags = undefined;\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultAlpha = undefined;\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultNightAlpha = undefined;\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultDayAlpha = undefined;\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultBrightness = undefined;\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultContrast = undefined;\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultHue = undefined;\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultSaturation = undefined;\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultGamma = undefined;\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n\n  this.defaultMinificationFilter = undefined;\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n\n  this.defaultMagnificationFilter = undefined;\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link UrlTemplateImageryProvider#pickFeatures} will\n   * request the <code>options.pickFeaturesUrl</code> and attempt to interpret the features included in the response.  If false,\n   * {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n   * features) without communicating with the server.  Set this property to false if you know your data\n   * source does not support picking features or if you don't want this provider's features to be pickable.\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.enablePickFeatures = true;\n  this.reinitialize(options);\n}\n\nObject.defineProperties(UrlTemplateImageryProvider.prototype, {\n  /**\n   * Gets the URL template to use to request tiles.  It has the following keywords:\n   * <ul>\n   *  <li> <code>{z}</code>: The level of the tile in the tiling scheme.  Level zero is the root of the quadtree pyramid.</li>\n   *  <li> <code>{x}</code>: The tile X coordinate in the tiling scheme, where 0 is the Westernmost tile.</li>\n   *  <li> <code>{y}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Northernmost tile.</li>\n   *  <li> <code>{s}</code>: One of the available subdomains, used to overcome browser limits on the number of simultaneous requests per host.</li>\n   *  <li> <code>{reverseX}</code>: The tile X coordinate in the tiling scheme, where 0 is the Easternmost tile.</li>\n   *  <li> <code>{reverseY}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Southernmost tile.</li>\n   *  <li> <code>{reverseZ}</code>: The level of the tile in the tiling scheme, where level zero is the maximum level of the quadtree pyramid.  In order to use reverseZ, maximumLevel must be defined.</li>\n   *  <li> <code>{westDegrees}</code>: The Western edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{southDegrees}</code>: The Southern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{eastDegrees}</code>: The Eastern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{northDegrees}</code>: The Northern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{westProjected}</code>: The Western edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{southProjected}</code>: The Southern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{eastProjected}</code>: The Eastern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{northProjected}</code>: The Northern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{width}</code>: The width of each tile in pixels.</li>\n   *  <li> <code>{height}</code>: The height of each tile in pixels.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    }\n  },\n\n  /**\n   * Gets the URL scheme zero padding for each tile coordinate. The format is '000' where each coordinate will be padded on\n   * the left with zeros to match the width of the passed string of zeros. e.g. Setting:\n   * urlSchemeZeroPadding : { '{x}' : '0000'}\n   * will cause an 'x' value of 12 to return the string '0012' for {x} in the generated URL.\n   * It has the following keywords:\n   * <ul>\n   *  <li> <code>{z}</code>: The zero padding for the level of the tile in the tiling scheme.</li>\n   *  <li> <code>{x}</code>: The zero padding for the tile X coordinate in the tiling scheme.</li>\n   *  <li> <code>{y}</code>: The zero padding for the the tile Y coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseX}</code>: The zero padding for the tile reverseX coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseY}</code>: The zero padding for the tile reverseY coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseZ}</code>: The zero padding for the reverseZ coordinate of the tile in the tiling scheme.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Object}\n   * @readonly\n   */\n  urlSchemeZeroPadding: {\n    get: function () {\n      return this._urlSchemeZeroPadding;\n    }\n  },\n\n  /**\n   * Gets the URL template to use to use to pick features.  If this property is not specified,\n   * {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined, indicating no\n   * features picked.  The URL template supports all of the keywords supported by the\n   * {@link UrlTemplateImageryProvider#url} property, plus the following:\n   * <ul>\n   *     <li><code>{i}</code>: The pixel column (horizontal coordinate) of the picked position, where the Westernmost pixel is 0.</li>\n   *     <li><code>{j}</code>: The pixel row (vertical coordinate) of the picked position, where the Northernmost pixel is 0.</li>\n   *     <li><code>{reverseI}</code>: The pixel column (horizontal coordinate) of the picked position, where the Easternmost pixel is 0.</li>\n   *     <li><code>{reverseJ}</code>: The pixel row (vertical coordinate) of the picked position, where the Southernmost pixel is 0.</li>\n   *     <li><code>{longitudeDegrees}</code>: The longitude of the picked position in degrees.</li>\n   *     <li><code>{latitudeDegrees}</code>: The latitude of the picked position in degrees.</li>\n   *     <li><code>{longitudeProjected}</code>: The longitude of the picked position in the projected coordinates of the tiling scheme.</li>\n   *     <li><code>{latitudeProjected}</code>: The latitude of the picked position in the projected coordinates of the tiling scheme.</li>\n   *     <li><code>{format}</code>: The format in which to get feature information, as specified in the {@link GetFeatureInfoFormat}.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  pickFeaturesUrl: {\n    get: function () {\n      return this._pickFeaturesResource.url;\n    }\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   * @default undefined\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    }\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   * @default 256\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\"tileWidth must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileWidth;\n    }\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   * @default 256\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\"tileHeight must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileHeight;\n    }\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested, or undefined if there is no limit.\n   * This function should not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   * @default undefined\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\"maximumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._maximumLevel;\n    }\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   * @default 0\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\"minimumLevel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._minimumLevel;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   * @default new WebMercatorTilingScheme()\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\"tilingScheme must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   * @default tilingScheme.rectangle\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\"rectangle must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._rectangle;\n    }\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   * @default undefined\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\"tileDiscardPolicy must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._tileDiscardPolicy;\n    }\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return defined(this._resource);\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   * @default undefined\n   */\n  credit: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\"credit must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._credit;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   * @default true\n   */\n  hasAlphaChannel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\"hasAlphaChannel must not be called before the imagery provider is ready.\");\n      } //>>includeEnd('debug');\n\n\n      return this._hasAlphaChannel;\n    }\n  }\n});\n/**\n * Reinitializes this instance.  Reinitializing an instance already in use is supported, but it is not\n * recommended because existing tiles provided by the imagery provider will not be updated.\n *\n * @param {Promise.<Object>|Object} options Any of the options that may be passed to the {@link UrlTemplateImageryProvider} constructor.\n */\n\nUrlTemplateImageryProvider.prototype.reinitialize = function (options) {\n  var that = this;\n  that._readyPromise = when(options).then(function (properties) {\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(properties)) {\n      throw new DeveloperError(\"options is required.\");\n    }\n\n    if (!defined(properties.url)) {\n      throw new DeveloperError(\"options.url is required.\");\n    } //>>includeEnd('debug');\n\n\n    var customTags = properties.customTags;\n    var allTags = combine(tags, customTags);\n    var allPickFeaturesTags = combine(pickFeaturesTags, customTags);\n    var resource = Resource.createIfNeeded(properties.url);\n    var pickFeaturesResource = Resource.createIfNeeded(properties.pickFeaturesUrl);\n    that.enablePickFeatures = defaultValue(properties.enablePickFeatures, that.enablePickFeatures);\n    that._urlSchemeZeroPadding = defaultValue(properties.urlSchemeZeroPadding, that.urlSchemeZeroPadding);\n    that._tileDiscardPolicy = properties.tileDiscardPolicy;\n    that._getFeatureInfoFormats = properties.getFeatureInfoFormats;\n    that._subdomains = properties.subdomains;\n\n    if (Array.isArray(that._subdomains)) {\n      that._subdomains = that._subdomains.slice();\n    } else if (defined(that._subdomains) && that._subdomains.length > 0) {\n      that._subdomains = that._subdomains.split(\"\");\n    } else {\n      that._subdomains = [\"a\", \"b\", \"c\"];\n    }\n\n    that._tileWidth = defaultValue(properties.tileWidth, 256);\n    that._tileHeight = defaultValue(properties.tileHeight, 256);\n    that._minimumLevel = defaultValue(properties.minimumLevel, 0);\n    that._maximumLevel = properties.maximumLevel;\n    that._tilingScheme = defaultValue(properties.tilingScheme, new WebMercatorTilingScheme({\n      ellipsoid: properties.ellipsoid\n    }));\n    that._rectangle = defaultValue(properties.rectangle, that._tilingScheme.rectangle);\n    that._rectangle = Rectangle.intersection(that._rectangle, that._tilingScheme.rectangle);\n    that._hasAlphaChannel = defaultValue(properties.hasAlphaChannel, true);\n    var credit = properties.credit;\n\n    if (typeof credit === \"string\") {\n      credit = new Credit(credit);\n    }\n\n    that._credit = credit;\n    that._resource = resource;\n    that._tags = allTags;\n    that._pickFeaturesResource = pickFeaturesResource;\n    that._pickFeaturesTags = allPickFeaturesTags;\n    return true;\n  });\n};\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\n\nUrlTemplateImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this.ready) {\n    throw new DeveloperError(\"getTileCredits must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  return undefined;\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n */\n\n\nUrlTemplateImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this.ready) {\n    throw new DeveloperError(\"requestImage must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  return ImageryProvider.loadImage(this, buildImageResource(this, x, y, level, request));\n};\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link ImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\n\n\nUrlTemplateImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this.ready) {\n    throw new DeveloperError(\"pickFeatures must not be called before the imagery provider is ready.\");\n  } //>>includeEnd('debug');\n\n\n  if (!this.enablePickFeatures || !defined(this._pickFeaturesResource) || this._getFeatureInfoFormats.length === 0) {\n    return undefined;\n  }\n\n  var formatIndex = 0;\n  var that = this;\n\n  function handleResponse(format, data) {\n    return format.callback(data);\n  }\n\n  function doRequest() {\n    if (formatIndex >= that._getFeatureInfoFormats.length) {\n      // No valid formats, so no features picked.\n      return when([]);\n    }\n\n    var format = that._getFeatureInfoFormats[formatIndex];\n    var resource = buildPickFeaturesResource(that, x, y, level, longitude, latitude, format.format);\n    ++formatIndex;\n\n    if (format.type === \"json\") {\n      return resource.fetchJson().then(format.callback).otherwise(doRequest);\n    } else if (format.type === \"xml\") {\n      return resource.fetchXML().then(format.callback).otherwise(doRequest);\n    } else if (format.type === \"text\" || format.type === \"html\") {\n      return resource.fetchText().then(format.callback).otherwise(doRequest);\n    }\n\n    return resource.fetch({\n      responseType: format.format\n    }).then(handleResponse.bind(undefined, format)).otherwise(doRequest);\n  }\n\n  return doRequest();\n};\n\nvar degreesScratchComputed = false;\nvar degreesScratch = new Rectangle();\nvar projectedScratchComputed = false;\nvar projectedScratch = new Rectangle();\n\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  degreesScratchComputed = false;\n  projectedScratchComputed = false;\n  var resource = imageryProvider._resource;\n  var url = resource.getUrlComponent(true);\n  var allTags = imageryProvider._tags;\n  var templateValues = {};\n  var match = url.match(templateRegex);\n\n  if (defined(match)) {\n    match.forEach(function (tag) {\n      var key = tag.substring(1, tag.length - 1); //strip {}\n\n      if (defined(allTags[key])) {\n        templateValues[key] = allTags[key](imageryProvider, x, y, level);\n      }\n    });\n  }\n\n  return resource.getDerivedResource({\n    request: request,\n    templateValues: templateValues\n  });\n}\n\nvar ijScratchComputed = false;\nvar ijScratch = new Cartesian2();\nvar longitudeLatitudeProjectedScratchComputed = false;\n\nfunction buildPickFeaturesResource(imageryProvider, x, y, level, longitude, latitude, format) {\n  degreesScratchComputed = false;\n  projectedScratchComputed = false;\n  ijScratchComputed = false;\n  longitudeLatitudeProjectedScratchComputed = false;\n  var resource = imageryProvider._pickFeaturesResource;\n  var url = resource.getUrlComponent(true);\n  var allTags = imageryProvider._pickFeaturesTags;\n  var templateValues = {};\n  var match = url.match(templateRegex);\n\n  if (defined(match)) {\n    match.forEach(function (tag) {\n      var key = tag.substring(1, tag.length - 1); //strip {}\n\n      if (defined(allTags[key])) {\n        templateValues[key] = allTags[key](imageryProvider, x, y, level, longitude, latitude, format);\n      }\n    });\n  }\n\n  return resource.getDerivedResource({\n    templateValues: templateValues\n  });\n}\n\nfunction padWithZerosIfNecessary(imageryProvider, key, value) {\n  if (imageryProvider && imageryProvider.urlSchemeZeroPadding && imageryProvider.urlSchemeZeroPadding.hasOwnProperty(key)) {\n    var paddingTemplate = imageryProvider.urlSchemeZeroPadding[key];\n\n    if (typeof paddingTemplate === \"string\") {\n      var paddingTemplateWidth = paddingTemplate.length;\n\n      if (paddingTemplateWidth > 1) {\n        value = value.length >= paddingTemplateWidth ? value : new Array(paddingTemplateWidth - value.toString().length + 1).join(\"0\") + value;\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction xTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{x}\", x);\n}\n\nfunction reverseXTag(imageryProvider, x, y, level) {\n  var reverseX = imageryProvider.tilingScheme.getNumberOfXTilesAtLevel(level) - x - 1;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseX}\", reverseX);\n}\n\nfunction yTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{y}\", y);\n}\n\nfunction reverseYTag(imageryProvider, x, y, level) {\n  var reverseY = imageryProvider.tilingScheme.getNumberOfYTilesAtLevel(level) - y - 1;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseY}\", reverseY);\n}\n\nfunction reverseZTag(imageryProvider, x, y, level) {\n  var maximumLevel = imageryProvider.maximumLevel;\n  var reverseZ = defined(maximumLevel) && level < maximumLevel ? maximumLevel - level - 1 : level;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseZ}\", reverseZ);\n}\n\nfunction zTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{z}\", level);\n}\n\nfunction sTag(imageryProvider, x, y, level) {\n  var index = (x + y + level) % imageryProvider._subdomains.length;\n  return imageryProvider._subdomains[index];\n}\n\nfunction computeDegrees(imageryProvider, x, y, level) {\n  if (degreesScratchComputed) {\n    return;\n  }\n\n  imageryProvider.tilingScheme.tileXYToRectangle(x, y, level, degreesScratch);\n  degreesScratch.west = CesiumMath.toDegrees(degreesScratch.west);\n  degreesScratch.south = CesiumMath.toDegrees(degreesScratch.south);\n  degreesScratch.east = CesiumMath.toDegrees(degreesScratch.east);\n  degreesScratch.north = CesiumMath.toDegrees(degreesScratch.north);\n  degreesScratchComputed = true;\n}\n\nfunction westDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.west;\n}\n\nfunction southDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.south;\n}\n\nfunction eastDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.east;\n}\n\nfunction northDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.north;\n}\n\nfunction computeProjected(imageryProvider, x, y, level) {\n  if (projectedScratchComputed) {\n    return;\n  }\n\n  imageryProvider.tilingScheme.tileXYToNativeRectangle(x, y, level, projectedScratch);\n  projectedScratchComputed = true;\n}\n\nfunction westProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.west;\n}\n\nfunction southProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.south;\n}\n\nfunction eastProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.east;\n}\n\nfunction northProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.north;\n}\n\nfunction widthTag(imageryProvider, x, y, level) {\n  return imageryProvider.tileWidth;\n}\n\nfunction heightTag(imageryProvider, x, y, level) {\n  return imageryProvider.tileHeight;\n}\n\nfunction iTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return ijScratch.x;\n}\n\nfunction jTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return ijScratch.y;\n}\n\nfunction reverseITag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return imageryProvider.tileWidth - ijScratch.x - 1;\n}\n\nfunction reverseJTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return imageryProvider.tileHeight - ijScratch.y - 1;\n}\n\nvar rectangleScratch = new Rectangle();\nvar longitudeLatitudeProjectedScratch = new Cartesian3();\n\nfunction computeIJ(imageryProvider, x, y, level, longitude, latitude, format) {\n  if (ijScratchComputed) {\n    return;\n  }\n\n  computeLongitudeLatitudeProjected(imageryProvider, x, y, level, longitude, latitude);\n  var projected = longitudeLatitudeProjectedScratch;\n  var rectangle = imageryProvider.tilingScheme.tileXYToNativeRectangle(x, y, level, rectangleScratch);\n  ijScratch.x = imageryProvider.tileWidth * (projected.x - rectangle.west) / rectangle.width | 0;\n  ijScratch.y = imageryProvider.tileHeight * (rectangle.north - projected.y) / rectangle.height | 0;\n  ijScratchComputed = true;\n}\n\nfunction longitudeDegreesTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  return CesiumMath.toDegrees(longitude);\n}\n\nfunction latitudeDegreesTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  return CesiumMath.toDegrees(latitude);\n}\n\nfunction longitudeProjectedTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeLongitudeLatitudeProjected(imageryProvider, x, y, level, longitude, latitude);\n  return longitudeLatitudeProjectedScratch.x;\n}\n\nfunction latitudeProjectedTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeLongitudeLatitudeProjected(imageryProvider, x, y, level, longitude, latitude);\n  return longitudeLatitudeProjectedScratch.y;\n}\n\nvar cartographicScratch = new Cartographic();\n\nfunction computeLongitudeLatitudeProjected(imageryProvider, x, y, level, longitude, latitude, format) {\n  if (longitudeLatitudeProjectedScratchComputed) {\n    return;\n  }\n\n  if (imageryProvider.tilingScheme.projection instanceof GeographicProjection) {\n    longitudeLatitudeProjectedScratch.x = CesiumMath.toDegrees(longitude);\n    longitudeLatitudeProjectedScratch.y = CesiumMath.toDegrees(latitude);\n  } else {\n    var cartographic = cartographicScratch;\n    cartographic.longitude = longitude;\n    cartographic.latitude = latitude;\n    imageryProvider.tilingScheme.projection.project(cartographic, longitudeLatitudeProjectedScratch);\n  }\n\n  longitudeLatitudeProjectedScratchComputed = true;\n}\n\nfunction formatTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  return format;\n}\n\nexport default UrlTemplateImageryProvider;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Scene/UrlTemplateImageryProvider.js"],"names":["Cartesian2","Cartesian3","Cartographic","combine","Credit","defaultValue","defined","DeveloperError","Event","GeographicProjection","CesiumMath","Rectangle","Resource","WebMercatorTilingScheme","when","ImageryProvider","templateRegex","tags","x","xTag","y","yTag","z","zTag","s","sTag","reverseX","reverseXTag","reverseY","reverseYTag","reverseZ","reverseZTag","westDegrees","westDegreesTag","southDegrees","southDegreesTag","eastDegrees","eastDegreesTag","northDegrees","northDegreesTag","westProjected","westProjectedTag","southProjected","southProjectedTag","eastProjected","eastProjectedTag","northProjected","northProjectedTag","width","widthTag","height","heightTag","pickFeaturesTags","i","iTag","j","jTag","reverseI","reverseITag","reverseJ","reverseJTag","longitudeDegrees","longitudeDegreesTag","latitudeDegrees","latitudeDegreesTag","longitudeProjected","longitudeProjectedTag","latitudeProjected","latitudeProjectedTag","format","formatTag","UrlTemplateImageryProvider","options","isPromise","url","_errorEvent","_resource","undefined","_urlSchemeZeroPadding","_pickFeaturesResource","_tileWidth","_tileHeight","_maximumLevel","_minimumLevel","_tilingScheme","_rectangle","_tileDiscardPolicy","_credit","_hasAlphaChannel","_readyPromise","_tags","_pickFeaturesTags","defaultAlpha","defaultNightAlpha","defaultDayAlpha","defaultBrightness","defaultContrast","defaultHue","defaultSaturation","defaultGamma","defaultMinificationFilter","defaultMagnificationFilter","enablePickFeatures","reinitialize","Object","defineProperties","prototype","get","urlSchemeZeroPadding","pickFeaturesUrl","proxy","tileWidth","ready","tileHeight","maximumLevel","minimumLevel","tilingScheme","rectangle","tileDiscardPolicy","errorEvent","readyPromise","credit","hasAlphaChannel","that","then","properties","customTags","allTags","allPickFeaturesTags","resource","createIfNeeded","pickFeaturesResource","_getFeatureInfoFormats","getFeatureInfoFormats","_subdomains","subdomains","Array","isArray","slice","length","split","ellipsoid","intersection","getTileCredits","level","requestImage","request","loadImage","buildImageResource","pickFeatures","longitude","latitude","formatIndex","handleResponse","data","callback","doRequest","buildPickFeaturesResource","type","fetchJson","otherwise","fetchXML","fetchText","fetch","responseType","bind","degreesScratchComputed","degreesScratch","projectedScratchComputed","projectedScratch","imageryProvider","getUrlComponent","templateValues","match","forEach","tag","key","substring","getDerivedResource","ijScratchComputed","ijScratch","longitudeLatitudeProjectedScratchComputed","padWithZerosIfNecessary","value","hasOwnProperty","paddingTemplate","paddingTemplateWidth","toString","join","getNumberOfXTilesAtLevel","getNumberOfYTilesAtLevel","index","computeDegrees","tileXYToRectangle","west","toDegrees","south","east","north","computeProjected","tileXYToNativeRectangle","computeIJ","rectangleScratch","longitudeLatitudeProjectedScratch","computeLongitudeLatitudeProjected","projected","cartographicScratch","projection","cartographic","project"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,oBAAP,MAAiC,iCAAjC;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AAEA,IAAIC,aAAa,GAAG,UAApB;AAEA,IAAIC,IAAI,GAAG;AACTC,EAAAA,CAAC,EAAEC,IADM;AAETC,EAAAA,CAAC,EAAEC,IAFM;AAGTC,EAAAA,CAAC,EAAEC,IAHM;AAITC,EAAAA,CAAC,EAAEC,IAJM;AAKTC,EAAAA,QAAQ,EAAEC,WALD;AAMTC,EAAAA,QAAQ,EAAEC,WAND;AAOTC,EAAAA,QAAQ,EAAEC,WAPD;AAQTC,EAAAA,WAAW,EAAEC,cARJ;AASTC,EAAAA,YAAY,EAAEC,eATL;AAUTC,EAAAA,WAAW,EAAEC,cAVJ;AAWTC,EAAAA,YAAY,EAAEC,eAXL;AAYTC,EAAAA,aAAa,EAAEC,gBAZN;AAaTC,EAAAA,cAAc,EAAEC,iBAbP;AAcTC,EAAAA,aAAa,EAAEC,gBAdN;AAeTC,EAAAA,cAAc,EAAEC,iBAfP;AAgBTC,EAAAA,KAAK,EAAEC,QAhBE;AAiBTC,EAAAA,MAAM,EAAEC;AAjBC,CAAX;AAoBA,IAAIC,gBAAgB,GAAGjD,OAAO,CAACc,IAAD,EAAO;AACnCoC,EAAAA,CAAC,EAAEC,IADgC;AAEnCC,EAAAA,CAAC,EAAEC,IAFgC;AAGnCC,EAAAA,QAAQ,EAAEC,WAHyB;AAInCC,EAAAA,QAAQ,EAAEC,WAJyB;AAKnCC,EAAAA,gBAAgB,EAAEC,mBALiB;AAMnCC,EAAAA,eAAe,EAAEC,kBANkB;AAOnCC,EAAAA,kBAAkB,EAAEC,qBAPe;AAQnCC,EAAAA,iBAAiB,EAAEC,oBARgB;AASnCC,EAAAA,MAAM,EAAEC;AAT2B,CAAP,CAA9B;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,0BAAT,CAAoCC,OAApC,EAA6C;AAC3C;AACA,MAAI,CAAClE,OAAO,CAACkE,OAAD,CAAZ,EAAuB;AACrB,UAAM,IAAIjE,cAAJ,CAAmB,sBAAnB,CAAN;AACD;;AACD,MAAI,CAACO,IAAI,CAAC2D,SAAL,CAAeD,OAAf,CAAD,IAA4B,CAAClE,OAAO,CAACkE,OAAO,CAACE,GAAT,CAAxC,EAAuD;AACrD,UAAM,IAAInE,cAAJ,CAAmB,sBAAnB,CAAN;AACD,GAP0C,CAQ3C;;;AAEA,OAAKoE,WAAL,GAAmB,IAAInE,KAAJ,EAAnB;AAEA,OAAKoE,SAAL,GAAiBC,SAAjB;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","sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport combine from \"../Core/combine.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport when from \"../ThirdParty/when.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\n\nvar templateRegex = /{[^}]+}/g;\n\nvar tags = {\n  x: xTag,\n  y: yTag,\n  z: zTag,\n  s: sTag,\n  reverseX: reverseXTag,\n  reverseY: reverseYTag,\n  reverseZ: reverseZTag,\n  westDegrees: westDegreesTag,\n  southDegrees: southDegreesTag,\n  eastDegrees: eastDegreesTag,\n  northDegrees: northDegreesTag,\n  westProjected: westProjectedTag,\n  southProjected: southProjectedTag,\n  eastProjected: eastProjectedTag,\n  northProjected: northProjectedTag,\n  width: widthTag,\n  height: heightTag,\n};\n\nvar pickFeaturesTags = combine(tags, {\n  i: iTag,\n  j: jTag,\n  reverseI: reverseITag,\n  reverseJ: reverseJTag,\n  longitudeDegrees: longitudeDegreesTag,\n  latitudeDegrees: latitudeDegreesTag,\n  longitudeProjected: longitudeProjectedTag,\n  latitudeProjected: latitudeProjectedTag,\n  format: formatTag,\n});\n\n/**\n * @typedef {Object} UrlTemplateImageryProvider.ConstructorOptions\n *\n * Initialization options for the UrlTemplateImageryProvider constructor\n *\n * @property {Promise.<Object>|Object} [options] Object with the following properties:\n * @property {Resource|String} url  The URL template to use to request tiles.  It has the following keywords:\n * <ul>\n *     <li><code>{z}</code>: The level of the tile in the tiling scheme.  Level zero is the root of the quadtree pyramid.</li>\n *     <li><code>{x}</code>: The tile X coordinate in the tiling scheme, where 0 is the Westernmost tile.</li>\n *     <li><code>{y}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Northernmost tile.</li>\n *     <li><code>{s}</code>: One of the available subdomains, used to overcome browser limits on the number of simultaneous requests per host.</li>\n *     <li><code>{reverseX}</code>: The tile X coordinate in the tiling scheme, where 0 is the Easternmost tile.</li>\n *     <li><code>{reverseY}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Southernmost tile.</li>\n *     <li><code>{reverseZ}</code>: The level of the tile in the tiling scheme, where level zero is the maximum level of the quadtree pyramid.  In order to use reverseZ, maximumLevel must be defined.</li>\n *     <li><code>{westDegrees}</code>: The Western edge of the tile in geodetic degrees.</li>\n *     <li><code>{southDegrees}</code>: The Southern edge of the tile in geodetic degrees.</li>\n *     <li><code>{eastDegrees}</code>: The Eastern edge of the tile in geodetic degrees.</li>\n *     <li><code>{northDegrees}</code>: The Northern edge of the tile in geodetic degrees.</li>\n *     <li><code>{westProjected}</code>: The Western edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{southProjected}</code>: The Southern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{eastProjected}</code>: The Eastern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{northProjected}</code>: The Northern edge of the tile in projected coordinates of the tiling scheme.</li>\n *     <li><code>{width}</code>: The width of each tile in pixels.</li>\n *     <li><code>{height}</code>: The height of each tile in pixels.</li>\n * </ul>\n * @property {Resource|String} [pickFeaturesUrl] The URL template to use to pick features.  If this property is not specified,\n *                 {@link UrlTemplateImageryProvider#pickFeatures} will immediately returned undefined, indicating no\n *                 features picked.  The URL template supports all of the keywords supported by the <code>url</code>\n *                 parameter, plus the following:\n * <ul>\n *     <li><code>{i}</code>: The pixel column (horizontal coordinate) of the picked position, where the Westernmost pixel is 0.</li>\n *     <li><code>{j}</code>: The pixel row (vertical coordinate) of the picked position, where the Northernmost pixel is 0.</li>\n *     <li><code>{reverseI}</code>: The pixel column (horizontal coordinate) of the picked position, where the Easternmost pixel is 0.</li>\n *     <li><code>{reverseJ}</code>: The pixel row (vertical coordinate) of the picked position, where the Southernmost pixel is 0.</li>\n *     <li><code>{longitudeDegrees}</code>: The longitude of the picked position in degrees.</li>\n *     <li><code>{latitudeDegrees}</code>: The latitude of the picked position in degrees.</li>\n *     <li><code>{longitudeProjected}</code>: The longitude of the picked position in the projected coordinates of the tiling scheme.</li>\n *     <li><code>{latitudeProjected}</code>: The latitude of the picked position in the projected coordinates of the tiling scheme.</li>\n *     <li><code>{format}</code>: The format in which to get feature information, as specified in the {@link GetFeatureInfoFormat}.</li>\n * </ul>\n * @property {Object} [urlSchemeZeroPadding] Gets the URL scheme zero padding for each tile coordinate. The format is '000' where\n * each coordinate will be padded on the left with zeros to match the width of the passed string of zeros. e.g. Setting:\n * urlSchemeZeroPadding : { '{x}' : '0000'}\n * will cause an 'x' value of 12 to return the string '0012' for {x} in the generated URL.\n * It the passed object has the following keywords:\n * <ul>\n *  <li> <code>{z}</code>: The zero padding for the level of the tile in the tiling scheme.</li>\n *  <li> <code>{x}</code>: The zero padding for the tile X coordinate in the tiling scheme.</li>\n *  <li> <code>{y}</code>: The zero padding for the the tile Y coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseX}</code>: The zero padding for the tile reverseX coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseY}</code>: The zero padding for the tile reverseY coordinate in the tiling scheme.</li>\n *  <li> <code>{reverseZ}</code>: The zero padding for the reverseZ coordinate of the tile in the tiling scheme.</li>\n * </ul>\n * @property {String|String[]} [subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n * @property {Credit|String} [credit=''] A credit for the data source, which is displayed on the canvas.\n * @property {Number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @property {Number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {TilingScheme} [tilingScheme=WebMercatorTilingScheme] The tiling scheme specifying how the ellipsoidal\n * surface is broken into tiles.  If this parameter is not provided, a {@link WebMercatorTilingScheme}\n * is used.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *                    parameter is specified, the WGS84 ellipsoid is used.\n * @property {Number} [tileWidth=256] Pixel width of image tiles.\n * @property {Number} [tileHeight=256] Pixel height of image tiles.\n * @property {Boolean} [hasAlphaChannel=true] true if the images provided by this imagery provider\n *                  include an alpha channel; otherwise, false.  If this property is false, an alpha channel, if\n *                  present, will be ignored.  If this property is true, any images without an alpha channel will\n *                  be treated as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n *                  and texture upload time are potentially reduced.\n * @property {GetFeatureInfoFormat[]} [getFeatureInfoFormats] The formats in which to get feature information at a\n *                                 specific location when {@link UrlTemplateImageryProvider#pickFeatures} is invoked.  If this\n *                                 parameter is not specified, feature picking is disabled.\n * @property {Boolean} [enablePickFeatures=true] If true, {@link UrlTemplateImageryProvider#pickFeatures} will\n *        request the <code>pickFeaturesUrl</code> and attempt to interpret the features included in the response.  If false,\n *        {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n *        features) without communicating with the server.  Set this property to false if you know your data\n *        source does not support picking features or if you don't want this provider's features to be pickable. Note\n *        that this can be dynamically overridden by modifying the {@link UriTemplateImageryProvider#enablePickFeatures}\n *        property.\n * @property {Object} [customTags] Allow to replace custom keywords in the URL template. The object must have strings as keys and functions as values.\n */\n\n/**\n * Provides imagery by requesting tiles using a specified URL template.\n *\n * @alias UrlTemplateImageryProvider\n * @constructor\n *\n * @param {UrlTemplateImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @example\n * // Access Natural Earth II imagery, which uses a TMS tiling scheme and Geographic (EPSG:4326) project\n * var tms = new Cesium.UrlTemplateImageryProvider({\n *     url : Cesium.buildModuleUrl('Assets/Textures/NaturalEarthII') + '/{z}/{x}/{reverseY}.jpg',\n *     credit : '© Analytical Graphics, Inc.',\n *     tilingScheme : new Cesium.GeographicTilingScheme(),\n *     maximumLevel : 5\n * });\n * // Access the CartoDB Positron basemap, which uses an OpenStreetMap-like tiling scheme.\n * var positron = new Cesium.UrlTemplateImageryProvider({\n *     url : 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',\n *     credit : 'Map tiles by CartoDB, under CC BY 3.0. Data by OpenStreetMap, under ODbL.'\n * });\n * // Access a Web Map Service (WMS) server.\n * var wms = new Cesium.UrlTemplateImageryProvider({\n *    url : 'https://programs.communications.gov.au/geoserver/ows?tiled=true&' +\n *          'transparent=true&format=image%2Fpng&exceptions=application%2Fvnd.ogc.se_xml&' +\n *          'styles=&service=WMS&version=1.1.1&request=GetMap&' +\n *          'layers=public%3AMyBroadband_Availability&srs=EPSG%3A3857&' +\n *          'bbox={westProjected}%2C{southProjected}%2C{eastProjected}%2C{northProjected}&' +\n *          'width=256&height=256',\n *    rectangle : Cesium.Rectangle.fromDegrees(96.799393, -43.598214999057824, 153.63925700000001, -9.2159219997013)\n * });\n * // Using custom tags in your template url.\n * var custom = new Cesium.UrlTemplateImageryProvider({\n *    url : 'https://yoururl/{Time}/{z}/{y}/{x}.png',\n *    customTags : {\n *        Time: function(imageryProvider, x, y, level) {\n *            return '20171231'\n *        }\n *    }\n * });\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n */\nfunction UrlTemplateImageryProvider(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options)) {\n    throw new DeveloperError(\"options is required.\");\n  }\n  if (!when.isPromise(options) && !defined(options.url)) {\n    throw new DeveloperError(\"options is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._errorEvent = new Event();\n\n  this._resource = undefined;\n  this._urlSchemeZeroPadding = undefined;\n  this._pickFeaturesResource = undefined;\n  this._tileWidth = undefined;\n  this._tileHeight = undefined;\n  this._maximumLevel = undefined;\n  this._minimumLevel = undefined;\n  this._tilingScheme = undefined;\n  this._rectangle = undefined;\n  this._tileDiscardPolicy = undefined;\n  this._credit = undefined;\n  this._hasAlphaChannel = undefined;\n  this._readyPromise = undefined;\n  this._tags = undefined;\n  this._pickFeaturesTags = undefined;\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link UrlTemplateImageryProvider#pickFeatures} will\n   * request the <code>options.pickFeaturesUrl</code> and attempt to interpret the features included in the response.  If false,\n   * {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n   * features) without communicating with the server.  Set this property to false if you know your data\n   * source does not support picking features or if you don't want this provider's features to be pickable.\n   * @type {Boolean}\n   * @default true\n   */\n  this.enablePickFeatures = true;\n\n  this.reinitialize(options);\n}\n\nObject.defineProperties(UrlTemplateImageryProvider.prototype, {\n  /**\n   * Gets the URL template to use to request tiles.  It has the following keywords:\n   * <ul>\n   *  <li> <code>{z}</code>: The level of the tile in the tiling scheme.  Level zero is the root of the quadtree pyramid.</li>\n   *  <li> <code>{x}</code>: The tile X coordinate in the tiling scheme, where 0 is the Westernmost tile.</li>\n   *  <li> <code>{y}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Northernmost tile.</li>\n   *  <li> <code>{s}</code>: One of the available subdomains, used to overcome browser limits on the number of simultaneous requests per host.</li>\n   *  <li> <code>{reverseX}</code>: The tile X coordinate in the tiling scheme, where 0 is the Easternmost tile.</li>\n   *  <li> <code>{reverseY}</code>: The tile Y coordinate in the tiling scheme, where 0 is the Southernmost tile.</li>\n   *  <li> <code>{reverseZ}</code>: The level of the tile in the tiling scheme, where level zero is the maximum level of the quadtree pyramid.  In order to use reverseZ, maximumLevel must be defined.</li>\n   *  <li> <code>{westDegrees}</code>: The Western edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{southDegrees}</code>: The Southern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{eastDegrees}</code>: The Eastern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{northDegrees}</code>: The Northern edge of the tile in geodetic degrees.</li>\n   *  <li> <code>{westProjected}</code>: The Western edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{southProjected}</code>: The Southern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{eastProjected}</code>: The Eastern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{northProjected}</code>: The Northern edge of the tile in projected coordinates of the tiling scheme.</li>\n   *  <li> <code>{width}</code>: The width of each tile in pixels.</li>\n   *  <li> <code>{height}</code>: The height of each tile in pixels.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    },\n  },\n\n  /**\n   * Gets the URL scheme zero padding for each tile coordinate. The format is '000' where each coordinate will be padded on\n   * the left with zeros to match the width of the passed string of zeros. e.g. Setting:\n   * urlSchemeZeroPadding : { '{x}' : '0000'}\n   * will cause an 'x' value of 12 to return the string '0012' for {x} in the generated URL.\n   * It has the following keywords:\n   * <ul>\n   *  <li> <code>{z}</code>: The zero padding for the level of the tile in the tiling scheme.</li>\n   *  <li> <code>{x}</code>: The zero padding for the tile X coordinate in the tiling scheme.</li>\n   *  <li> <code>{y}</code>: The zero padding for the the tile Y coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseX}</code>: The zero padding for the tile reverseX coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseY}</code>: The zero padding for the tile reverseY coordinate in the tiling scheme.</li>\n   *  <li> <code>{reverseZ}</code>: The zero padding for the reverseZ coordinate of the tile in the tiling scheme.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Object}\n   * @readonly\n   */\n  urlSchemeZeroPadding: {\n    get: function () {\n      return this._urlSchemeZeroPadding;\n    },\n  },\n\n  /**\n   * Gets the URL template to use to use to pick features.  If this property is not specified,\n   * {@link UrlTemplateImageryProvider#pickFeatures} will immediately return undefined, indicating no\n   * features picked.  The URL template supports all of the keywords supported by the\n   * {@link UrlTemplateImageryProvider#url} property, plus the following:\n   * <ul>\n   *     <li><code>{i}</code>: The pixel column (horizontal coordinate) of the picked position, where the Westernmost pixel is 0.</li>\n   *     <li><code>{j}</code>: The pixel row (vertical coordinate) of the picked position, where the Northernmost pixel is 0.</li>\n   *     <li><code>{reverseI}</code>: The pixel column (horizontal coordinate) of the picked position, where the Easternmost pixel is 0.</li>\n   *     <li><code>{reverseJ}</code>: The pixel row (vertical coordinate) of the picked position, where the Southernmost pixel is 0.</li>\n   *     <li><code>{longitudeDegrees}</code>: The longitude of the picked position in degrees.</li>\n   *     <li><code>{latitudeDegrees}</code>: The latitude of the picked position in degrees.</li>\n   *     <li><code>{longitudeProjected}</code>: The longitude of the picked position in the projected coordinates of the tiling scheme.</li>\n   *     <li><code>{latitudeProjected}</code>: The latitude of the picked position in the projected coordinates of the tiling scheme.</li>\n   *     <li><code>{format}</code>: The format in which to get feature information, as specified in the {@link GetFeatureInfoFormat}.</li>\n   * </ul>\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  pickFeaturesUrl: {\n    get: function () {\n      return this._pickFeaturesResource.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   * @default undefined\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   * @default 256\n   */\n  tileWidth: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\n          \"tileWidth must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   * @default 256\n   */\n  tileHeight: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\n          \"tileHeight must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested, or undefined if there is no limit.\n   * This function should not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   * @default undefined\n   */\n  maximumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\n          \"maximumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   * @default 0\n   */\n  minimumLevel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\n          \"minimumLevel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   * @default new WebMercatorTilingScheme()\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\n          \"tilingScheme must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   * @default tilingScheme.rectangle\n   */\n  rectangle: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\n          \"rectangle must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   * @default undefined\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\n          \"tileDiscardPolicy must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return defined(this._resource);\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   * @default undefined\n   */\n  credit: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\n          \"credit must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof UrlTemplateImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   * @default true\n   */\n  hasAlphaChannel: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\n          \"hasAlphaChannel must not be called before the imagery provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._hasAlphaChannel;\n    },\n  },\n});\n\n/**\n * Reinitializes this instance.  Reinitializing an instance already in use is supported, but it is not\n * recommended because existing tiles provided by the imagery provider will not be updated.\n *\n * @param {Promise.<Object>|Object} options Any of the options that may be passed to the {@link UrlTemplateImageryProvider} constructor.\n */\nUrlTemplateImageryProvider.prototype.reinitialize = function (options) {\n  var that = this;\n  that._readyPromise = when(options).then(function (properties) {\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(properties)) {\n      throw new DeveloperError(\"options is required.\");\n    }\n    if (!defined(properties.url)) {\n      throw new DeveloperError(\"options.url is required.\");\n    }\n    //>>includeEnd('debug');\n\n    var customTags = properties.customTags;\n    var allTags = combine(tags, customTags);\n    var allPickFeaturesTags = combine(pickFeaturesTags, customTags);\n    var resource = Resource.createIfNeeded(properties.url);\n    var pickFeaturesResource = Resource.createIfNeeded(\n      properties.pickFeaturesUrl\n    );\n\n    that.enablePickFeatures = defaultValue(\n      properties.enablePickFeatures,\n      that.enablePickFeatures\n    );\n    that._urlSchemeZeroPadding = defaultValue(\n      properties.urlSchemeZeroPadding,\n      that.urlSchemeZeroPadding\n    );\n    that._tileDiscardPolicy = properties.tileDiscardPolicy;\n    that._getFeatureInfoFormats = properties.getFeatureInfoFormats;\n\n    that._subdomains = properties.subdomains;\n    if (Array.isArray(that._subdomains)) {\n      that._subdomains = that._subdomains.slice();\n    } else if (defined(that._subdomains) && that._subdomains.length > 0) {\n      that._subdomains = that._subdomains.split(\"\");\n    } else {\n      that._subdomains = [\"a\", \"b\", \"c\"];\n    }\n\n    that._tileWidth = defaultValue(properties.tileWidth, 256);\n    that._tileHeight = defaultValue(properties.tileHeight, 256);\n    that._minimumLevel = defaultValue(properties.minimumLevel, 0);\n    that._maximumLevel = properties.maximumLevel;\n    that._tilingScheme = defaultValue(\n      properties.tilingScheme,\n      new WebMercatorTilingScheme({ ellipsoid: properties.ellipsoid })\n    );\n    that._rectangle = defaultValue(\n      properties.rectangle,\n      that._tilingScheme.rectangle\n    );\n    that._rectangle = Rectangle.intersection(\n      that._rectangle,\n      that._tilingScheme.rectangle\n    );\n    that._hasAlphaChannel = defaultValue(properties.hasAlphaChannel, true);\n\n    var credit = properties.credit;\n    if (typeof credit === \"string\") {\n      credit = new Credit(credit);\n    }\n    that._credit = credit;\n\n    that._resource = resource;\n    that._tags = allTags;\n    that._pickFeaturesResource = pickFeaturesResource;\n    that._pickFeaturesTags = allPickFeaturesTags;\n\n    return true;\n  });\n};\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nUrlTemplateImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this.ready) {\n    throw new DeveloperError(\n      \"getTileCredits must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link UrlTemplateImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n */\nUrlTemplateImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this.ready) {\n    throw new DeveloperError(\n      \"requestImage must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n  return ImageryProvider.loadImage(\n    this,\n    buildImageResource(this, x, y, level, request)\n  );\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link ImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\nUrlTemplateImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this.ready) {\n    throw new DeveloperError(\n      \"pickFeatures must not be called before the imagery provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  if (\n    !this.enablePickFeatures ||\n    !defined(this._pickFeaturesResource) ||\n    this._getFeatureInfoFormats.length === 0\n  ) {\n    return undefined;\n  }\n\n  var formatIndex = 0;\n\n  var that = this;\n\n  function handleResponse(format, data) {\n    return format.callback(data);\n  }\n\n  function doRequest() {\n    if (formatIndex >= that._getFeatureInfoFormats.length) {\n      // No valid formats, so no features picked.\n      return when([]);\n    }\n\n    var format = that._getFeatureInfoFormats[formatIndex];\n    var resource = buildPickFeaturesResource(\n      that,\n      x,\n      y,\n      level,\n      longitude,\n      latitude,\n      format.format\n    );\n\n    ++formatIndex;\n\n    if (format.type === \"json\") {\n      return resource.fetchJson().then(format.callback).otherwise(doRequest);\n    } else if (format.type === \"xml\") {\n      return resource.fetchXML().then(format.callback).otherwise(doRequest);\n    } else if (format.type === \"text\" || format.type === \"html\") {\n      return resource.fetchText().then(format.callback).otherwise(doRequest);\n    }\n    return resource\n      .fetch({\n        responseType: format.format,\n      })\n      .then(handleResponse.bind(undefined, format))\n      .otherwise(doRequest);\n  }\n\n  return doRequest();\n};\n\nvar degreesScratchComputed = false;\nvar degreesScratch = new Rectangle();\nvar projectedScratchComputed = false;\nvar projectedScratch = new Rectangle();\n\nfunction buildImageResource(imageryProvider, x, y, level, request) {\n  degreesScratchComputed = false;\n  projectedScratchComputed = false;\n\n  var resource = imageryProvider._resource;\n  var url = resource.getUrlComponent(true);\n  var allTags = imageryProvider._tags;\n  var templateValues = {};\n\n  var match = url.match(templateRegex);\n  if (defined(match)) {\n    match.forEach(function (tag) {\n      var key = tag.substring(1, tag.length - 1); //strip {}\n      if (defined(allTags[key])) {\n        templateValues[key] = allTags[key](imageryProvider, x, y, level);\n      }\n    });\n  }\n\n  return resource.getDerivedResource({\n    request: request,\n    templateValues: templateValues,\n  });\n}\n\nvar ijScratchComputed = false;\nvar ijScratch = new Cartesian2();\nvar longitudeLatitudeProjectedScratchComputed = false;\n\nfunction buildPickFeaturesResource(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format\n) {\n  degreesScratchComputed = false;\n  projectedScratchComputed = false;\n  ijScratchComputed = false;\n  longitudeLatitudeProjectedScratchComputed = false;\n\n  var resource = imageryProvider._pickFeaturesResource;\n  var url = resource.getUrlComponent(true);\n  var allTags = imageryProvider._pickFeaturesTags;\n  var templateValues = {};\n  var match = url.match(templateRegex);\n  if (defined(match)) {\n    match.forEach(function (tag) {\n      var key = tag.substring(1, tag.length - 1); //strip {}\n      if (defined(allTags[key])) {\n        templateValues[key] = allTags[key](\n          imageryProvider,\n          x,\n          y,\n          level,\n          longitude,\n          latitude,\n          format\n        );\n      }\n    });\n  }\n\n  return resource.getDerivedResource({\n    templateValues: templateValues,\n  });\n}\n\nfunction padWithZerosIfNecessary(imageryProvider, key, value) {\n  if (\n    imageryProvider &&\n    imageryProvider.urlSchemeZeroPadding &&\n    imageryProvider.urlSchemeZeroPadding.hasOwnProperty(key)\n  ) {\n    var paddingTemplate = imageryProvider.urlSchemeZeroPadding[key];\n    if (typeof paddingTemplate === \"string\") {\n      var paddingTemplateWidth = paddingTemplate.length;\n      if (paddingTemplateWidth > 1) {\n        value =\n          value.length >= paddingTemplateWidth\n            ? value\n            : new Array(\n                paddingTemplateWidth - value.toString().length + 1\n              ).join(\"0\") + value;\n      }\n    }\n  }\n  return value;\n}\n\nfunction xTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{x}\", x);\n}\n\nfunction reverseXTag(imageryProvider, x, y, level) {\n  var reverseX =\n    imageryProvider.tilingScheme.getNumberOfXTilesAtLevel(level) - x - 1;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseX}\", reverseX);\n}\n\nfunction yTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{y}\", y);\n}\n\nfunction reverseYTag(imageryProvider, x, y, level) {\n  var reverseY =\n    imageryProvider.tilingScheme.getNumberOfYTilesAtLevel(level) - y - 1;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseY}\", reverseY);\n}\n\nfunction reverseZTag(imageryProvider, x, y, level) {\n  var maximumLevel = imageryProvider.maximumLevel;\n  var reverseZ =\n    defined(maximumLevel) && level < maximumLevel\n      ? maximumLevel - level - 1\n      : level;\n  return padWithZerosIfNecessary(imageryProvider, \"{reverseZ}\", reverseZ);\n}\n\nfunction zTag(imageryProvider, x, y, level) {\n  return padWithZerosIfNecessary(imageryProvider, \"{z}\", level);\n}\n\nfunction sTag(imageryProvider, x, y, level) {\n  var index = (x + y + level) % imageryProvider._subdomains.length;\n  return imageryProvider._subdomains[index];\n}\n\nfunction computeDegrees(imageryProvider, x, y, level) {\n  if (degreesScratchComputed) {\n    return;\n  }\n\n  imageryProvider.tilingScheme.tileXYToRectangle(x, y, level, degreesScratch);\n  degreesScratch.west = CesiumMath.toDegrees(degreesScratch.west);\n  degreesScratch.south = CesiumMath.toDegrees(degreesScratch.south);\n  degreesScratch.east = CesiumMath.toDegrees(degreesScratch.east);\n  degreesScratch.north = CesiumMath.toDegrees(degreesScratch.north);\n\n  degreesScratchComputed = true;\n}\n\nfunction westDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.west;\n}\n\nfunction southDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.south;\n}\n\nfunction eastDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.east;\n}\n\nfunction northDegreesTag(imageryProvider, x, y, level) {\n  computeDegrees(imageryProvider, x, y, level);\n  return degreesScratch.north;\n}\n\nfunction computeProjected(imageryProvider, x, y, level) {\n  if (projectedScratchComputed) {\n    return;\n  }\n\n  imageryProvider.tilingScheme.tileXYToNativeRectangle(\n    x,\n    y,\n    level,\n    projectedScratch\n  );\n\n  projectedScratchComputed = true;\n}\n\nfunction westProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.west;\n}\n\nfunction southProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.south;\n}\n\nfunction eastProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.east;\n}\n\nfunction northProjectedTag(imageryProvider, x, y, level) {\n  computeProjected(imageryProvider, x, y, level);\n  return projectedScratch.north;\n}\n\nfunction widthTag(imageryProvider, x, y, level) {\n  return imageryProvider.tileWidth;\n}\n\nfunction heightTag(imageryProvider, x, y, level) {\n  return imageryProvider.tileHeight;\n}\n\nfunction iTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return ijScratch.x;\n}\n\nfunction jTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return ijScratch.y;\n}\n\nfunction reverseITag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format\n) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return imageryProvider.tileWidth - ijScratch.x - 1;\n}\n\nfunction reverseJTag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format\n) {\n  computeIJ(imageryProvider, x, y, level, longitude, latitude);\n  return imageryProvider.tileHeight - ijScratch.y - 1;\n}\n\nvar rectangleScratch = new Rectangle();\nvar longitudeLatitudeProjectedScratch = new Cartesian3();\n\nfunction computeIJ(imageryProvider, x, y, level, longitude, latitude, format) {\n  if (ijScratchComputed) {\n    return;\n  }\n\n  computeLongitudeLatitudeProjected(\n    imageryProvider,\n    x,\n    y,\n    level,\n    longitude,\n    latitude\n  );\n  var projected = longitudeLatitudeProjectedScratch;\n\n  var rectangle = imageryProvider.tilingScheme.tileXYToNativeRectangle(\n    x,\n    y,\n    level,\n    rectangleScratch\n  );\n  ijScratch.x =\n    ((imageryProvider.tileWidth * (projected.x - rectangle.west)) /\n      rectangle.width) |\n    0;\n  ijScratch.y =\n    ((imageryProvider.tileHeight * (rectangle.north - projected.y)) /\n      rectangle.height) |\n    0;\n  ijScratchComputed = true;\n}\n\nfunction longitudeDegreesTag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format\n) {\n  return CesiumMath.toDegrees(longitude);\n}\n\nfunction latitudeDegreesTag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format\n) {\n  return CesiumMath.toDegrees(latitude);\n}\n\nfunction longitudeProjectedTag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format\n) {\n  computeLongitudeLatitudeProjected(\n    imageryProvider,\n    x,\n    y,\n    level,\n    longitude,\n    latitude\n  );\n  return longitudeLatitudeProjectedScratch.x;\n}\n\nfunction latitudeProjectedTag(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format\n) {\n  computeLongitudeLatitudeProjected(\n    imageryProvider,\n    x,\n    y,\n    level,\n    longitude,\n    latitude\n  );\n  return longitudeLatitudeProjectedScratch.y;\n}\n\nvar cartographicScratch = new Cartographic();\n\nfunction computeLongitudeLatitudeProjected(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  format\n) {\n  if (longitudeLatitudeProjectedScratchComputed) {\n    return;\n  }\n\n  if (imageryProvider.tilingScheme.projection instanceof GeographicProjection) {\n    longitudeLatitudeProjectedScratch.x = CesiumMath.toDegrees(longitude);\n    longitudeLatitudeProjectedScratch.y = CesiumMath.toDegrees(latitude);\n  } else {\n    var cartographic = cartographicScratch;\n    cartographic.longitude = longitude;\n    cartographic.latitude = latitude;\n    imageryProvider.tilingScheme.projection.project(\n      cartographic,\n      longitudeLatitudeProjectedScratch\n    );\n  }\n\n  longitudeLatitudeProjectedScratchComputed = true;\n}\n\nfunction formatTag(imageryProvider, x, y, level, longitude, latitude, format) {\n  return format;\n}\nexport default UrlTemplateImageryProvider;\n"]},"metadata":{},"sourceType":"module"}