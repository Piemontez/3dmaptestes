{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * @typedef {Object} PointGraphics.ConstructorOptions\n *\n * Initialization options for the PointGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the point.\n * @property {Property | number} [pixelSize=1] A numeric Property specifying the size in pixels.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | Color} [color=Color.WHITE] A Property specifying the {@link Color} of the point.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=0] A numeric Property specifying the the outline width in pixels.\n * @property {Property | NearFarScalar} [scaleByDistance] A {@link NearFarScalar} Property used to scale the point based on distance.\n * @property {Property | NearFarScalar} [translucencyByDistance] A {@link NearFarScalar} Property used to set translucency based on distance from the camera.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this point will be displayed.\n * @property {Property | number} [disableDepthTestDistance] A Property specifying the distance from the camera at which to disable the depth test to.\n */\n\n/**\n * Describes a graphical point located at the position of the containing {@link Entity}.\n *\n * @alias PointGraphics\n * @constructor\n *\n * @param {PointGraphics.ConstructorOptions} [options] Object describing initialization options\n */\n\nfunction PointGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._pixelSize = undefined;\n  this._pixelSizeSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._scaleByDistance = undefined;\n  this._scaleByDistanceSubscription = undefined;\n  this._translucencyByDistance = undefined;\n  this._translucencyByDistanceSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._disableDepthTestDistanceSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PointGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PointGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the point.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the size in pixels.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1\n   */\n  pixelSize: createPropertyDescriptor(\"pixelSize\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the point.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the the outline width in pixels.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the {@link NearFarScalar} Property used to scale the point based on distance.\n   * If undefined, a constant size is used.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  scaleByDistance: createPropertyDescriptor(\"scaleByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the translucency of the point based on the distance from the camera.\n   * A point's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the points's translucency remains clamped to the nearest bound.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  translucencyByDistance: createPropertyDescriptor(\"translucencyByDistance\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this point will be displayed.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\"),\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  disableDepthTestDistance: createPropertyDescriptor(\"disableDepthTestDistance\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {PointGraphics} [result] The object onto which to store the result.\n * @returns {PointGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nPointGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PointGraphics(this);\n  }\n\n  result.show = this.show;\n  result.pixelSize = this.pixelSize;\n  result.heightReference = this.heightReference;\n  result.color = this.color;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.scaleByDistance = this.scaleByDistance;\n  result.translucencyByDistance = this._translucencyByDistance;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.disableDepthTestDistance = this.disableDepthTestDistance;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PointGraphics} source The object to be merged into this object.\n */\n\n\nPointGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.pixelSize = defaultValue(this.pixelSize, source.pixelSize);\n  this.heightReference = defaultValue(this.heightReference, source.heightReference);\n  this.color = defaultValue(this.color, source.color);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.scaleByDistance = defaultValue(this.scaleByDistance, source.scaleByDistance);\n  this.translucencyByDistance = defaultValue(this._translucencyByDistance, source.translucencyByDistance);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n  this.disableDepthTestDistance = defaultValue(this.disableDepthTestDistance, source.disableDepthTestDistance);\n};\n\nexport default PointGraphics;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/DataSources/PointGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createPropertyDescriptor","PointGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_pixelSize","_pixelSizeSubscription","_heightReference","_heightReferenceSubscription","_color","_colorSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_scaleByDistance","_scaleByDistanceSubscription","_translucencyByDistance","_translucencyByDistanceSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","_disableDepthTestDistance","_disableDepthTestDistanceSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","pixelSize","heightReference","color","outlineColor","outlineWidth","scaleByDistance","translucencyByDistance","distanceDisplayCondition","disableDepthTestDistance","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} PointGraphics.ConstructorOptions\n *\n * Initialization options for the PointGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the point.\n * @property {Property | number} [pixelSize=1] A numeric Property specifying the size in pixels.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | Color} [color=Color.WHITE] A Property specifying the {@link Color} of the point.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=0] A numeric Property specifying the the outline width in pixels.\n * @property {Property | NearFarScalar} [scaleByDistance] A {@link NearFarScalar} Property used to scale the point based on distance.\n * @property {Property | NearFarScalar} [translucencyByDistance] A {@link NearFarScalar} Property used to set translucency based on distance from the camera.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this point will be displayed.\n * @property {Property | number} [disableDepthTestDistance] A Property specifying the distance from the camera at which to disable the depth test to.\n */\n\n/**\n * Describes a graphical point located at the position of the containing {@link Entity}.\n *\n * @alias PointGraphics\n * @constructor\n *\n * @param {PointGraphics.ConstructorOptions} [options] Object describing initialization options\n */\nfunction PointGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._pixelSize = undefined;\n  this._pixelSizeSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._scaleByDistance = undefined;\n  this._scaleByDistanceSubscription = undefined;\n  this._translucencyByDistance = undefined;\n  this._translucencyByDistanceSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._disableDepthTestDistanceSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PointGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PointGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the point.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the size in pixels.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1\n   */\n  pixelSize: createPropertyDescriptor(\"pixelSize\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the point.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the the outline width in pixels.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the {@link NearFarScalar} Property used to scale the point based on distance.\n   * If undefined, a constant size is used.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  scaleByDistance: createPropertyDescriptor(\"scaleByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the translucency of the point based on the distance from the camera.\n   * A point's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the points's translucency remains clamped to the nearest bound.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  translucencyByDistance: createPropertyDescriptor(\"translucencyByDistance\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this point will be displayed.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  disableDepthTestDistance: createPropertyDescriptor(\n    \"disableDepthTestDistance\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PointGraphics} [result] The object onto which to store the result.\n * @returns {PointGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPointGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PointGraphics(this);\n  }\n  result.show = this.show;\n  result.pixelSize = this.pixelSize;\n  result.heightReference = this.heightReference;\n  result.color = this.color;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.scaleByDistance = this.scaleByDistance;\n  result.translucencyByDistance = this._translucencyByDistance;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.disableDepthTestDistance = this.disableDepthTestDistance;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PointGraphics} source The object to be merged into this object.\n */\nPointGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.pixelSize = defaultValue(this.pixelSize, source.pixelSize);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.color = defaultValue(this.color, source.color);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.scaleByDistance = defaultValue(\n    this.scaleByDistance,\n    source.scaleByDistance\n  );\n  this.translucencyByDistance = defaultValue(\n    this._translucencyByDistance,\n    source.translucencyByDistance\n  );\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.disableDepthTestDistance = defaultValue(\n    this.disableDepthTestDistance,\n    source.disableDepthTestDistance\n  );\n};\nexport default PointGraphics;\n"]},"metadata":{},"sourceType":"module"}