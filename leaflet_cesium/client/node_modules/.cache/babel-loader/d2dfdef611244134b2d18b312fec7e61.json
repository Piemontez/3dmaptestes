{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport FeatureDetection from \"./FeatureDetection.js\";\nimport CesiumMath from \"./Math.js\";\n\nfunction hue2rgb(m1, m2, h) {\n  if (h < 0) {\n    h += 1;\n  }\n\n  if (h > 1) {\n    h -= 1;\n  }\n\n  if (h * 6 < 1) {\n    return m1 + (m2 - m1) * 6 * h;\n  }\n\n  if (h * 2 < 1) {\n    return m2;\n  }\n\n  if (h * 3 < 2) {\n    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n  }\n\n  return m1;\n}\n/**\n * A color, specified using red, green, blue, and alpha values,\n * which range from <code>0</code> (no intensity) to <code>1.0</code> (full intensity).\n * @param {Number} [red=1.0] The red component.\n * @param {Number} [green=1.0] The green component.\n * @param {Number} [blue=1.0] The blue component.\n * @param {Number} [alpha=1.0] The alpha component.\n *\n * @constructor\n * @alias Color\n *\n * @see Packable\n */\n\n\nfunction Color(red, green, blue, alpha) {\n  /**\n   * The red component.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.red = defaultValue(red, 1.0);\n  /**\n   * The green component.\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.green = defaultValue(green, 1.0);\n  /**\n   * The blue component.\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.blue = defaultValue(blue, 1.0);\n  /**\n   * The alpha component.\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.alpha = defaultValue(alpha, 1.0);\n}\n/**\n * Creates a Color instance from a {@link Cartesian4}. <code>x</code>, <code>y</code>, <code>z</code>,\n * and <code>w</code> map to <code>red</code>, <code>green</code>, <code>blue</code>, and <code>alpha</code>, respectively.\n *\n * @param {Cartesian4} cartesian The source cartesian.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\n\n\nColor.fromCartesian4 = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Color(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\n  }\n\n  result.red = cartesian.x;\n  result.green = cartesian.y;\n  result.blue = cartesian.z;\n  result.alpha = cartesian.w;\n  return result;\n};\n/**\n * Creates a new Color specified using red, green, blue, and alpha values\n * that are in the range of 0 to 255, converting them internally to a range of 0.0 to 1.0.\n *\n * @param {Number} [red=255] The red component.\n * @param {Number} [green=255] The green component.\n * @param {Number} [blue=255] The blue component.\n * @param {Number} [alpha=255] The alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\n\n\nColor.fromBytes = function (red, green, blue, alpha, result) {\n  red = Color.byteToFloat(defaultValue(red, 255.0));\n  green = Color.byteToFloat(defaultValue(green, 255.0));\n  blue = Color.byteToFloat(defaultValue(blue, 255.0));\n  alpha = Color.byteToFloat(defaultValue(alpha, 255.0));\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n/**\n * Creates a new Color that has the same red, green, and blue components\n * of the specified color, but with the specified alpha value.\n *\n * @param {Color} color The base color\n * @param {Number} alpha The new alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n *\n * @example var translucentRed = Cesium.Color.fromAlpha(Cesium.Color.RED, 0.9);\n */\n\n\nColor.fromAlpha = function (color, alpha, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"alpha\", alpha); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Color(color.red, color.green, color.blue, alpha);\n  }\n\n  result.red = color.red;\n  result.green = color.green;\n  result.blue = color.blue;\n  result.alpha = alpha;\n  return result;\n};\n\nvar scratchArrayBuffer;\nvar scratchUint32Array;\nvar scratchUint8Array;\n\nif (FeatureDetection.supportsTypedArrays()) {\n  scratchArrayBuffer = new ArrayBuffer(4);\n  scratchUint32Array = new Uint32Array(scratchArrayBuffer);\n  scratchUint8Array = new Uint8Array(scratchArrayBuffer);\n}\n/**\n * Creates a new Color from a single numeric unsigned 32-bit RGBA value, using the endianness\n * of the system.\n *\n * @param {Number} rgba A single numeric unsigned 32-bit RGBA value.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object.\n *\n * @example\n * var color = Cesium.Color.fromRgba(0x67ADDFFF);\n *\n * @see Color#toRgba\n */\n\n\nColor.fromRgba = function (rgba, result) {\n  // scratchUint32Array and scratchUint8Array share an underlying array buffer\n  scratchUint32Array[0] = rgba;\n  return Color.fromBytes(scratchUint8Array[0], scratchUint8Array[1], scratchUint8Array[2], scratchUint8Array[3], result);\n};\n/**\n * Creates a Color instance from hue, saturation, and lightness.\n *\n * @param {Number} [hue=0] The hue angle 0...1\n * @param {Number} [saturation=0] The saturation value 0...1\n * @param {Number} [lightness=0] The lightness value 0...1\n * @param {Number} [alpha=1.0] The alpha component 0...1\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object.\n *\n * @see {@link http://www.w3.org/TR/css3-color/#hsl-color|CSS color values}\n */\n\n\nColor.fromHsl = function (hue, saturation, lightness, alpha, result) {\n  hue = defaultValue(hue, 0.0) % 1.0;\n  saturation = defaultValue(saturation, 0.0);\n  lightness = defaultValue(lightness, 0.0);\n  alpha = defaultValue(alpha, 1.0);\n  var red = lightness;\n  var green = lightness;\n  var blue = lightness;\n\n  if (saturation !== 0) {\n    var m2;\n\n    if (lightness < 0.5) {\n      m2 = lightness * (1 + saturation);\n    } else {\n      m2 = lightness + saturation - lightness * saturation;\n    }\n\n    var m1 = 2.0 * lightness - m2;\n    red = hue2rgb(m1, m2, hue + 1 / 3);\n    green = hue2rgb(m1, m2, hue);\n    blue = hue2rgb(m1, m2, hue - 1 / 3);\n  }\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n/**\n * Creates a random color using the provided options. For reproducible random colors, you should\n * call {@link CesiumMath#setRandomNumberSeed} once at the beginning of your application.\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Number} [options.red] If specified, the red component to use instead of a randomized value.\n * @param {Number} [options.minimumRed=0.0] The maximum red value to generate if none was specified.\n * @param {Number} [options.maximumRed=1.0] The minimum red value to generate if none was specified.\n * @param {Number} [options.green] If specified, the green component to use instead of a randomized value.\n * @param {Number} [options.minimumGreen=0.0] The maximum green value to generate if none was specified.\n * @param {Number} [options.maximumGreen=1.0] The minimum green value to generate if none was specified.\n * @param {Number} [options.blue] If specified, the blue component to use instead of a randomized value.\n * @param {Number} [options.minimumBlue=0.0] The maximum blue value to generate if none was specified.\n * @param {Number} [options.maximumBlue=1.0] The minimum blue value to generate if none was specified.\n * @param {Number} [options.alpha] If specified, the alpha component to use instead of a randomized value.\n * @param {Number} [options.minimumAlpha=0.0] The maximum alpha value to generate if none was specified.\n * @param {Number} [options.maximumAlpha=1.0] The minimum alpha value to generate if none was specified.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined.\n *\n * @exception {DeveloperError} minimumRed must be less than or equal to maximumRed.\n * @exception {DeveloperError} minimumGreen must be less than or equal to maximumGreen.\n * @exception {DeveloperError} minimumBlue must be less than or equal to maximumBlue.\n * @exception {DeveloperError} minimumAlpha must be less than or equal to maximumAlpha.\n *\n * @example\n * //Create a completely random color\n * var color = Cesium.Color.fromRandom();\n *\n * //Create a random shade of yellow.\n * var color = Cesium.Color.fromRandom({\n *     red : 1.0,\n *     green : 1.0,\n *     alpha : 1.0\n * });\n *\n * //Create a random bright color.\n * var color = Cesium.Color.fromRandom({\n *     minimumRed : 0.75,\n *     minimumGreen : 0.75,\n *     minimumBlue : 0.75,\n *     alpha : 1.0\n * });\n */\n\n\nColor.fromRandom = function (options, result) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var red = options.red;\n\n  if (!defined(red)) {\n    var minimumRed = defaultValue(options.minimumRed, 0);\n    var maximumRed = defaultValue(options.maximumRed, 1.0); //>>includeStart('debug', pragmas.debug);\n\n    Check.typeOf.number.lessThanOrEquals(\"minimumRed\", minimumRed, maximumRed); //>>includeEnd('debug');\n\n    red = minimumRed + CesiumMath.nextRandomNumber() * (maximumRed - minimumRed);\n  }\n\n  var green = options.green;\n\n  if (!defined(green)) {\n    var minimumGreen = defaultValue(options.minimumGreen, 0);\n    var maximumGreen = defaultValue(options.maximumGreen, 1.0); //>>includeStart('debug', pragmas.debug);\n\n    Check.typeOf.number.lessThanOrEquals(\"minimumGreen\", minimumGreen, maximumGreen); //>>includeEnd('debug');\n\n    green = minimumGreen + CesiumMath.nextRandomNumber() * (maximumGreen - minimumGreen);\n  }\n\n  var blue = options.blue;\n\n  if (!defined(blue)) {\n    var minimumBlue = defaultValue(options.minimumBlue, 0);\n    var maximumBlue = defaultValue(options.maximumBlue, 1.0); //>>includeStart('debug', pragmas.debug);\n\n    Check.typeOf.number.lessThanOrEquals(\"minimumBlue\", minimumBlue, maximumBlue); //>>includeEnd('debug');\n\n    blue = minimumBlue + CesiumMath.nextRandomNumber() * (maximumBlue - minimumBlue);\n  }\n\n  var alpha = options.alpha;\n\n  if (!defined(alpha)) {\n    var minimumAlpha = defaultValue(options.minimumAlpha, 0);\n    var maximumAlpha = defaultValue(options.maximumAlpha, 1.0); //>>includeStart('debug', pragmas.debug);\n\n    Check.typeOf.number.lessThanOrEquals(\"minumumAlpha\", minimumAlpha, maximumAlpha); //>>includeEnd('debug');\n\n    alpha = minimumAlpha + CesiumMath.nextRandomNumber() * (maximumAlpha - minimumAlpha);\n  }\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n}; //#rgba\n\n\nvar rgbaMatcher = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i; //#rrggbbaa\n\nvar rrggbbaaMatcher = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i; //rgb(), rgba(), or rgb%()\n\nvar rgbParenthesesMatcher = /^rgba?\\(\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)(?:\\s*,\\s*([0-9.]+))?\\s*\\)$/i; //hsl() or hsla()\n\nvar hslParenthesesMatcher = /^hsla?\\(\\s*([0-9.]+)\\s*,\\s*([0-9.]+%)\\s*,\\s*([0-9.]+%)(?:\\s*,\\s*([0-9.]+))?\\s*\\)$/i;\n/**\n * Creates a Color instance from a CSS color value.\n *\n * @param {String} color The CSS color value in #rgb, #rgba, #rrggbb, #rrggbbaa, rgb(), rgba(), hsl(), or hsla() format.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object, or undefined if the string was not a valid CSS color.\n *\n *\n * @example\n * var cesiumBlue = Cesium.Color.fromCssColorString('#67ADDF');\n * var green = Cesium.Color.fromCssColorString('green');\n *\n * @see {@link http://www.w3.org/TR/css3-color|CSS color values}\n */\n\nColor.fromCssColorString = function (color, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"color\", color); //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Color();\n  } // Remove all whitespaces from the color string\n\n\n  color = color.replace(/\\s/g, \"\");\n  var namedColor = Color[color.toUpperCase()];\n\n  if (defined(namedColor)) {\n    Color.clone(namedColor, result);\n    return result;\n  }\n\n  var matches = rgbaMatcher.exec(color);\n\n  if (matches !== null) {\n    result.red = parseInt(matches[1], 16) / 15;\n    result.green = parseInt(matches[2], 16) / 15.0;\n    result.blue = parseInt(matches[3], 16) / 15.0;\n    result.alpha = parseInt(defaultValue(matches[4], \"f\"), 16) / 15.0;\n    return result;\n  }\n\n  matches = rrggbbaaMatcher.exec(color);\n\n  if (matches !== null) {\n    result.red = parseInt(matches[1], 16) / 255.0;\n    result.green = parseInt(matches[2], 16) / 255.0;\n    result.blue = parseInt(matches[3], 16) / 255.0;\n    result.alpha = parseInt(defaultValue(matches[4], \"ff\"), 16) / 255.0;\n    return result;\n  }\n\n  matches = rgbParenthesesMatcher.exec(color);\n\n  if (matches !== null) {\n    result.red = parseFloat(matches[1]) / (\"%\" === matches[1].substr(-1) ? 100.0 : 255.0);\n    result.green = parseFloat(matches[2]) / (\"%\" === matches[2].substr(-1) ? 100.0 : 255.0);\n    result.blue = parseFloat(matches[3]) / (\"%\" === matches[3].substr(-1) ? 100.0 : 255.0);\n    result.alpha = parseFloat(defaultValue(matches[4], \"1.0\"));\n    return result;\n  }\n\n  matches = hslParenthesesMatcher.exec(color);\n\n  if (matches !== null) {\n    return Color.fromHsl(parseFloat(matches[1]) / 360.0, parseFloat(matches[2]) / 100.0, parseFloat(matches[3]) / 100.0, parseFloat(defaultValue(matches[4], \"1.0\")), result);\n  }\n\n  result = undefined;\n  return result;\n};\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\n\n\nColor.packedLength = 4;\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Color} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\n\nColor.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value.red;\n  array[startingIndex++] = value.green;\n  array[startingIndex++] = value.blue;\n  array[startingIndex] = value.alpha;\n  return array;\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Color} [result] The object into which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\n\n\nColor.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array); //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new Color();\n  }\n\n  result.red = array[startingIndex++];\n  result.green = array[startingIndex++];\n  result.blue = array[startingIndex++];\n  result.alpha = array[startingIndex];\n  return result;\n};\n/**\n * Converts a 'byte' color component in the range of 0 to 255 into\n * a 'float' color component in the range of 0 to 1.0.\n *\n * @param {Number} number The number to be converted.\n * @returns {Number} The converted number.\n */\n\n\nColor.byteToFloat = function (number) {\n  return number / 255.0;\n};\n/**\n * Converts a 'float' color component in the range of 0 to 1.0 into\n * a 'byte' color component in the range of 0 to 255.\n *\n * @param {Number} number The number to be converted.\n * @returns {Number} The converted number.\n */\n\n\nColor.floatToByte = function (number) {\n  return number === 1.0 ? 255.0 : number * 256.0 | 0;\n};\n/**\n * Duplicates a Color.\n *\n * @param {Color} color The Color to duplicate.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined. (Returns undefined if color is undefined)\n */\n\n\nColor.clone = function (color, result) {\n  if (!defined(color)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new Color(color.red, color.green, color.blue, color.alpha);\n  }\n\n  result.red = color.red;\n  result.green = color.green;\n  result.blue = color.blue;\n  result.alpha = color.alpha;\n  return result;\n};\n/**\n * Returns true if the first Color equals the second color.\n *\n * @param {Color} left The first Color to compare for equality.\n * @param {Color} right The second Color to compare for equality.\n * @returns {Boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\n */\n\n\nColor.equals = function (left, right) {\n  return left === right || //\n  defined(left) && //\n  defined(right) && //\n  left.red === right.red && //\n  left.green === right.green && //\n  left.blue === right.blue && //\n  left.alpha === right.alpha;\n};\n/**\n * @private\n */\n\n\nColor.equalsArray = function (color, array, offset) {\n  return color.red === array[offset] && color.green === array[offset + 1] && color.blue === array[offset + 2] && color.alpha === array[offset + 3];\n};\n/**\n * Returns a duplicate of a Color instance.\n *\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined.\n */\n\n\nColor.prototype.clone = function (result) {\n  return Color.clone(this, result);\n};\n/**\n * Returns true if this Color equals other.\n *\n * @param {Color} other The Color to compare for equality.\n * @returns {Boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\n */\n\n\nColor.prototype.equals = function (other) {\n  return Color.equals(this, other);\n};\n/**\n * Returns <code>true</code> if this Color equals other componentwise within the specified epsilon.\n *\n * @param {Color} other The Color to compare for equality.\n * @param {Number} [epsilon=0.0] The epsilon to use for equality testing.\n * @returns {Boolean} <code>true</code> if the Colors are equal within the specified epsilon; otherwise, <code>false</code>.\n */\n\n\nColor.prototype.equalsEpsilon = function (other, epsilon) {\n  return this === other || //\n  defined(other) && //\n  Math.abs(this.red - other.red) <= epsilon && //\n  Math.abs(this.green - other.green) <= epsilon && //\n  Math.abs(this.blue - other.blue) <= epsilon && //\n  Math.abs(this.alpha - other.alpha) <= epsilon;\n};\n/**\n * Creates a string representing this Color in the format '(red, green, blue, alpha)'.\n *\n * @returns {String} A string representing this Color in the format '(red, green, blue, alpha)'.\n */\n\n\nColor.prototype.toString = function () {\n  return \"(\" + this.red + \", \" + this.green + \", \" + this.blue + \", \" + this.alpha + \")\";\n};\n/**\n * Creates a string containing the CSS color value for this color.\n *\n * @returns {String} The CSS equivalent of this color.\n *\n * @see {@link http://www.w3.org/TR/css3-color/#rgba-color|CSS RGB or RGBA color values}\n */\n\n\nColor.prototype.toCssColorString = function () {\n  var red = Color.floatToByte(this.red);\n  var green = Color.floatToByte(this.green);\n  var blue = Color.floatToByte(this.blue);\n\n  if (this.alpha === 1) {\n    return \"rgb(\" + red + \",\" + green + \",\" + blue + \")\";\n  }\n\n  return \"rgba(\" + red + \",\" + green + \",\" + blue + \",\" + this.alpha + \")\";\n};\n/**\n * Creates a string containing CSS hex string color value for this color.\n *\n * @returns {String} The CSS hex string equivalent of this color.\n */\n\n\nColor.prototype.toCssHexString = function () {\n  var r = Color.floatToByte(this.red).toString(16);\n\n  if (r.length < 2) {\n    r = \"0\" + r;\n  }\n\n  var g = Color.floatToByte(this.green).toString(16);\n\n  if (g.length < 2) {\n    g = \"0\" + g;\n  }\n\n  var b = Color.floatToByte(this.blue).toString(16);\n\n  if (b.length < 2) {\n    b = \"0\" + b;\n  }\n\n  if (this.alpha < 1) {\n    var hexAlpha = Color.floatToByte(this.alpha).toString(16);\n\n    if (hexAlpha.length < 2) {\n      hexAlpha = \"0\" + hexAlpha;\n    }\n\n    return \"#\" + r + g + b + hexAlpha;\n  }\n\n  return \"#\" + r + g + b;\n};\n/**\n * Converts this color to an array of red, green, blue, and alpha values\n * that are in the range of 0 to 255.\n *\n * @param {Number[]} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {Number[]} The modified result parameter or a new instance if result was undefined.\n */\n\n\nColor.prototype.toBytes = function (result) {\n  var red = Color.floatToByte(this.red);\n  var green = Color.floatToByte(this.green);\n  var blue = Color.floatToByte(this.blue);\n  var alpha = Color.floatToByte(this.alpha);\n\n  if (!defined(result)) {\n    return [red, green, blue, alpha];\n  }\n\n  result[0] = red;\n  result[1] = green;\n  result[2] = blue;\n  result[3] = alpha;\n  return result;\n};\n/**\n * Converts this color to a single numeric unsigned 32-bit RGBA value, using the endianness\n * of the system.\n *\n * @returns {Number} A single numeric unsigned 32-bit RGBA value.\n *\n *\n * @example\n * var rgba = Cesium.Color.BLUE.toRgba();\n *\n * @see Color.fromRgba\n */\n\n\nColor.prototype.toRgba = function () {\n  // scratchUint32Array and scratchUint8Array share an underlying array buffer\n  scratchUint8Array[0] = Color.floatToByte(this.red);\n  scratchUint8Array[1] = Color.floatToByte(this.green);\n  scratchUint8Array[2] = Color.floatToByte(this.blue);\n  scratchUint8Array[3] = Color.floatToByte(this.alpha);\n  return scratchUint32Array[0];\n};\n/**\n * Brightens this color by the provided magnitude.\n *\n * @param {Number} magnitude A positive number indicating the amount to brighten.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n *\n * @example\n * var brightBlue = Cesium.Color.BLUE.brighten(0.5, new Cesium.Color());\n */\n\n\nColor.prototype.brighten = function (magnitude, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"magnitude\", magnitude);\n  Check.typeOf.number.greaterThanOrEquals(\"magnitude\", magnitude, 0.0);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  magnitude = 1.0 - magnitude;\n  result.red = 1.0 - (1.0 - this.red) * magnitude;\n  result.green = 1.0 - (1.0 - this.green) * magnitude;\n  result.blue = 1.0 - (1.0 - this.blue) * magnitude;\n  result.alpha = this.alpha;\n  return result;\n};\n/**\n * Darkens this color by the provided magnitude.\n *\n * @param {Number} magnitude A positive number indicating the amount to darken.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n *\n * @example\n * var darkBlue = Cesium.Color.BLUE.darken(0.5, new Cesium.Color());\n */\n\n\nColor.prototype.darken = function (magnitude, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"magnitude\", magnitude);\n  Check.typeOf.number.greaterThanOrEquals(\"magnitude\", magnitude, 0.0);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  magnitude = 1.0 - magnitude;\n  result.red = this.red * magnitude;\n  result.green = this.green * magnitude;\n  result.blue = this.blue * magnitude;\n  result.alpha = this.alpha;\n  return result;\n};\n/**\n * Creates a new Color that has the same red, green, and blue components\n * as this Color, but with the specified alpha value.\n *\n * @param {Number} alpha The new alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n *\n * @example var translucentRed = Cesium.Color.RED.withAlpha(0.9);\n */\n\n\nColor.prototype.withAlpha = function (alpha, result) {\n  return Color.fromAlpha(this, alpha, result);\n};\n/**\n * Computes the componentwise sum of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\n\n\nColor.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result.red = left.red + right.red;\n  result.green = left.green + right.green;\n  result.blue = left.blue + right.blue;\n  result.alpha = left.alpha + right.alpha;\n  return result;\n};\n/**\n * Computes the componentwise difference of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\n\n\nColor.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result.red = left.red - right.red;\n  result.green = left.green - right.green;\n  result.blue = left.blue - right.blue;\n  result.alpha = left.alpha - right.alpha;\n  return result;\n};\n/**\n * Computes the componentwise product of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\n\n\nColor.multiply = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result.red = left.red * right.red;\n  result.green = left.green * right.green;\n  result.blue = left.blue * right.blue;\n  result.alpha = left.alpha * right.alpha;\n  return result;\n};\n/**\n * Computes the componentwise quotient of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\n\n\nColor.divide = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result.red = left.red / right.red;\n  result.green = left.green / right.green;\n  result.blue = left.blue / right.blue;\n  result.alpha = left.alpha / right.alpha;\n  return result;\n};\n/**\n * Computes the componentwise modulus of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\n\n\nColor.mod = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result.red = left.red % right.red;\n  result.green = left.green % right.green;\n  result.blue = left.blue % right.blue;\n  result.alpha = left.alpha % right.alpha;\n  return result;\n};\n/**\n * Computes the linear interpolation or extrapolation at t between the provided colors.\n *\n * @param {Color} start The color corresponding to t at 0.0.\n * @param {Color} end The color corresponding to t at 1.0.\n * @param {Number} t The point along t at which to interpolate.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\n\n\nColor.lerp = function (start, end, t, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"start\", start);\n  Check.typeOf.object(\"end\", end);\n  Check.typeOf.number(\"t\", t);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result.red = CesiumMath.lerp(start.red, end.red, t);\n  result.green = CesiumMath.lerp(start.green, end.green, t);\n  result.blue = CesiumMath.lerp(start.blue, end.blue, t);\n  result.alpha = CesiumMath.lerp(start.alpha, end.alpha, t);\n  return result;\n};\n/**\n * Multiplies the provided Color componentwise by the provided scalar.\n *\n * @param {Color} color The Color to be scaled.\n * @param {Number} scalar The scalar to multiply with.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\n\n\nColor.multiplyByScalar = function (color, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result.red = color.red * scalar;\n  result.green = color.green * scalar;\n  result.blue = color.blue * scalar;\n  result.alpha = color.alpha * scalar;\n  return result;\n};\n/**\n * Divides the provided Color componentwise by the provided scalar.\n *\n * @param {Color} color The Color to be divided.\n * @param {Number} scalar The scalar to divide with.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\n\n\nColor.divideByScalar = function (color, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result); //>>includeEnd('debug');\n\n  result.red = color.red / scalar;\n  result.green = color.green / scalar;\n  result.blue = color.blue / scalar;\n  result.alpha = color.alpha / scalar;\n  return result;\n};\n/**\n * An immutable Color instance initialized to CSS color #F0F8FF\n * <span class=\"colorSwath\" style=\"background: #F0F8FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\n\nColor.ALICEBLUE = Object.freeze(Color.fromCssColorString(\"#F0F8FF\"));\n/**\n * An immutable Color instance initialized to CSS color #FAEBD7\n * <span class=\"colorSwath\" style=\"background: #FAEBD7;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.ANTIQUEWHITE = Object.freeze(Color.fromCssColorString(\"#FAEBD7\"));\n/**\n * An immutable Color instance initialized to CSS color #00FFFF\n * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.AQUA = Object.freeze(Color.fromCssColorString(\"#00FFFF\"));\n/**\n * An immutable Color instance initialized to CSS color #7FFFD4\n * <span class=\"colorSwath\" style=\"background: #7FFFD4;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.AQUAMARINE = Object.freeze(Color.fromCssColorString(\"#7FFFD4\"));\n/**\n * An immutable Color instance initialized to CSS color #F0FFFF\n * <span class=\"colorSwath\" style=\"background: #F0FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.AZURE = Object.freeze(Color.fromCssColorString(\"#F0FFFF\"));\n/**\n * An immutable Color instance initialized to CSS color #F5F5DC\n * <span class=\"colorSwath\" style=\"background: #F5F5DC;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.BEIGE = Object.freeze(Color.fromCssColorString(\"#F5F5DC\"));\n/**\n * An immutable Color instance initialized to CSS color #FFE4C4\n * <span class=\"colorSwath\" style=\"background: #FFE4C4;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.BISQUE = Object.freeze(Color.fromCssColorString(\"#FFE4C4\"));\n/**\n * An immutable Color instance initialized to CSS color #000000\n * <span class=\"colorSwath\" style=\"background: #000000;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.BLACK = Object.freeze(Color.fromCssColorString(\"#000000\"));\n/**\n * An immutable Color instance initialized to CSS color #FFEBCD\n * <span class=\"colorSwath\" style=\"background: #FFEBCD;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.BLANCHEDALMOND = Object.freeze(Color.fromCssColorString(\"#FFEBCD\"));\n/**\n * An immutable Color instance initialized to CSS color #0000FF\n * <span class=\"colorSwath\" style=\"background: #0000FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.BLUE = Object.freeze(Color.fromCssColorString(\"#0000FF\"));\n/**\n * An immutable Color instance initialized to CSS color #8A2BE2\n * <span class=\"colorSwath\" style=\"background: #8A2BE2;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.BLUEVIOLET = Object.freeze(Color.fromCssColorString(\"#8A2BE2\"));\n/**\n * An immutable Color instance initialized to CSS color #A52A2A\n * <span class=\"colorSwath\" style=\"background: #A52A2A;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.BROWN = Object.freeze(Color.fromCssColorString(\"#A52A2A\"));\n/**\n * An immutable Color instance initialized to CSS color #DEB887\n * <span class=\"colorSwath\" style=\"background: #DEB887;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.BURLYWOOD = Object.freeze(Color.fromCssColorString(\"#DEB887\"));\n/**\n * An immutable Color instance initialized to CSS color #5F9EA0\n * <span class=\"colorSwath\" style=\"background: #5F9EA0;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.CADETBLUE = Object.freeze(Color.fromCssColorString(\"#5F9EA0\"));\n/**\n * An immutable Color instance initialized to CSS color #7FFF00\n * <span class=\"colorSwath\" style=\"background: #7FFF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.CHARTREUSE = Object.freeze(Color.fromCssColorString(\"#7FFF00\"));\n/**\n * An immutable Color instance initialized to CSS color #D2691E\n * <span class=\"colorSwath\" style=\"background: #D2691E;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.CHOCOLATE = Object.freeze(Color.fromCssColorString(\"#D2691E\"));\n/**\n * An immutable Color instance initialized to CSS color #FF7F50\n * <span class=\"colorSwath\" style=\"background: #FF7F50;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.CORAL = Object.freeze(Color.fromCssColorString(\"#FF7F50\"));\n/**\n * An immutable Color instance initialized to CSS color #6495ED\n * <span class=\"colorSwath\" style=\"background: #6495ED;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.CORNFLOWERBLUE = Object.freeze(Color.fromCssColorString(\"#6495ED\"));\n/**\n * An immutable Color instance initialized to CSS color #FFF8DC\n * <span class=\"colorSwath\" style=\"background: #FFF8DC;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.CORNSILK = Object.freeze(Color.fromCssColorString(\"#FFF8DC\"));\n/**\n * An immutable Color instance initialized to CSS color #DC143C\n * <span class=\"colorSwath\" style=\"background: #DC143C;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.CRIMSON = Object.freeze(Color.fromCssColorString(\"#DC143C\"));\n/**\n * An immutable Color instance initialized to CSS color #00FFFF\n * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.CYAN = Object.freeze(Color.fromCssColorString(\"#00FFFF\"));\n/**\n * An immutable Color instance initialized to CSS color #00008B\n * <span class=\"colorSwath\" style=\"background: #00008B;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKBLUE = Object.freeze(Color.fromCssColorString(\"#00008B\"));\n/**\n * An immutable Color instance initialized to CSS color #008B8B\n * <span class=\"colorSwath\" style=\"background: #008B8B;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKCYAN = Object.freeze(Color.fromCssColorString(\"#008B8B\"));\n/**\n * An immutable Color instance initialized to CSS color #B8860B\n * <span class=\"colorSwath\" style=\"background: #B8860B;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKGOLDENROD = Object.freeze(Color.fromCssColorString(\"#B8860B\"));\n/**\n * An immutable Color instance initialized to CSS color #A9A9A9\n * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKGRAY = Object.freeze(Color.fromCssColorString(\"#A9A9A9\"));\n/**\n * An immutable Color instance initialized to CSS color #006400\n * <span class=\"colorSwath\" style=\"background: #006400;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKGREEN = Object.freeze(Color.fromCssColorString(\"#006400\"));\n/**\n * An immutable Color instance initialized to CSS color #A9A9A9\n * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKGREY = Color.DARKGRAY;\n/**\n * An immutable Color instance initialized to CSS color #BDB76B\n * <span class=\"colorSwath\" style=\"background: #BDB76B;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKKHAKI = Object.freeze(Color.fromCssColorString(\"#BDB76B\"));\n/**\n * An immutable Color instance initialized to CSS color #8B008B\n * <span class=\"colorSwath\" style=\"background: #8B008B;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKMAGENTA = Object.freeze(Color.fromCssColorString(\"#8B008B\"));\n/**\n * An immutable Color instance initialized to CSS color #556B2F\n * <span class=\"colorSwath\" style=\"background: #556B2F;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKOLIVEGREEN = Object.freeze(Color.fromCssColorString(\"#556B2F\"));\n/**\n * An immutable Color instance initialized to CSS color #FF8C00\n * <span class=\"colorSwath\" style=\"background: #FF8C00;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKORANGE = Object.freeze(Color.fromCssColorString(\"#FF8C00\"));\n/**\n * An immutable Color instance initialized to CSS color #9932CC\n * <span class=\"colorSwath\" style=\"background: #9932CC;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKORCHID = Object.freeze(Color.fromCssColorString(\"#9932CC\"));\n/**\n * An immutable Color instance initialized to CSS color #8B0000\n * <span class=\"colorSwath\" style=\"background: #8B0000;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKRED = Object.freeze(Color.fromCssColorString(\"#8B0000\"));\n/**\n * An immutable Color instance initialized to CSS color #E9967A\n * <span class=\"colorSwath\" style=\"background: #E9967A;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKSALMON = Object.freeze(Color.fromCssColorString(\"#E9967A\"));\n/**\n * An immutable Color instance initialized to CSS color #8FBC8F\n * <span class=\"colorSwath\" style=\"background: #8FBC8F;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKSEAGREEN = Object.freeze(Color.fromCssColorString(\"#8FBC8F\"));\n/**\n * An immutable Color instance initialized to CSS color #483D8B\n * <span class=\"colorSwath\" style=\"background: #483D8B;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKSLATEBLUE = Object.freeze(Color.fromCssColorString(\"#483D8B\"));\n/**\n * An immutable Color instance initialized to CSS color #2F4F4F\n * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKSLATEGRAY = Object.freeze(Color.fromCssColorString(\"#2F4F4F\"));\n/**\n * An immutable Color instance initialized to CSS color #2F4F4F\n * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKSLATEGREY = Color.DARKSLATEGRAY;\n/**\n * An immutable Color instance initialized to CSS color #00CED1\n * <span class=\"colorSwath\" style=\"background: #00CED1;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKTURQUOISE = Object.freeze(Color.fromCssColorString(\"#00CED1\"));\n/**\n * An immutable Color instance initialized to CSS color #9400D3\n * <span class=\"colorSwath\" style=\"background: #9400D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DARKVIOLET = Object.freeze(Color.fromCssColorString(\"#9400D3\"));\n/**\n * An immutable Color instance initialized to CSS color #FF1493\n * <span class=\"colorSwath\" style=\"background: #FF1493;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DEEPPINK = Object.freeze(Color.fromCssColorString(\"#FF1493\"));\n/**\n * An immutable Color instance initialized to CSS color #00BFFF\n * <span class=\"colorSwath\" style=\"background: #00BFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DEEPSKYBLUE = Object.freeze(Color.fromCssColorString(\"#00BFFF\"));\n/**\n * An immutable Color instance initialized to CSS color #696969\n * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DIMGRAY = Object.freeze(Color.fromCssColorString(\"#696969\"));\n/**\n * An immutable Color instance initialized to CSS color #696969\n * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DIMGREY = Color.DIMGRAY;\n/**\n * An immutable Color instance initialized to CSS color #1E90FF\n * <span class=\"colorSwath\" style=\"background: #1E90FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.DODGERBLUE = Object.freeze(Color.fromCssColorString(\"#1E90FF\"));\n/**\n * An immutable Color instance initialized to CSS color #B22222\n * <span class=\"colorSwath\" style=\"background: #B22222;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.FIREBRICK = Object.freeze(Color.fromCssColorString(\"#B22222\"));\n/**\n * An immutable Color instance initialized to CSS color #FFFAF0\n * <span class=\"colorSwath\" style=\"background: #FFFAF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.FLORALWHITE = Object.freeze(Color.fromCssColorString(\"#FFFAF0\"));\n/**\n * An immutable Color instance initialized to CSS color #228B22\n * <span class=\"colorSwath\" style=\"background: #228B22;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.FORESTGREEN = Object.freeze(Color.fromCssColorString(\"#228B22\"));\n/**\n * An immutable Color instance initialized to CSS color #FF00FF\n * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.FUCHSIA = Object.freeze(Color.fromCssColorString(\"#FF00FF\"));\n/**\n * An immutable Color instance initialized to CSS color #DCDCDC\n * <span class=\"colorSwath\" style=\"background: #DCDCDC;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.GAINSBORO = Object.freeze(Color.fromCssColorString(\"#DCDCDC\"));\n/**\n * An immutable Color instance initialized to CSS color #F8F8FF\n * <span class=\"colorSwath\" style=\"background: #F8F8FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.GHOSTWHITE = Object.freeze(Color.fromCssColorString(\"#F8F8FF\"));\n/**\n * An immutable Color instance initialized to CSS color #FFD700\n * <span class=\"colorSwath\" style=\"background: #FFD700;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.GOLD = Object.freeze(Color.fromCssColorString(\"#FFD700\"));\n/**\n * An immutable Color instance initialized to CSS color #DAA520\n * <span class=\"colorSwath\" style=\"background: #DAA520;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.GOLDENROD = Object.freeze(Color.fromCssColorString(\"#DAA520\"));\n/**\n * An immutable Color instance initialized to CSS color #808080\n * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.GRAY = Object.freeze(Color.fromCssColorString(\"#808080\"));\n/**\n * An immutable Color instance initialized to CSS color #008000\n * <span class=\"colorSwath\" style=\"background: #008000;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.GREEN = Object.freeze(Color.fromCssColorString(\"#008000\"));\n/**\n * An immutable Color instance initialized to CSS color #ADFF2F\n * <span class=\"colorSwath\" style=\"background: #ADFF2F;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.GREENYELLOW = Object.freeze(Color.fromCssColorString(\"#ADFF2F\"));\n/**\n * An immutable Color instance initialized to CSS color #808080\n * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.GREY = Color.GRAY;\n/**\n * An immutable Color instance initialized to CSS color #F0FFF0\n * <span class=\"colorSwath\" style=\"background: #F0FFF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.HONEYDEW = Object.freeze(Color.fromCssColorString(\"#F0FFF0\"));\n/**\n * An immutable Color instance initialized to CSS color #FF69B4\n * <span class=\"colorSwath\" style=\"background: #FF69B4;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.HOTPINK = Object.freeze(Color.fromCssColorString(\"#FF69B4\"));\n/**\n * An immutable Color instance initialized to CSS color #CD5C5C\n * <span class=\"colorSwath\" style=\"background: #CD5C5C;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.INDIANRED = Object.freeze(Color.fromCssColorString(\"#CD5C5C\"));\n/**\n * An immutable Color instance initialized to CSS color #4B0082\n * <span class=\"colorSwath\" style=\"background: #4B0082;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.INDIGO = Object.freeze(Color.fromCssColorString(\"#4B0082\"));\n/**\n * An immutable Color instance initialized to CSS color #FFFFF0\n * <span class=\"colorSwath\" style=\"background: #FFFFF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.IVORY = Object.freeze(Color.fromCssColorString(\"#FFFFF0\"));\n/**\n * An immutable Color instance initialized to CSS color #F0E68C\n * <span class=\"colorSwath\" style=\"background: #F0E68C;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.KHAKI = Object.freeze(Color.fromCssColorString(\"#F0E68C\"));\n/**\n * An immutable Color instance initialized to CSS color #E6E6FA\n * <span class=\"colorSwath\" style=\"background: #E6E6FA;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LAVENDER = Object.freeze(Color.fromCssColorString(\"#E6E6FA\"));\n/**\n * An immutable Color instance initialized to CSS color #FFF0F5\n * <span class=\"colorSwath\" style=\"background: #FFF0F5;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LAVENDAR_BLUSH = Object.freeze(Color.fromCssColorString(\"#FFF0F5\"));\n/**\n * An immutable Color instance initialized to CSS color #7CFC00\n * <span class=\"colorSwath\" style=\"background: #7CFC00;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LAWNGREEN = Object.freeze(Color.fromCssColorString(\"#7CFC00\"));\n/**\n * An immutable Color instance initialized to CSS color #FFFACD\n * <span class=\"colorSwath\" style=\"background: #FFFACD;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LEMONCHIFFON = Object.freeze(Color.fromCssColorString(\"#FFFACD\"));\n/**\n * An immutable Color instance initialized to CSS color #ADD8E6\n * <span class=\"colorSwath\" style=\"background: #ADD8E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTBLUE = Object.freeze(Color.fromCssColorString(\"#ADD8E6\"));\n/**\n * An immutable Color instance initialized to CSS color #F08080\n * <span class=\"colorSwath\" style=\"background: #F08080;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTCORAL = Object.freeze(Color.fromCssColorString(\"#F08080\"));\n/**\n * An immutable Color instance initialized to CSS color #E0FFFF\n * <span class=\"colorSwath\" style=\"background: #E0FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTCYAN = Object.freeze(Color.fromCssColorString(\"#E0FFFF\"));\n/**\n * An immutable Color instance initialized to CSS color #FAFAD2\n * <span class=\"colorSwath\" style=\"background: #FAFAD2;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTGOLDENRODYELLOW = Object.freeze(Color.fromCssColorString(\"#FAFAD2\"));\n/**\n * An immutable Color instance initialized to CSS color #D3D3D3\n * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTGRAY = Object.freeze(Color.fromCssColorString(\"#D3D3D3\"));\n/**\n * An immutable Color instance initialized to CSS color #90EE90\n * <span class=\"colorSwath\" style=\"background: #90EE90;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTGREEN = Object.freeze(Color.fromCssColorString(\"#90EE90\"));\n/**\n * An immutable Color instance initialized to CSS color #D3D3D3\n * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTGREY = Color.LIGHTGRAY;\n/**\n * An immutable Color instance initialized to CSS color #FFB6C1\n * <span class=\"colorSwath\" style=\"background: #FFB6C1;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTPINK = Object.freeze(Color.fromCssColorString(\"#FFB6C1\"));\n/**\n * An immutable Color instance initialized to CSS color #20B2AA\n * <span class=\"colorSwath\" style=\"background: #20B2AA;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTSEAGREEN = Object.freeze(Color.fromCssColorString(\"#20B2AA\"));\n/**\n * An immutable Color instance initialized to CSS color #87CEFA\n * <span class=\"colorSwath\" style=\"background: #87CEFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTSKYBLUE = Object.freeze(Color.fromCssColorString(\"#87CEFA\"));\n/**\n * An immutable Color instance initialized to CSS color #778899\n * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTSLATEGRAY = Object.freeze(Color.fromCssColorString(\"#778899\"));\n/**\n * An immutable Color instance initialized to CSS color #778899\n * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTSLATEGREY = Color.LIGHTSLATEGRAY;\n/**\n * An immutable Color instance initialized to CSS color #B0C4DE\n * <span class=\"colorSwath\" style=\"background: #B0C4DE;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTSTEELBLUE = Object.freeze(Color.fromCssColorString(\"#B0C4DE\"));\n/**\n * An immutable Color instance initialized to CSS color #FFFFE0\n * <span class=\"colorSwath\" style=\"background: #FFFFE0;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIGHTYELLOW = Object.freeze(Color.fromCssColorString(\"#FFFFE0\"));\n/**\n * An immutable Color instance initialized to CSS color #00FF00\n * <span class=\"colorSwath\" style=\"background: #00FF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIME = Object.freeze(Color.fromCssColorString(\"#00FF00\"));\n/**\n * An immutable Color instance initialized to CSS color #32CD32\n * <span class=\"colorSwath\" style=\"background: #32CD32;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LIMEGREEN = Object.freeze(Color.fromCssColorString(\"#32CD32\"));\n/**\n * An immutable Color instance initialized to CSS color #FAF0E6\n * <span class=\"colorSwath\" style=\"background: #FAF0E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.LINEN = Object.freeze(Color.fromCssColorString(\"#FAF0E6\"));\n/**\n * An immutable Color instance initialized to CSS color #FF00FF\n * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MAGENTA = Object.freeze(Color.fromCssColorString(\"#FF00FF\"));\n/**\n * An immutable Color instance initialized to CSS color #800000\n * <span class=\"colorSwath\" style=\"background: #800000;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MAROON = Object.freeze(Color.fromCssColorString(\"#800000\"));\n/**\n * An immutable Color instance initialized to CSS color #66CDAA\n * <span class=\"colorSwath\" style=\"background: #66CDAA;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MEDIUMAQUAMARINE = Object.freeze(Color.fromCssColorString(\"#66CDAA\"));\n/**\n * An immutable Color instance initialized to CSS color #0000CD\n * <span class=\"colorSwath\" style=\"background: #0000CD;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MEDIUMBLUE = Object.freeze(Color.fromCssColorString(\"#0000CD\"));\n/**\n * An immutable Color instance initialized to CSS color #BA55D3\n * <span class=\"colorSwath\" style=\"background: #BA55D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MEDIUMORCHID = Object.freeze(Color.fromCssColorString(\"#BA55D3\"));\n/**\n * An immutable Color instance initialized to CSS color #9370DB\n * <span class=\"colorSwath\" style=\"background: #9370DB;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MEDIUMPURPLE = Object.freeze(Color.fromCssColorString(\"#9370DB\"));\n/**\n * An immutable Color instance initialized to CSS color #3CB371\n * <span class=\"colorSwath\" style=\"background: #3CB371;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MEDIUMSEAGREEN = Object.freeze(Color.fromCssColorString(\"#3CB371\"));\n/**\n * An immutable Color instance initialized to CSS color #7B68EE\n * <span class=\"colorSwath\" style=\"background: #7B68EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MEDIUMSLATEBLUE = Object.freeze(Color.fromCssColorString(\"#7B68EE\"));\n/**\n * An immutable Color instance initialized to CSS color #00FA9A\n * <span class=\"colorSwath\" style=\"background: #00FA9A;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MEDIUMSPRINGGREEN = Object.freeze(Color.fromCssColorString(\"#00FA9A\"));\n/**\n * An immutable Color instance initialized to CSS color #48D1CC\n * <span class=\"colorSwath\" style=\"background: #48D1CC;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MEDIUMTURQUOISE = Object.freeze(Color.fromCssColorString(\"#48D1CC\"));\n/**\n * An immutable Color instance initialized to CSS color #C71585\n * <span class=\"colorSwath\" style=\"background: #C71585;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MEDIUMVIOLETRED = Object.freeze(Color.fromCssColorString(\"#C71585\"));\n/**\n * An immutable Color instance initialized to CSS color #191970\n * <span class=\"colorSwath\" style=\"background: #191970;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MIDNIGHTBLUE = Object.freeze(Color.fromCssColorString(\"#191970\"));\n/**\n * An immutable Color instance initialized to CSS color #F5FFFA\n * <span class=\"colorSwath\" style=\"background: #F5FFFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MINTCREAM = Object.freeze(Color.fromCssColorString(\"#F5FFFA\"));\n/**\n * An immutable Color instance initialized to CSS color #FFE4E1\n * <span class=\"colorSwath\" style=\"background: #FFE4E1;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MISTYROSE = Object.freeze(Color.fromCssColorString(\"#FFE4E1\"));\n/**\n * An immutable Color instance initialized to CSS color #FFE4B5\n * <span class=\"colorSwath\" style=\"background: #FFE4B5;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.MOCCASIN = Object.freeze(Color.fromCssColorString(\"#FFE4B5\"));\n/**\n * An immutable Color instance initialized to CSS color #FFDEAD\n * <span class=\"colorSwath\" style=\"background: #FFDEAD;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.NAVAJOWHITE = Object.freeze(Color.fromCssColorString(\"#FFDEAD\"));\n/**\n * An immutable Color instance initialized to CSS color #000080\n * <span class=\"colorSwath\" style=\"background: #000080;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.NAVY = Object.freeze(Color.fromCssColorString(\"#000080\"));\n/**\n * An immutable Color instance initialized to CSS color #FDF5E6\n * <span class=\"colorSwath\" style=\"background: #FDF5E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.OLDLACE = Object.freeze(Color.fromCssColorString(\"#FDF5E6\"));\n/**\n * An immutable Color instance initialized to CSS color #808000\n * <span class=\"colorSwath\" style=\"background: #808000;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.OLIVE = Object.freeze(Color.fromCssColorString(\"#808000\"));\n/**\n * An immutable Color instance initialized to CSS color #6B8E23\n * <span class=\"colorSwath\" style=\"background: #6B8E23;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.OLIVEDRAB = Object.freeze(Color.fromCssColorString(\"#6B8E23\"));\n/**\n * An immutable Color instance initialized to CSS color #FFA500\n * <span class=\"colorSwath\" style=\"background: #FFA500;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.ORANGE = Object.freeze(Color.fromCssColorString(\"#FFA500\"));\n/**\n * An immutable Color instance initialized to CSS color #FF4500\n * <span class=\"colorSwath\" style=\"background: #FF4500;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.ORANGERED = Object.freeze(Color.fromCssColorString(\"#FF4500\"));\n/**\n * An immutable Color instance initialized to CSS color #DA70D6\n * <span class=\"colorSwath\" style=\"background: #DA70D6;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.ORCHID = Object.freeze(Color.fromCssColorString(\"#DA70D6\"));\n/**\n * An immutable Color instance initialized to CSS color #EEE8AA\n * <span class=\"colorSwath\" style=\"background: #EEE8AA;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.PALEGOLDENROD = Object.freeze(Color.fromCssColorString(\"#EEE8AA\"));\n/**\n * An immutable Color instance initialized to CSS color #98FB98\n * <span class=\"colorSwath\" style=\"background: #98FB98;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.PALEGREEN = Object.freeze(Color.fromCssColorString(\"#98FB98\"));\n/**\n * An immutable Color instance initialized to CSS color #AFEEEE\n * <span class=\"colorSwath\" style=\"background: #AFEEEE;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.PALETURQUOISE = Object.freeze(Color.fromCssColorString(\"#AFEEEE\"));\n/**\n * An immutable Color instance initialized to CSS color #DB7093\n * <span class=\"colorSwath\" style=\"background: #DB7093;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.PALEVIOLETRED = Object.freeze(Color.fromCssColorString(\"#DB7093\"));\n/**\n * An immutable Color instance initialized to CSS color #FFEFD5\n * <span class=\"colorSwath\" style=\"background: #FFEFD5;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.PAPAYAWHIP = Object.freeze(Color.fromCssColorString(\"#FFEFD5\"));\n/**\n * An immutable Color instance initialized to CSS color #FFDAB9\n * <span class=\"colorSwath\" style=\"background: #FFDAB9;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.PEACHPUFF = Object.freeze(Color.fromCssColorString(\"#FFDAB9\"));\n/**\n * An immutable Color instance initialized to CSS color #CD853F\n * <span class=\"colorSwath\" style=\"background: #CD853F;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.PERU = Object.freeze(Color.fromCssColorString(\"#CD853F\"));\n/**\n * An immutable Color instance initialized to CSS color #FFC0CB\n * <span class=\"colorSwath\" style=\"background: #FFC0CB;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.PINK = Object.freeze(Color.fromCssColorString(\"#FFC0CB\"));\n/**\n * An immutable Color instance initialized to CSS color #DDA0DD\n * <span class=\"colorSwath\" style=\"background: #DDA0DD;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.PLUM = Object.freeze(Color.fromCssColorString(\"#DDA0DD\"));\n/**\n * An immutable Color instance initialized to CSS color #B0E0E6\n * <span class=\"colorSwath\" style=\"background: #B0E0E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.POWDERBLUE = Object.freeze(Color.fromCssColorString(\"#B0E0E6\"));\n/**\n * An immutable Color instance initialized to CSS color #800080\n * <span class=\"colorSwath\" style=\"background: #800080;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.PURPLE = Object.freeze(Color.fromCssColorString(\"#800080\"));\n/**\n * An immutable Color instance initialized to CSS color #FF0000\n * <span class=\"colorSwath\" style=\"background: #FF0000;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.RED = Object.freeze(Color.fromCssColorString(\"#FF0000\"));\n/**\n * An immutable Color instance initialized to CSS color #BC8F8F\n * <span class=\"colorSwath\" style=\"background: #BC8F8F;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.ROSYBROWN = Object.freeze(Color.fromCssColorString(\"#BC8F8F\"));\n/**\n * An immutable Color instance initialized to CSS color #4169E1\n * <span class=\"colorSwath\" style=\"background: #4169E1;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.ROYALBLUE = Object.freeze(Color.fromCssColorString(\"#4169E1\"));\n/**\n * An immutable Color instance initialized to CSS color #8B4513\n * <span class=\"colorSwath\" style=\"background: #8B4513;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SADDLEBROWN = Object.freeze(Color.fromCssColorString(\"#8B4513\"));\n/**\n * An immutable Color instance initialized to CSS color #FA8072\n * <span class=\"colorSwath\" style=\"background: #FA8072;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SALMON = Object.freeze(Color.fromCssColorString(\"#FA8072\"));\n/**\n * An immutable Color instance initialized to CSS color #F4A460\n * <span class=\"colorSwath\" style=\"background: #F4A460;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SANDYBROWN = Object.freeze(Color.fromCssColorString(\"#F4A460\"));\n/**\n * An immutable Color instance initialized to CSS color #2E8B57\n * <span class=\"colorSwath\" style=\"background: #2E8B57;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SEAGREEN = Object.freeze(Color.fromCssColorString(\"#2E8B57\"));\n/**\n * An immutable Color instance initialized to CSS color #FFF5EE\n * <span class=\"colorSwath\" style=\"background: #FFF5EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SEASHELL = Object.freeze(Color.fromCssColorString(\"#FFF5EE\"));\n/**\n * An immutable Color instance initialized to CSS color #A0522D\n * <span class=\"colorSwath\" style=\"background: #A0522D;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SIENNA = Object.freeze(Color.fromCssColorString(\"#A0522D\"));\n/**\n * An immutable Color instance initialized to CSS color #C0C0C0\n * <span class=\"colorSwath\" style=\"background: #C0C0C0;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SILVER = Object.freeze(Color.fromCssColorString(\"#C0C0C0\"));\n/**\n * An immutable Color instance initialized to CSS color #87CEEB\n * <span class=\"colorSwath\" style=\"background: #87CEEB;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SKYBLUE = Object.freeze(Color.fromCssColorString(\"#87CEEB\"));\n/**\n * An immutable Color instance initialized to CSS color #6A5ACD\n * <span class=\"colorSwath\" style=\"background: #6A5ACD;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SLATEBLUE = Object.freeze(Color.fromCssColorString(\"#6A5ACD\"));\n/**\n * An immutable Color instance initialized to CSS color #708090\n * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SLATEGRAY = Object.freeze(Color.fromCssColorString(\"#708090\"));\n/**\n * An immutable Color instance initialized to CSS color #708090\n * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SLATEGREY = Color.SLATEGRAY;\n/**\n * An immutable Color instance initialized to CSS color #FFFAFA\n * <span class=\"colorSwath\" style=\"background: #FFFAFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SNOW = Object.freeze(Color.fromCssColorString(\"#FFFAFA\"));\n/**\n * An immutable Color instance initialized to CSS color #00FF7F\n * <span class=\"colorSwath\" style=\"background: #00FF7F;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.SPRINGGREEN = Object.freeze(Color.fromCssColorString(\"#00FF7F\"));\n/**\n * An immutable Color instance initialized to CSS color #4682B4\n * <span class=\"colorSwath\" style=\"background: #4682B4;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.STEELBLUE = Object.freeze(Color.fromCssColorString(\"#4682B4\"));\n/**\n * An immutable Color instance initialized to CSS color #D2B48C\n * <span class=\"colorSwath\" style=\"background: #D2B48C;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.TAN = Object.freeze(Color.fromCssColorString(\"#D2B48C\"));\n/**\n * An immutable Color instance initialized to CSS color #008080\n * <span class=\"colorSwath\" style=\"background: #008080;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.TEAL = Object.freeze(Color.fromCssColorString(\"#008080\"));\n/**\n * An immutable Color instance initialized to CSS color #D8BFD8\n * <span class=\"colorSwath\" style=\"background: #D8BFD8;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.THISTLE = Object.freeze(Color.fromCssColorString(\"#D8BFD8\"));\n/**\n * An immutable Color instance initialized to CSS color #FF6347\n * <span class=\"colorSwath\" style=\"background: #FF6347;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.TOMATO = Object.freeze(Color.fromCssColorString(\"#FF6347\"));\n/**\n * An immutable Color instance initialized to CSS color #40E0D0\n * <span class=\"colorSwath\" style=\"background: #40E0D0;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.TURQUOISE = Object.freeze(Color.fromCssColorString(\"#40E0D0\"));\n/**\n * An immutable Color instance initialized to CSS color #EE82EE\n * <span class=\"colorSwath\" style=\"background: #EE82EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.VIOLET = Object.freeze(Color.fromCssColorString(\"#EE82EE\"));\n/**\n * An immutable Color instance initialized to CSS color #F5DEB3\n * <span class=\"colorSwath\" style=\"background: #F5DEB3;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.WHEAT = Object.freeze(Color.fromCssColorString(\"#F5DEB3\"));\n/**\n * An immutable Color instance initialized to CSS color #FFFFFF\n * <span class=\"colorSwath\" style=\"background: #FFFFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.WHITE = Object.freeze(Color.fromCssColorString(\"#FFFFFF\"));\n/**\n * An immutable Color instance initialized to CSS color #F5F5F5\n * <span class=\"colorSwath\" style=\"background: #F5F5F5;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.WHITESMOKE = Object.freeze(Color.fromCssColorString(\"#F5F5F5\"));\n/**\n * An immutable Color instance initialized to CSS color #FFFF00\n * <span class=\"colorSwath\" style=\"background: #FFFF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.YELLOW = Object.freeze(Color.fromCssColorString(\"#FFFF00\"));\n/**\n * An immutable Color instance initialized to CSS color #9ACD32\n * <span class=\"colorSwath\" style=\"background: #9ACD32;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.YELLOWGREEN = Object.freeze(Color.fromCssColorString(\"#9ACD32\"));\n/**\n * An immutable Color instance initialized to CSS transparent.\n * <span class=\"colorSwath\" style=\"background: transparent;\"></span>\n *\n * @constant\n * @type {Color}\n */\n\nColor.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));\nexport default Color;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Core/Color.js"],"names":["Check","defaultValue","defined","FeatureDetection","CesiumMath","hue2rgb","m1","m2","h","Color","red","green","blue","alpha","fromCartesian4","cartesian","result","typeOf","object","x","y","z","w","fromBytes","byteToFloat","fromAlpha","color","number","scratchArrayBuffer","scratchUint32Array","scratchUint8Array","supportsTypedArrays","ArrayBuffer","Uint32Array","Uint8Array","fromRgba","rgba","fromHsl","hue","saturation","lightness","fromRandom","options","EMPTY_OBJECT","minimumRed","maximumRed","lessThanOrEquals","nextRandomNumber","minimumGreen","maximumGreen","minimumBlue","maximumBlue","minimumAlpha","maximumAlpha","rgbaMatcher","rrggbbaaMatcher","rgbParenthesesMatcher","hslParenthesesMatcher","fromCssColorString","string","replace","namedColor","toUpperCase","clone","matches","exec","parseInt","parseFloat","substr","undefined","packedLength","pack","value","array","startingIndex","unpack","floatToByte","equals","left","right","equalsArray","offset","prototype","other","equalsEpsilon","epsilon","Math","abs","toString","toCssColorString","toCssHexString","r","length","g","b","hexAlpha","toBytes","toRgba","brighten","magnitude","greaterThanOrEquals","darken","withAlpha","add","subtract","multiply","divide","mod","lerp","start","end","t","multiplyByScalar","scalar","divideByScalar","ALICEBLUE","Object","freeze","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDAR_BLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","TRANSPARENT"],"mappings":"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","sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport FeatureDetection from \"./FeatureDetection.js\";\nimport CesiumMath from \"./Math.js\";\n\nfunction hue2rgb(m1, m2, h) {\n  if (h < 0) {\n    h += 1;\n  }\n  if (h > 1) {\n    h -= 1;\n  }\n  if (h * 6 < 1) {\n    return m1 + (m2 - m1) * 6 * h;\n  }\n  if (h * 2 < 1) {\n    return m2;\n  }\n  if (h * 3 < 2) {\n    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n  }\n  return m1;\n}\n\n/**\n * A color, specified using red, green, blue, and alpha values,\n * which range from <code>0</code> (no intensity) to <code>1.0</code> (full intensity).\n * @param {Number} [red=1.0] The red component.\n * @param {Number} [green=1.0] The green component.\n * @param {Number} [blue=1.0] The blue component.\n * @param {Number} [alpha=1.0] The alpha component.\n *\n * @constructor\n * @alias Color\n *\n * @see Packable\n */\nfunction Color(red, green, blue, alpha) {\n  /**\n   * The red component.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.red = defaultValue(red, 1.0);\n  /**\n   * The green component.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.green = defaultValue(green, 1.0);\n  /**\n   * The blue component.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.blue = defaultValue(blue, 1.0);\n  /**\n   * The alpha component.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.alpha = defaultValue(alpha, 1.0);\n}\n\n/**\n * Creates a Color instance from a {@link Cartesian4}. <code>x</code>, <code>y</code>, <code>z</code>,\n * and <code>w</code> map to <code>red</code>, <code>green</code>, <code>blue</code>, and <code>alpha</code>, respectively.\n *\n * @param {Cartesian4} cartesian The source cartesian.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.fromCartesian4 = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Color(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\n  }\n\n  result.red = cartesian.x;\n  result.green = cartesian.y;\n  result.blue = cartesian.z;\n  result.alpha = cartesian.w;\n  return result;\n};\n\n/**\n * Creates a new Color specified using red, green, blue, and alpha values\n * that are in the range of 0 to 255, converting them internally to a range of 0.0 to 1.0.\n *\n * @param {Number} [red=255] The red component.\n * @param {Number} [green=255] The green component.\n * @param {Number} [blue=255] The blue component.\n * @param {Number} [alpha=255] The alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.fromBytes = function (red, green, blue, alpha, result) {\n  red = Color.byteToFloat(defaultValue(red, 255.0));\n  green = Color.byteToFloat(defaultValue(green, 255.0));\n  blue = Color.byteToFloat(defaultValue(blue, 255.0));\n  alpha = Color.byteToFloat(defaultValue(alpha, 255.0));\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n/**\n * Creates a new Color that has the same red, green, and blue components\n * of the specified color, but with the specified alpha value.\n *\n * @param {Color} color The base color\n * @param {Number} alpha The new alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n *\n * @example var translucentRed = Cesium.Color.fromAlpha(Cesium.Color.RED, 0.9);\n */\nColor.fromAlpha = function (color, alpha, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"alpha\", alpha);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Color(color.red, color.green, color.blue, alpha);\n  }\n\n  result.red = color.red;\n  result.green = color.green;\n  result.blue = color.blue;\n  result.alpha = alpha;\n  return result;\n};\n\nvar scratchArrayBuffer;\nvar scratchUint32Array;\nvar scratchUint8Array;\nif (FeatureDetection.supportsTypedArrays()) {\n  scratchArrayBuffer = new ArrayBuffer(4);\n  scratchUint32Array = new Uint32Array(scratchArrayBuffer);\n  scratchUint8Array = new Uint8Array(scratchArrayBuffer);\n}\n\n/**\n * Creates a new Color from a single numeric unsigned 32-bit RGBA value, using the endianness\n * of the system.\n *\n * @param {Number} rgba A single numeric unsigned 32-bit RGBA value.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object.\n *\n * @example\n * var color = Cesium.Color.fromRgba(0x67ADDFFF);\n *\n * @see Color#toRgba\n */\nColor.fromRgba = function (rgba, result) {\n  // scratchUint32Array and scratchUint8Array share an underlying array buffer\n  scratchUint32Array[0] = rgba;\n  return Color.fromBytes(\n    scratchUint8Array[0],\n    scratchUint8Array[1],\n    scratchUint8Array[2],\n    scratchUint8Array[3],\n    result\n  );\n};\n\n/**\n * Creates a Color instance from hue, saturation, and lightness.\n *\n * @param {Number} [hue=0] The hue angle 0...1\n * @param {Number} [saturation=0] The saturation value 0...1\n * @param {Number} [lightness=0] The lightness value 0...1\n * @param {Number} [alpha=1.0] The alpha component 0...1\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object.\n *\n * @see {@link http://www.w3.org/TR/css3-color/#hsl-color|CSS color values}\n */\nColor.fromHsl = function (hue, saturation, lightness, alpha, result) {\n  hue = defaultValue(hue, 0.0) % 1.0;\n  saturation = defaultValue(saturation, 0.0);\n  lightness = defaultValue(lightness, 0.0);\n  alpha = defaultValue(alpha, 1.0);\n\n  var red = lightness;\n  var green = lightness;\n  var blue = lightness;\n\n  if (saturation !== 0) {\n    var m2;\n    if (lightness < 0.5) {\n      m2 = lightness * (1 + saturation);\n    } else {\n      m2 = lightness + saturation - lightness * saturation;\n    }\n\n    var m1 = 2.0 * lightness - m2;\n    red = hue2rgb(m1, m2, hue + 1 / 3);\n    green = hue2rgb(m1, m2, hue);\n    blue = hue2rgb(m1, m2, hue - 1 / 3);\n  }\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n/**\n * Creates a random color using the provided options. For reproducible random colors, you should\n * call {@link CesiumMath#setRandomNumberSeed} once at the beginning of your application.\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Number} [options.red] If specified, the red component to use instead of a randomized value.\n * @param {Number} [options.minimumRed=0.0] The maximum red value to generate if none was specified.\n * @param {Number} [options.maximumRed=1.0] The minimum red value to generate if none was specified.\n * @param {Number} [options.green] If specified, the green component to use instead of a randomized value.\n * @param {Number} [options.minimumGreen=0.0] The maximum green value to generate if none was specified.\n * @param {Number} [options.maximumGreen=1.0] The minimum green value to generate if none was specified.\n * @param {Number} [options.blue] If specified, the blue component to use instead of a randomized value.\n * @param {Number} [options.minimumBlue=0.0] The maximum blue value to generate if none was specified.\n * @param {Number} [options.maximumBlue=1.0] The minimum blue value to generate if none was specified.\n * @param {Number} [options.alpha] If specified, the alpha component to use instead of a randomized value.\n * @param {Number} [options.minimumAlpha=0.0] The maximum alpha value to generate if none was specified.\n * @param {Number} [options.maximumAlpha=1.0] The minimum alpha value to generate if none was specified.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined.\n *\n * @exception {DeveloperError} minimumRed must be less than or equal to maximumRed.\n * @exception {DeveloperError} minimumGreen must be less than or equal to maximumGreen.\n * @exception {DeveloperError} minimumBlue must be less than or equal to maximumBlue.\n * @exception {DeveloperError} minimumAlpha must be less than or equal to maximumAlpha.\n *\n * @example\n * //Create a completely random color\n * var color = Cesium.Color.fromRandom();\n *\n * //Create a random shade of yellow.\n * var color = Cesium.Color.fromRandom({\n *     red : 1.0,\n *     green : 1.0,\n *     alpha : 1.0\n * });\n *\n * //Create a random bright color.\n * var color = Cesium.Color.fromRandom({\n *     minimumRed : 0.75,\n *     minimumGreen : 0.75,\n *     minimumBlue : 0.75,\n *     alpha : 1.0\n * });\n */\nColor.fromRandom = function (options, result) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var red = options.red;\n  if (!defined(red)) {\n    var minimumRed = defaultValue(options.minimumRed, 0);\n    var maximumRed = defaultValue(options.maximumRed, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\"minimumRed\", minimumRed, maximumRed);\n    //>>includeEnd('debug');\n\n    red =\n      minimumRed + CesiumMath.nextRandomNumber() * (maximumRed - minimumRed);\n  }\n\n  var green = options.green;\n  if (!defined(green)) {\n    var minimumGreen = defaultValue(options.minimumGreen, 0);\n    var maximumGreen = defaultValue(options.maximumGreen, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\n      \"minimumGreen\",\n      minimumGreen,\n      maximumGreen\n    );\n    //>>includeEnd('debug');\n    green =\n      minimumGreen +\n      CesiumMath.nextRandomNumber() * (maximumGreen - minimumGreen);\n  }\n\n  var blue = options.blue;\n  if (!defined(blue)) {\n    var minimumBlue = defaultValue(options.minimumBlue, 0);\n    var maximumBlue = defaultValue(options.maximumBlue, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\n      \"minimumBlue\",\n      minimumBlue,\n      maximumBlue\n    );\n    //>>includeEnd('debug');\n\n    blue =\n      minimumBlue + CesiumMath.nextRandomNumber() * (maximumBlue - minimumBlue);\n  }\n\n  var alpha = options.alpha;\n  if (!defined(alpha)) {\n    var minimumAlpha = defaultValue(options.minimumAlpha, 0);\n    var maximumAlpha = defaultValue(options.maximumAlpha, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\n      \"minumumAlpha\",\n      minimumAlpha,\n      maximumAlpha\n    );\n    //>>includeEnd('debug');\n\n    alpha =\n      minimumAlpha +\n      CesiumMath.nextRandomNumber() * (maximumAlpha - minimumAlpha);\n  }\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n//#rgba\nvar rgbaMatcher = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;\n//#rrggbbaa\nvar rrggbbaaMatcher = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;\n//rgb(), rgba(), or rgb%()\nvar rgbParenthesesMatcher = /^rgba?\\(\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)(?:\\s*,\\s*([0-9.]+))?\\s*\\)$/i;\n//hsl() or hsla()\nvar hslParenthesesMatcher = /^hsla?\\(\\s*([0-9.]+)\\s*,\\s*([0-9.]+%)\\s*,\\s*([0-9.]+%)(?:\\s*,\\s*([0-9.]+))?\\s*\\)$/i;\n\n/**\n * Creates a Color instance from a CSS color value.\n *\n * @param {String} color The CSS color value in #rgb, #rgba, #rrggbb, #rrggbbaa, rgb(), rgba(), hsl(), or hsla() format.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object, or undefined if the string was not a valid CSS color.\n *\n *\n * @example\n * var cesiumBlue = Cesium.Color.fromCssColorString('#67ADDF');\n * var green = Cesium.Color.fromCssColorString('green');\n *\n * @see {@link http://www.w3.org/TR/css3-color|CSS color values}\n */\nColor.fromCssColorString = function (color, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"color\", color);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Color();\n  }\n\n  // Remove all whitespaces from the color string\n  color = color.replace(/\\s/g, \"\");\n\n  var namedColor = Color[color.toUpperCase()];\n  if (defined(namedColor)) {\n    Color.clone(namedColor, result);\n    return result;\n  }\n\n  var matches = rgbaMatcher.exec(color);\n  if (matches !== null) {\n    result.red = parseInt(matches[1], 16) / 15;\n    result.green = parseInt(matches[2], 16) / 15.0;\n    result.blue = parseInt(matches[3], 16) / 15.0;\n    result.alpha = parseInt(defaultValue(matches[4], \"f\"), 16) / 15.0;\n    return result;\n  }\n\n  matches = rrggbbaaMatcher.exec(color);\n  if (matches !== null) {\n    result.red = parseInt(matches[1], 16) / 255.0;\n    result.green = parseInt(matches[2], 16) / 255.0;\n    result.blue = parseInt(matches[3], 16) / 255.0;\n    result.alpha = parseInt(defaultValue(matches[4], \"ff\"), 16) / 255.0;\n    return result;\n  }\n\n  matches = rgbParenthesesMatcher.exec(color);\n  if (matches !== null) {\n    result.red =\n      parseFloat(matches[1]) / (\"%\" === matches[1].substr(-1) ? 100.0 : 255.0);\n    result.green =\n      parseFloat(matches[2]) / (\"%\" === matches[2].substr(-1) ? 100.0 : 255.0);\n    result.blue =\n      parseFloat(matches[3]) / (\"%\" === matches[3].substr(-1) ? 100.0 : 255.0);\n    result.alpha = parseFloat(defaultValue(matches[4], \"1.0\"));\n    return result;\n  }\n\n  matches = hslParenthesesMatcher.exec(color);\n  if (matches !== null) {\n    return Color.fromHsl(\n      parseFloat(matches[1]) / 360.0,\n      parseFloat(matches[2]) / 100.0,\n      parseFloat(matches[3]) / 100.0,\n      parseFloat(defaultValue(matches[4], \"1.0\")),\n      result\n    );\n  }\n\n  result = undefined;\n  return result;\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nColor.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Color} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nColor.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value.red;\n  array[startingIndex++] = value.green;\n  array[startingIndex++] = value.blue;\n  array[startingIndex] = value.alpha;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Color} [result] The object into which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  if (!defined(result)) {\n    result = new Color();\n  }\n  result.red = array[startingIndex++];\n  result.green = array[startingIndex++];\n  result.blue = array[startingIndex++];\n  result.alpha = array[startingIndex];\n  return result;\n};\n\n/**\n * Converts a 'byte' color component in the range of 0 to 255 into\n * a 'float' color component in the range of 0 to 1.0.\n *\n * @param {Number} number The number to be converted.\n * @returns {Number} The converted number.\n */\nColor.byteToFloat = function (number) {\n  return number / 255.0;\n};\n\n/**\n * Converts a 'float' color component in the range of 0 to 1.0 into\n * a 'byte' color component in the range of 0 to 255.\n *\n * @param {Number} number The number to be converted.\n * @returns {Number} The converted number.\n */\nColor.floatToByte = function (number) {\n  return number === 1.0 ? 255.0 : (number * 256.0) | 0;\n};\n\n/**\n * Duplicates a Color.\n *\n * @param {Color} color The Color to duplicate.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined. (Returns undefined if color is undefined)\n */\nColor.clone = function (color, result) {\n  if (!defined(color)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Color(color.red, color.green, color.blue, color.alpha);\n  }\n  result.red = color.red;\n  result.green = color.green;\n  result.blue = color.blue;\n  result.alpha = color.alpha;\n  return result;\n};\n\n/**\n * Returns true if the first Color equals the second color.\n *\n * @param {Color} left The first Color to compare for equality.\n * @param {Color} right The second Color to compare for equality.\n * @returns {Boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\n */\nColor.equals = function (left, right) {\n  return (\n    left === right || //\n    (defined(left) && //\n      defined(right) && //\n      left.red === right.red && //\n      left.green === right.green && //\n      left.blue === right.blue && //\n      left.alpha === right.alpha)\n  );\n};\n\n/**\n * @private\n */\nColor.equalsArray = function (color, array, offset) {\n  return (\n    color.red === array[offset] &&\n    color.green === array[offset + 1] &&\n    color.blue === array[offset + 2] &&\n    color.alpha === array[offset + 3]\n  );\n};\n\n/**\n * Returns a duplicate of a Color instance.\n *\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined.\n */\nColor.prototype.clone = function (result) {\n  return Color.clone(this, result);\n};\n\n/**\n * Returns true if this Color equals other.\n *\n * @param {Color} other The Color to compare for equality.\n * @returns {Boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\n */\nColor.prototype.equals = function (other) {\n  return Color.equals(this, other);\n};\n\n/**\n * Returns <code>true</code> if this Color equals other componentwise within the specified epsilon.\n *\n * @param {Color} other The Color to compare for equality.\n * @param {Number} [epsilon=0.0] The epsilon to use for equality testing.\n * @returns {Boolean} <code>true</code> if the Colors are equal within the specified epsilon; otherwise, <code>false</code>.\n */\nColor.prototype.equalsEpsilon = function (other, epsilon) {\n  return (\n    this === other || //\n    (defined(other) && //\n      Math.abs(this.red - other.red) <= epsilon && //\n      Math.abs(this.green - other.green) <= epsilon && //\n      Math.abs(this.blue - other.blue) <= epsilon && //\n      Math.abs(this.alpha - other.alpha) <= epsilon)\n  );\n};\n\n/**\n * Creates a string representing this Color in the format '(red, green, blue, alpha)'.\n *\n * @returns {String} A string representing this Color in the format '(red, green, blue, alpha)'.\n */\nColor.prototype.toString = function () {\n  return (\n    \"(\" +\n    this.red +\n    \", \" +\n    this.green +\n    \", \" +\n    this.blue +\n    \", \" +\n    this.alpha +\n    \")\"\n  );\n};\n\n/**\n * Creates a string containing the CSS color value for this color.\n *\n * @returns {String} The CSS equivalent of this color.\n *\n * @see {@link http://www.w3.org/TR/css3-color/#rgba-color|CSS RGB or RGBA color values}\n */\nColor.prototype.toCssColorString = function () {\n  var red = Color.floatToByte(this.red);\n  var green = Color.floatToByte(this.green);\n  var blue = Color.floatToByte(this.blue);\n  if (this.alpha === 1) {\n    return \"rgb(\" + red + \",\" + green + \",\" + blue + \")\";\n  }\n  return \"rgba(\" + red + \",\" + green + \",\" + blue + \",\" + this.alpha + \")\";\n};\n\n/**\n * Creates a string containing CSS hex string color value for this color.\n *\n * @returns {String} The CSS hex string equivalent of this color.\n */\nColor.prototype.toCssHexString = function () {\n  var r = Color.floatToByte(this.red).toString(16);\n  if (r.length < 2) {\n    r = \"0\" + r;\n  }\n  var g = Color.floatToByte(this.green).toString(16);\n  if (g.length < 2) {\n    g = \"0\" + g;\n  }\n  var b = Color.floatToByte(this.blue).toString(16);\n  if (b.length < 2) {\n    b = \"0\" + b;\n  }\n  if (this.alpha < 1) {\n    var hexAlpha = Color.floatToByte(this.alpha).toString(16);\n    if (hexAlpha.length < 2) {\n      hexAlpha = \"0\" + hexAlpha;\n    }\n    return \"#\" + r + g + b + hexAlpha;\n  }\n  return \"#\" + r + g + b;\n};\n\n/**\n * Converts this color to an array of red, green, blue, and alpha values\n * that are in the range of 0 to 255.\n *\n * @param {Number[]} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {Number[]} The modified result parameter or a new instance if result was undefined.\n */\nColor.prototype.toBytes = function (result) {\n  var red = Color.floatToByte(this.red);\n  var green = Color.floatToByte(this.green);\n  var blue = Color.floatToByte(this.blue);\n  var alpha = Color.floatToByte(this.alpha);\n\n  if (!defined(result)) {\n    return [red, green, blue, alpha];\n  }\n  result[0] = red;\n  result[1] = green;\n  result[2] = blue;\n  result[3] = alpha;\n  return result;\n};\n\n/**\n * Converts this color to a single numeric unsigned 32-bit RGBA value, using the endianness\n * of the system.\n *\n * @returns {Number} A single numeric unsigned 32-bit RGBA value.\n *\n *\n * @example\n * var rgba = Cesium.Color.BLUE.toRgba();\n *\n * @see Color.fromRgba\n */\nColor.prototype.toRgba = function () {\n  // scratchUint32Array and scratchUint8Array share an underlying array buffer\n  scratchUint8Array[0] = Color.floatToByte(this.red);\n  scratchUint8Array[1] = Color.floatToByte(this.green);\n  scratchUint8Array[2] = Color.floatToByte(this.blue);\n  scratchUint8Array[3] = Color.floatToByte(this.alpha);\n  return scratchUint32Array[0];\n};\n\n/**\n * Brightens this color by the provided magnitude.\n *\n * @param {Number} magnitude A positive number indicating the amount to brighten.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n *\n * @example\n * var brightBlue = Cesium.Color.BLUE.brighten(0.5, new Cesium.Color());\n */\nColor.prototype.brighten = function (magnitude, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"magnitude\", magnitude);\n  Check.typeOf.number.greaterThanOrEquals(\"magnitude\", magnitude, 0.0);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  magnitude = 1.0 - magnitude;\n  result.red = 1.0 - (1.0 - this.red) * magnitude;\n  result.green = 1.0 - (1.0 - this.green) * magnitude;\n  result.blue = 1.0 - (1.0 - this.blue) * magnitude;\n  result.alpha = this.alpha;\n  return result;\n};\n\n/**\n * Darkens this color by the provided magnitude.\n *\n * @param {Number} magnitude A positive number indicating the amount to darken.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n *\n * @example\n * var darkBlue = Cesium.Color.BLUE.darken(0.5, new Cesium.Color());\n */\nColor.prototype.darken = function (magnitude, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"magnitude\", magnitude);\n  Check.typeOf.number.greaterThanOrEquals(\"magnitude\", magnitude, 0.0);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  magnitude = 1.0 - magnitude;\n  result.red = this.red * magnitude;\n  result.green = this.green * magnitude;\n  result.blue = this.blue * magnitude;\n  result.alpha = this.alpha;\n  return result;\n};\n\n/**\n * Creates a new Color that has the same red, green, and blue components\n * as this Color, but with the specified alpha value.\n *\n * @param {Number} alpha The new alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n *\n * @example var translucentRed = Cesium.Color.RED.withAlpha(0.9);\n */\nColor.prototype.withAlpha = function (alpha, result) {\n  return Color.fromAlpha(this, alpha, result);\n};\n\n/**\n * Computes the componentwise sum of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red + right.red;\n  result.green = left.green + right.green;\n  result.blue = left.blue + right.blue;\n  result.alpha = left.alpha + right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise difference of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red - right.red;\n  result.green = left.green - right.green;\n  result.blue = left.blue - right.blue;\n  result.alpha = left.alpha - right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise product of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.multiply = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red * right.red;\n  result.green = left.green * right.green;\n  result.blue = left.blue * right.blue;\n  result.alpha = left.alpha * right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise quotient of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.divide = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red / right.red;\n  result.green = left.green / right.green;\n  result.blue = left.blue / right.blue;\n  result.alpha = left.alpha / right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise modulus of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.mod = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red % right.red;\n  result.green = left.green % right.green;\n  result.blue = left.blue % right.blue;\n  result.alpha = left.alpha % right.alpha;\n  return result;\n};\n\n/**\n * Computes the linear interpolation or extrapolation at t between the provided colors.\n *\n * @param {Color} start The color corresponding to t at 0.0.\n * @param {Color} end The color corresponding to t at 1.0.\n * @param {Number} t The point along t at which to interpolate.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.lerp = function (start, end, t, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"start\", start);\n  Check.typeOf.object(\"end\", end);\n  Check.typeOf.number(\"t\", t);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = CesiumMath.lerp(start.red, end.red, t);\n  result.green = CesiumMath.lerp(start.green, end.green, t);\n  result.blue = CesiumMath.lerp(start.blue, end.blue, t);\n  result.alpha = CesiumMath.lerp(start.alpha, end.alpha, t);\n  return result;\n};\n\n/**\n * Multiplies the provided Color componentwise by the provided scalar.\n *\n * @param {Color} color The Color to be scaled.\n * @param {Number} scalar The scalar to multiply with.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.multiplyByScalar = function (color, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = color.red * scalar;\n  result.green = color.green * scalar;\n  result.blue = color.blue * scalar;\n  result.alpha = color.alpha * scalar;\n  return result;\n};\n\n/**\n * Divides the provided Color componentwise by the provided scalar.\n *\n * @param {Color} color The Color to be divided.\n * @param {Number} scalar The scalar to divide with.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.divideByScalar = function (color, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = color.red / scalar;\n  result.green = color.green / scalar;\n  result.blue = color.blue / scalar;\n  result.alpha = color.alpha / scalar;\n  return result;\n};\n\n/**\n * An immutable Color instance initialized to CSS color #F0F8FF\n * <span class=\"colorSwath\" style=\"background: #F0F8FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ALICEBLUE = Object.freeze(Color.fromCssColorString(\"#F0F8FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAEBD7\n * <span class=\"colorSwath\" style=\"background: #FAEBD7;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ANTIQUEWHITE = Object.freeze(Color.fromCssColorString(\"#FAEBD7\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FFFF\n * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AQUA = Object.freeze(Color.fromCssColorString(\"#00FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7FFFD4\n * <span class=\"colorSwath\" style=\"background: #7FFFD4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AQUAMARINE = Object.freeze(Color.fromCssColorString(\"#7FFFD4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F0FFFF\n * <span class=\"colorSwath\" style=\"background: #F0FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AZURE = Object.freeze(Color.fromCssColorString(\"#F0FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5F5DC\n * <span class=\"colorSwath\" style=\"background: #F5F5DC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BEIGE = Object.freeze(Color.fromCssColorString(\"#F5F5DC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4C4\n * <span class=\"colorSwath\" style=\"background: #FFE4C4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BISQUE = Object.freeze(Color.fromCssColorString(\"#FFE4C4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #000000\n * <span class=\"colorSwath\" style=\"background: #000000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLACK = Object.freeze(Color.fromCssColorString(\"#000000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFEBCD\n * <span class=\"colorSwath\" style=\"background: #FFEBCD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLANCHEDALMOND = Object.freeze(Color.fromCssColorString(\"#FFEBCD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #0000FF\n * <span class=\"colorSwath\" style=\"background: #0000FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLUE = Object.freeze(Color.fromCssColorString(\"#0000FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8A2BE2\n * <span class=\"colorSwath\" style=\"background: #8A2BE2;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLUEVIOLET = Object.freeze(Color.fromCssColorString(\"#8A2BE2\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A52A2A\n * <span class=\"colorSwath\" style=\"background: #A52A2A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BROWN = Object.freeze(Color.fromCssColorString(\"#A52A2A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DEB887\n * <span class=\"colorSwath\" style=\"background: #DEB887;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BURLYWOOD = Object.freeze(Color.fromCssColorString(\"#DEB887\"));\n\n/**\n * An immutable Color instance initialized to CSS color #5F9EA0\n * <span class=\"colorSwath\" style=\"background: #5F9EA0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CADETBLUE = Object.freeze(Color.fromCssColorString(\"#5F9EA0\"));\n/**\n * An immutable Color instance initialized to CSS color #7FFF00\n * <span class=\"colorSwath\" style=\"background: #7FFF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CHARTREUSE = Object.freeze(Color.fromCssColorString(\"#7FFF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D2691E\n * <span class=\"colorSwath\" style=\"background: #D2691E;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CHOCOLATE = Object.freeze(Color.fromCssColorString(\"#D2691E\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF7F50\n * <span class=\"colorSwath\" style=\"background: #FF7F50;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORAL = Object.freeze(Color.fromCssColorString(\"#FF7F50\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6495ED\n * <span class=\"colorSwath\" style=\"background: #6495ED;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORNFLOWERBLUE = Object.freeze(Color.fromCssColorString(\"#6495ED\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF8DC\n * <span class=\"colorSwath\" style=\"background: #FFF8DC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORNSILK = Object.freeze(Color.fromCssColorString(\"#FFF8DC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DC143C\n * <span class=\"colorSwath\" style=\"background: #DC143C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CRIMSON = Object.freeze(Color.fromCssColorString(\"#DC143C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FFFF\n * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CYAN = Object.freeze(Color.fromCssColorString(\"#00FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00008B\n * <span class=\"colorSwath\" style=\"background: #00008B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKBLUE = Object.freeze(Color.fromCssColorString(\"#00008B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008B8B\n * <span class=\"colorSwath\" style=\"background: #008B8B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKCYAN = Object.freeze(Color.fromCssColorString(\"#008B8B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B8860B\n * <span class=\"colorSwath\" style=\"background: #B8860B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGOLDENROD = Object.freeze(Color.fromCssColorString(\"#B8860B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A9A9A9\n * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGRAY = Object.freeze(Color.fromCssColorString(\"#A9A9A9\"));\n\n/**\n * An immutable Color instance initialized to CSS color #006400\n * <span class=\"colorSwath\" style=\"background: #006400;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGREEN = Object.freeze(Color.fromCssColorString(\"#006400\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A9A9A9\n * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGREY = Color.DARKGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #BDB76B\n * <span class=\"colorSwath\" style=\"background: #BDB76B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKKHAKI = Object.freeze(Color.fromCssColorString(\"#BDB76B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B008B\n * <span class=\"colorSwath\" style=\"background: #8B008B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKMAGENTA = Object.freeze(Color.fromCssColorString(\"#8B008B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #556B2F\n * <span class=\"colorSwath\" style=\"background: #556B2F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKOLIVEGREEN = Object.freeze(Color.fromCssColorString(\"#556B2F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF8C00\n * <span class=\"colorSwath\" style=\"background: #FF8C00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKORANGE = Object.freeze(Color.fromCssColorString(\"#FF8C00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9932CC\n * <span class=\"colorSwath\" style=\"background: #9932CC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKORCHID = Object.freeze(Color.fromCssColorString(\"#9932CC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B0000\n * <span class=\"colorSwath\" style=\"background: #8B0000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKRED = Object.freeze(Color.fromCssColorString(\"#8B0000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E9967A\n * <span class=\"colorSwath\" style=\"background: #E9967A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSALMON = Object.freeze(Color.fromCssColorString(\"#E9967A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8FBC8F\n * <span class=\"colorSwath\" style=\"background: #8FBC8F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSEAGREEN = Object.freeze(Color.fromCssColorString(\"#8FBC8F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #483D8B\n * <span class=\"colorSwath\" style=\"background: #483D8B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEBLUE = Object.freeze(Color.fromCssColorString(\"#483D8B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2F4F4F\n * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEGRAY = Object.freeze(Color.fromCssColorString(\"#2F4F4F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2F4F4F\n * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEGREY = Color.DARKSLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #00CED1\n * <span class=\"colorSwath\" style=\"background: #00CED1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKTURQUOISE = Object.freeze(Color.fromCssColorString(\"#00CED1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9400D3\n * <span class=\"colorSwath\" style=\"background: #9400D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKVIOLET = Object.freeze(Color.fromCssColorString(\"#9400D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF1493\n * <span class=\"colorSwath\" style=\"background: #FF1493;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DEEPPINK = Object.freeze(Color.fromCssColorString(\"#FF1493\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00BFFF\n * <span class=\"colorSwath\" style=\"background: #00BFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DEEPSKYBLUE = Object.freeze(Color.fromCssColorString(\"#00BFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #696969\n * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DIMGRAY = Object.freeze(Color.fromCssColorString(\"#696969\"));\n\n/**\n * An immutable Color instance initialized to CSS color #696969\n * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DIMGREY = Color.DIMGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #1E90FF\n * <span class=\"colorSwath\" style=\"background: #1E90FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DODGERBLUE = Object.freeze(Color.fromCssColorString(\"#1E90FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B22222\n * <span class=\"colorSwath\" style=\"background: #B22222;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FIREBRICK = Object.freeze(Color.fromCssColorString(\"#B22222\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFAF0\n * <span class=\"colorSwath\" style=\"background: #FFFAF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FLORALWHITE = Object.freeze(Color.fromCssColorString(\"#FFFAF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #228B22\n * <span class=\"colorSwath\" style=\"background: #228B22;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FORESTGREEN = Object.freeze(Color.fromCssColorString(\"#228B22\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF00FF\n * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FUCHSIA = Object.freeze(Color.fromCssColorString(\"#FF00FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DCDCDC\n * <span class=\"colorSwath\" style=\"background: #DCDCDC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GAINSBORO = Object.freeze(Color.fromCssColorString(\"#DCDCDC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F8F8FF\n * <span class=\"colorSwath\" style=\"background: #F8F8FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GHOSTWHITE = Object.freeze(Color.fromCssColorString(\"#F8F8FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFD700\n * <span class=\"colorSwath\" style=\"background: #FFD700;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GOLD = Object.freeze(Color.fromCssColorString(\"#FFD700\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DAA520\n * <span class=\"colorSwath\" style=\"background: #DAA520;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GOLDENROD = Object.freeze(Color.fromCssColorString(\"#DAA520\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808080\n * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GRAY = Object.freeze(Color.fromCssColorString(\"#808080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008000\n * <span class=\"colorSwath\" style=\"background: #008000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREEN = Object.freeze(Color.fromCssColorString(\"#008000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #ADFF2F\n * <span class=\"colorSwath\" style=\"background: #ADFF2F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREENYELLOW = Object.freeze(Color.fromCssColorString(\"#ADFF2F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808080\n * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREY = Color.GRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #F0FFF0\n * <span class=\"colorSwath\" style=\"background: #F0FFF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.HONEYDEW = Object.freeze(Color.fromCssColorString(\"#F0FFF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF69B4\n * <span class=\"colorSwath\" style=\"background: #FF69B4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.HOTPINK = Object.freeze(Color.fromCssColorString(\"#FF69B4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #CD5C5C\n * <span class=\"colorSwath\" style=\"background: #CD5C5C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.INDIANRED = Object.freeze(Color.fromCssColorString(\"#CD5C5C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4B0082\n * <span class=\"colorSwath\" style=\"background: #4B0082;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.INDIGO = Object.freeze(Color.fromCssColorString(\"#4B0082\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFF0\n * <span class=\"colorSwath\" style=\"background: #FFFFF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.IVORY = Object.freeze(Color.fromCssColorString(\"#FFFFF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F0E68C\n * <span class=\"colorSwath\" style=\"background: #F0E68C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.KHAKI = Object.freeze(Color.fromCssColorString(\"#F0E68C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E6E6FA\n * <span class=\"colorSwath\" style=\"background: #E6E6FA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAVENDER = Object.freeze(Color.fromCssColorString(\"#E6E6FA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF0F5\n * <span class=\"colorSwath\" style=\"background: #FFF0F5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAVENDAR_BLUSH = Object.freeze(Color.fromCssColorString(\"#FFF0F5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7CFC00\n * <span class=\"colorSwath\" style=\"background: #7CFC00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAWNGREEN = Object.freeze(Color.fromCssColorString(\"#7CFC00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFACD\n * <span class=\"colorSwath\" style=\"background: #FFFACD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LEMONCHIFFON = Object.freeze(Color.fromCssColorString(\"#FFFACD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #ADD8E6\n * <span class=\"colorSwath\" style=\"background: #ADD8E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTBLUE = Object.freeze(Color.fromCssColorString(\"#ADD8E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F08080\n * <span class=\"colorSwath\" style=\"background: #F08080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTCORAL = Object.freeze(Color.fromCssColorString(\"#F08080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E0FFFF\n * <span class=\"colorSwath\" style=\"background: #E0FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTCYAN = Object.freeze(Color.fromCssColorString(\"#E0FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAFAD2\n * <span class=\"colorSwath\" style=\"background: #FAFAD2;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGOLDENRODYELLOW = Object.freeze(Color.fromCssColorString(\"#FAFAD2\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D3D3D3\n * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGRAY = Object.freeze(Color.fromCssColorString(\"#D3D3D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #90EE90\n * <span class=\"colorSwath\" style=\"background: #90EE90;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGREEN = Object.freeze(Color.fromCssColorString(\"#90EE90\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D3D3D3\n * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGREY = Color.LIGHTGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #FFB6C1\n * <span class=\"colorSwath\" style=\"background: #FFB6C1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTPINK = Object.freeze(Color.fromCssColorString(\"#FFB6C1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #20B2AA\n * <span class=\"colorSwath\" style=\"background: #20B2AA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSEAGREEN = Object.freeze(Color.fromCssColorString(\"#20B2AA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #87CEFA\n * <span class=\"colorSwath\" style=\"background: #87CEFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSKYBLUE = Object.freeze(Color.fromCssColorString(\"#87CEFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #778899\n * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSLATEGRAY = Object.freeze(Color.fromCssColorString(\"#778899\"));\n\n/**\n * An immutable Color instance initialized to CSS color #778899\n * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSLATEGREY = Color.LIGHTSLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #B0C4DE\n * <span class=\"colorSwath\" style=\"background: #B0C4DE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSTEELBLUE = Object.freeze(Color.fromCssColorString(\"#B0C4DE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFE0\n * <span class=\"colorSwath\" style=\"background: #FFFFE0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTYELLOW = Object.freeze(Color.fromCssColorString(\"#FFFFE0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FF00\n * <span class=\"colorSwath\" style=\"background: #00FF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIME = Object.freeze(Color.fromCssColorString(\"#00FF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #32CD32\n * <span class=\"colorSwath\" style=\"background: #32CD32;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIMEGREEN = Object.freeze(Color.fromCssColorString(\"#32CD32\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAF0E6\n * <span class=\"colorSwath\" style=\"background: #FAF0E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LINEN = Object.freeze(Color.fromCssColorString(\"#FAF0E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF00FF\n * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MAGENTA = Object.freeze(Color.fromCssColorString(\"#FF00FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #800000\n * <span class=\"colorSwath\" style=\"background: #800000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MAROON = Object.freeze(Color.fromCssColorString(\"#800000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #66CDAA\n * <span class=\"colorSwath\" style=\"background: #66CDAA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMAQUAMARINE = Object.freeze(Color.fromCssColorString(\"#66CDAA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #0000CD\n * <span class=\"colorSwath\" style=\"background: #0000CD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMBLUE = Object.freeze(Color.fromCssColorString(\"#0000CD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #BA55D3\n * <span class=\"colorSwath\" style=\"background: #BA55D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMORCHID = Object.freeze(Color.fromCssColorString(\"#BA55D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9370DB\n * <span class=\"colorSwath\" style=\"background: #9370DB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMPURPLE = Object.freeze(Color.fromCssColorString(\"#9370DB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #3CB371\n * <span class=\"colorSwath\" style=\"background: #3CB371;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSEAGREEN = Object.freeze(Color.fromCssColorString(\"#3CB371\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7B68EE\n * <span class=\"colorSwath\" style=\"background: #7B68EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSLATEBLUE = Object.freeze(Color.fromCssColorString(\"#7B68EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FA9A\n * <span class=\"colorSwath\" style=\"background: #00FA9A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSPRINGGREEN = Object.freeze(Color.fromCssColorString(\"#00FA9A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #48D1CC\n * <span class=\"colorSwath\" style=\"background: #48D1CC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMTURQUOISE = Object.freeze(Color.fromCssColorString(\"#48D1CC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #C71585\n * <span class=\"colorSwath\" style=\"background: #C71585;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMVIOLETRED = Object.freeze(Color.fromCssColorString(\"#C71585\"));\n\n/**\n * An immutable Color instance initialized to CSS color #191970\n * <span class=\"colorSwath\" style=\"background: #191970;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MIDNIGHTBLUE = Object.freeze(Color.fromCssColorString(\"#191970\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5FFFA\n * <span class=\"colorSwath\" style=\"background: #F5FFFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MINTCREAM = Object.freeze(Color.fromCssColorString(\"#F5FFFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4E1\n * <span class=\"colorSwath\" style=\"background: #FFE4E1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MISTYROSE = Object.freeze(Color.fromCssColorString(\"#FFE4E1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4B5\n * <span class=\"colorSwath\" style=\"background: #FFE4B5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MOCCASIN = Object.freeze(Color.fromCssColorString(\"#FFE4B5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFDEAD\n * <span class=\"colorSwath\" style=\"background: #FFDEAD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.NAVAJOWHITE = Object.freeze(Color.fromCssColorString(\"#FFDEAD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #000080\n * <span class=\"colorSwath\" style=\"background: #000080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.NAVY = Object.freeze(Color.fromCssColorString(\"#000080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FDF5E6\n * <span class=\"colorSwath\" style=\"background: #FDF5E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLDLACE = Object.freeze(Color.fromCssColorString(\"#FDF5E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808000\n * <span class=\"colorSwath\" style=\"background: #808000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLIVE = Object.freeze(Color.fromCssColorString(\"#808000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6B8E23\n * <span class=\"colorSwath\" style=\"background: #6B8E23;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLIVEDRAB = Object.freeze(Color.fromCssColorString(\"#6B8E23\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFA500\n * <span class=\"colorSwath\" style=\"background: #FFA500;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORANGE = Object.freeze(Color.fromCssColorString(\"#FFA500\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF4500\n * <span class=\"colorSwath\" style=\"background: #FF4500;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORANGERED = Object.freeze(Color.fromCssColorString(\"#FF4500\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DA70D6\n * <span class=\"colorSwath\" style=\"background: #DA70D6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORCHID = Object.freeze(Color.fromCssColorString(\"#DA70D6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #EEE8AA\n * <span class=\"colorSwath\" style=\"background: #EEE8AA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEGOLDENROD = Object.freeze(Color.fromCssColorString(\"#EEE8AA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #98FB98\n * <span class=\"colorSwath\" style=\"background: #98FB98;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEGREEN = Object.freeze(Color.fromCssColorString(\"#98FB98\"));\n\n/**\n * An immutable Color instance initialized to CSS color #AFEEEE\n * <span class=\"colorSwath\" style=\"background: #AFEEEE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALETURQUOISE = Object.freeze(Color.fromCssColorString(\"#AFEEEE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DB7093\n * <span class=\"colorSwath\" style=\"background: #DB7093;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEVIOLETRED = Object.freeze(Color.fromCssColorString(\"#DB7093\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFEFD5\n * <span class=\"colorSwath\" style=\"background: #FFEFD5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PAPAYAWHIP = Object.freeze(Color.fromCssColorString(\"#FFEFD5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFDAB9\n * <span class=\"colorSwath\" style=\"background: #FFDAB9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PEACHPUFF = Object.freeze(Color.fromCssColorString(\"#FFDAB9\"));\n\n/**\n * An immutable Color instance initialized to CSS color #CD853F\n * <span class=\"colorSwath\" style=\"background: #CD853F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PERU = Object.freeze(Color.fromCssColorString(\"#CD853F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFC0CB\n * <span class=\"colorSwath\" style=\"background: #FFC0CB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PINK = Object.freeze(Color.fromCssColorString(\"#FFC0CB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DDA0DD\n * <span class=\"colorSwath\" style=\"background: #DDA0DD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PLUM = Object.freeze(Color.fromCssColorString(\"#DDA0DD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B0E0E6\n * <span class=\"colorSwath\" style=\"background: #B0E0E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.POWDERBLUE = Object.freeze(Color.fromCssColorString(\"#B0E0E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #800080\n * <span class=\"colorSwath\" style=\"background: #800080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PURPLE = Object.freeze(Color.fromCssColorString(\"#800080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF0000\n * <span class=\"colorSwath\" style=\"background: #FF0000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.RED = Object.freeze(Color.fromCssColorString(\"#FF0000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #BC8F8F\n * <span class=\"colorSwath\" style=\"background: #BC8F8F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ROSYBROWN = Object.freeze(Color.fromCssColorString(\"#BC8F8F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4169E1\n * <span class=\"colorSwath\" style=\"background: #4169E1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ROYALBLUE = Object.freeze(Color.fromCssColorString(\"#4169E1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B4513\n * <span class=\"colorSwath\" style=\"background: #8B4513;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SADDLEBROWN = Object.freeze(Color.fromCssColorString(\"#8B4513\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FA8072\n * <span class=\"colorSwath\" style=\"background: #FA8072;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SALMON = Object.freeze(Color.fromCssColorString(\"#FA8072\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F4A460\n * <span class=\"colorSwath\" style=\"background: #F4A460;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SANDYBROWN = Object.freeze(Color.fromCssColorString(\"#F4A460\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2E8B57\n * <span class=\"colorSwath\" style=\"background: #2E8B57;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SEAGREEN = Object.freeze(Color.fromCssColorString(\"#2E8B57\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF5EE\n * <span class=\"colorSwath\" style=\"background: #FFF5EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SEASHELL = Object.freeze(Color.fromCssColorString(\"#FFF5EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A0522D\n * <span class=\"colorSwath\" style=\"background: #A0522D;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SIENNA = Object.freeze(Color.fromCssColorString(\"#A0522D\"));\n\n/**\n * An immutable Color instance initialized to CSS color #C0C0C0\n * <span class=\"colorSwath\" style=\"background: #C0C0C0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SILVER = Object.freeze(Color.fromCssColorString(\"#C0C0C0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #87CEEB\n * <span class=\"colorSwath\" style=\"background: #87CEEB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SKYBLUE = Object.freeze(Color.fromCssColorString(\"#87CEEB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6A5ACD\n * <span class=\"colorSwath\" style=\"background: #6A5ACD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEBLUE = Object.freeze(Color.fromCssColorString(\"#6A5ACD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #708090\n * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEGRAY = Object.freeze(Color.fromCssColorString(\"#708090\"));\n\n/**\n * An immutable Color instance initialized to CSS color #708090\n * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEGREY = Color.SLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #FFFAFA\n * <span class=\"colorSwath\" style=\"background: #FFFAFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SNOW = Object.freeze(Color.fromCssColorString(\"#FFFAFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FF7F\n * <span class=\"colorSwath\" style=\"background: #00FF7F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SPRINGGREEN = Object.freeze(Color.fromCssColorString(\"#00FF7F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4682B4\n * <span class=\"colorSwath\" style=\"background: #4682B4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.STEELBLUE = Object.freeze(Color.fromCssColorString(\"#4682B4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D2B48C\n * <span class=\"colorSwath\" style=\"background: #D2B48C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TAN = Object.freeze(Color.fromCssColorString(\"#D2B48C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008080\n * <span class=\"colorSwath\" style=\"background: #008080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TEAL = Object.freeze(Color.fromCssColorString(\"#008080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D8BFD8\n * <span class=\"colorSwath\" style=\"background: #D8BFD8;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.THISTLE = Object.freeze(Color.fromCssColorString(\"#D8BFD8\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF6347\n * <span class=\"colorSwath\" style=\"background: #FF6347;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TOMATO = Object.freeze(Color.fromCssColorString(\"#FF6347\"));\n\n/**\n * An immutable Color instance initialized to CSS color #40E0D0\n * <span class=\"colorSwath\" style=\"background: #40E0D0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TURQUOISE = Object.freeze(Color.fromCssColorString(\"#40E0D0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #EE82EE\n * <span class=\"colorSwath\" style=\"background: #EE82EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.VIOLET = Object.freeze(Color.fromCssColorString(\"#EE82EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5DEB3\n * <span class=\"colorSwath\" style=\"background: #F5DEB3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHEAT = Object.freeze(Color.fromCssColorString(\"#F5DEB3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFFF\n * <span class=\"colorSwath\" style=\"background: #FFFFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHITE = Object.freeze(Color.fromCssColorString(\"#FFFFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5F5F5\n * <span class=\"colorSwath\" style=\"background: #F5F5F5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHITESMOKE = Object.freeze(Color.fromCssColorString(\"#F5F5F5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFF00\n * <span class=\"colorSwath\" style=\"background: #FFFF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.YELLOW = Object.freeze(Color.fromCssColorString(\"#FFFF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9ACD32\n * <span class=\"colorSwath\" style=\"background: #9ACD32;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.YELLOWGREEN = Object.freeze(Color.fromCssColorString(\"#9ACD32\"));\n\n/**\n * An immutable Color instance initialized to CSS transparent.\n * <span class=\"colorSwath\" style=\"background: transparent;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));\nexport default Color;\n"]},"metadata":{},"sourceType":"module"}