{"ast":null,"code":"import DeveloperError from \"../Core/DeveloperError.js\";\n/**\n * Defines the interface for data sources, which turn arbitrary data into a\n * {@link EntityCollection} for generic consumption. This object is an interface\n * for documentation purposes and is not intended to be instantiated directly.\n * @alias DataSource\n * @constructor\n *\n * @see Entity\n * @see DataSourceDisplay\n */\n\nfunction DataSource() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(DataSource.prototype, {\n  /**\n   * Gets a human-readable name for this instance.\n   * @memberof DataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the preferred clock settings for this data source.\n   * @memberof DataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof DataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof DataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof DataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof DataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets an event that will be raised when the value of isLoading changes.\n   * @memberof DataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof DataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof DataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\n\nDataSource.prototype.update = function (time) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * @private\n */\n\n\nDataSource.setLoading = function (dataSource, isLoading) {\n  if (dataSource._isLoading !== isLoading) {\n    if (isLoading) {\n      dataSource._entityCollection.suspendEvents();\n    } else {\n      dataSource._entityCollection.resumeEvents();\n    }\n\n    dataSource._isLoading = isLoading;\n\n    dataSource._loading.raiseEvent(dataSource, isLoading);\n  }\n};\n\nexport default DataSource;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/DataSources/DataSource.js"],"names":["DeveloperError","DataSource","throwInstantiationError","Object","defineProperties","prototype","name","get","clock","entities","isLoading","changedEvent","errorEvent","loadingEvent","show","clustering","update","time","setLoading","dataSource","_isLoading","_entityCollection","suspendEvents","resumeEvents","_loading","raiseEvent"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,2BAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,GAAsB;AACpBD,EAAAA,cAAc,CAACE,uBAAf;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBH,UAAU,CAACI,SAAnC,EAA8C;AAC5C;AACF;AACA;AACA;AACA;AACEC,EAAAA,IAAI,EAAE;AACJC,IAAAA,GAAG,EAAEP,cAAc,CAACE;AADhB,GANsC;;AAS5C;AACF;AACA;AACA;AACA;AACEM,EAAAA,KAAK,EAAE;AACLD,IAAAA,GAAG,EAAEP,cAAc,CAACE;AADf,GAdqC;;AAiB5C;AACF;AACA;AACA;AACA;AACEO,EAAAA,QAAQ,EAAE;AACRF,IAAAA,GAAG,EAAEP,cAAc,CAACE;AADZ,GAtBkC;;AAyB5C;AACF;AACA;AACA;AACA;AACEQ,EAAAA,SAAS,EAAE;AACTH,IAAAA,GAAG,EAAEP,cAAc,CAACE;AADX,GA9BiC;;AAiC5C;AACF;AACA;AACA;AACA;AACES,EAAAA,YAAY,EAAE;AACZJ,IAAAA,GAAG,EAAEP,cAAc,CAACE;AADR,GAtC8B;;AAyC5C;AACF;AACA;AACA;AACA;AACEU,EAAAA,UAAU,EAAE;AACVL,IAAAA,GAAG,EAAEP,cAAc,CAACE;AADV,GA9CgC;;AAiD5C;AACF;AACA;AACA;AACA;AACEW,EAAAA,YAAY,EAAE;AACZN,IAAAA,GAAG,EAAEP,cAAc,CAACE;AADR,GAtD8B;;AAyD5C;AACF;AACA;AACA;AACA;AACEY,EAAAA,IAAI,EAAE;AACJP,IAAAA,GAAG,EAAEP,cAAc,CAACE;AADhB,GA9DsC;;AAkE5C;AACF;AACA;AACA;AACA;AACA;AACEa,EAAAA,UAAU,EAAE;AACVR,IAAAA,GAAG,EAAEP,cAAc,CAACE;AADV;AAxEgC,CAA9C;AA6EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,UAAU,CAACI,SAAX,CAAqBW,MAArB,GAA8B,UAAUC,IAAV,EAAgB;AAC5CjB,EAAAA,cAAc,CAACE,uBAAf;AACD,CAFD;AAIA;AACA;AACA;;;AACAD,UAAU,CAACiB,UAAX,GAAwB,UAAUC,UAAV,EAAsBT,SAAtB,EAAiC;AACvD,MAAIS,UAAU,CAACC,UAAX,KAA0BV,SAA9B,EAAyC;AACvC,QAAIA,SAAJ,EAAe;AACbS,MAAAA,UAAU,CAACE,iBAAX,CAA6BC,aAA7B;AACD,KAFD,MAEO;AACLH,MAAAA,UAAU,CAACE,iBAAX,CAA6BE,YAA7B;AACD;;AACDJ,IAAAA,UAAU,CAACC,UAAX,GAAwBV,SAAxB;;AACAS,IAAAA,UAAU,CAACK,QAAX,CAAoBC,UAApB,CAA+BN,UAA/B,EAA2CT,SAA3C;AACD;AACF,CAVD;;AAWA,eAAeT,UAAf","sourcesContent":["import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Defines the interface for data sources, which turn arbitrary data into a\n * {@link EntityCollection} for generic consumption. This object is an interface\n * for documentation purposes and is not intended to be instantiated directly.\n * @alias DataSource\n * @constructor\n *\n * @see Entity\n * @see DataSourceDisplay\n */\nfunction DataSource() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(DataSource.prototype, {\n  /**\n   * Gets a human-readable name for this instance.\n   * @memberof DataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the preferred clock settings for this data source.\n   * @memberof DataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof DataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof DataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof DataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof DataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets an event that will be raised when the value of isLoading changes.\n   * @memberof DataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof DataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof DataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nDataSource.prototype.update = function (time) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * @private\n */\nDataSource.setLoading = function (dataSource, isLoading) {\n  if (dataSource._isLoading !== isLoading) {\n    if (isLoading) {\n      dataSource._entityCollection.suspendEvents();\n    } else {\n      dataSource._entityCollection.resumeEvents();\n    }\n    dataSource._isLoading = isLoading;\n    dataSource._loading.raiseEvent(dataSource, isLoading);\n  }\n};\nexport default DataSource;\n"]},"metadata":{},"sourceType":"module"}