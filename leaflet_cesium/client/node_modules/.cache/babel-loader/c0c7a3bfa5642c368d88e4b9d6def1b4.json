{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\n/**\n * A wrapper around arrays so that the internal length of the array can be manually managed.\n *\n * @alias ManagedArray\n * @constructor\n * @private\n *\n * @param {Number} [length=0] The initial length of the array.\n */\n\nfunction ManagedArray(length) {\n  length = defaultValue(length, 0);\n  this._array = new Array(length);\n  this._length = length;\n}\n\nObject.defineProperties(ManagedArray.prototype, {\n  /**\n   * Gets or sets the length of the array.\n   * If the set length is greater than the length of the internal array, the internal array is resized.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Number\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n    set: function (length) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0); //>>includeEnd('debug');\n\n      var array = this._array;\n      var originalLength = this._length;\n\n      if (length < originalLength) {\n        // Remove trailing references\n        for (var i = length; i < originalLength; ++i) {\n          array[i] = undefined;\n        }\n      } else if (length > array.length) {\n        array.length = length;\n      }\n\n      this._length = length;\n    }\n  },\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Array\n   * @readonly\n   */\n  values: {\n    get: function () {\n      return this._array;\n    }\n  }\n});\n/**\n * Gets the element at an index.\n *\n * @param {Number} index The index to get.\n */\n\nManagedArray.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.lessThan(\"index\", index, this._array.length); //>>includeEnd('debug');\n\n  return this._array[index];\n};\n/**\n * Sets the element at an index. Resizes the array if index is greater than the length of the array.\n *\n * @param {Number} index The index to set.\n * @param {*} element The element to set at index.\n */\n\n\nManagedArray.prototype.set = function (index, element) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index); //>>includeEnd('debug');\n\n  if (index >= this._length) {\n    this.length = index + 1;\n  }\n\n  this._array[index] = element;\n};\n/**\n * Returns the last element in the array without modifying the array.\n *\n * @returns {*} The last element in the array.\n */\n\n\nManagedArray.prototype.peek = function () {\n  return this._array[this._length - 1];\n};\n/**\n * Push an element into the array.\n *\n * @param {*} element The element to push.\n */\n\n\nManagedArray.prototype.push = function (element) {\n  var index = this.length++;\n  this._array[index] = element;\n};\n/**\n * Pop an element from the array.\n *\n * @returns {*} The last element in the array.\n */\n\n\nManagedArray.prototype.pop = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n\n  var element = this._array[this._length - 1];\n  --this.length;\n  return element;\n};\n/**\n * Resize the internal array if length > _array.length.\n *\n * @param {Number} length The length.\n */\n\n\nManagedArray.prototype.reserve = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0); //>>includeEnd('debug');\n\n  if (length > this._array.length) {\n    this._array.length = length;\n  }\n};\n/**\n * Resize the array.\n *\n * @param {Number} length The length.\n */\n\n\nManagedArray.prototype.resize = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0); //>>includeEnd('debug');\n\n  this.length = length;\n};\n/**\n * Trim the internal array to the specified length. Defaults to the current length.\n *\n * @param {Number} [length] The length.\n */\n\n\nManagedArray.prototype.trim = function (length) {\n  length = defaultValue(length, this._length);\n  this._array.length = length;\n};\n\nexport default ManagedArray;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Core/ManagedArray.js"],"names":["Check","defaultValue","ManagedArray","length","_array","Array","_length","Object","defineProperties","prototype","get","set","typeOf","number","greaterThanOrEquals","array","originalLength","i","undefined","values","index","lessThan","element","peek","push","pop","reserve","resize","trim"],"mappings":"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","sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\n\n/**\n * A wrapper around arrays so that the internal length of the array can be manually managed.\n *\n * @alias ManagedArray\n * @constructor\n * @private\n *\n * @param {Number} [length=0] The initial length of the array.\n */\nfunction ManagedArray(length) {\n  length = defaultValue(length, 0);\n  this._array = new Array(length);\n  this._length = length;\n}\n\nObject.defineProperties(ManagedArray.prototype, {\n  /**\n   * Gets or sets the length of the array.\n   * If the set length is greater than the length of the internal array, the internal array is resized.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Number\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n    set: function (length) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0);\n      //>>includeEnd('debug');\n      var array = this._array;\n      var originalLength = this._length;\n      if (length < originalLength) {\n        // Remove trailing references\n        for (var i = length; i < originalLength; ++i) {\n          array[i] = undefined;\n        }\n      } else if (length > array.length) {\n        array.length = length;\n      }\n      this._length = length;\n    },\n  },\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof ManagedArray.prototype\n   * @type Array\n   * @readonly\n   */\n  values: {\n    get: function () {\n      return this._array;\n    },\n  },\n});\n\n/**\n * Gets the element at an index.\n *\n * @param {Number} index The index to get.\n */\nManagedArray.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.lessThan(\"index\", index, this._array.length);\n  //>>includeEnd('debug');\n\n  return this._array[index];\n};\n\n/**\n * Sets the element at an index. Resizes the array if index is greater than the length of the array.\n *\n * @param {Number} index The index to set.\n * @param {*} element The element to set at index.\n */\nManagedArray.prototype.set = function (index, element) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"index\", index);\n  //>>includeEnd('debug');\n\n  if (index >= this._length) {\n    this.length = index + 1;\n  }\n  this._array[index] = element;\n};\n\n/**\n * Returns the last element in the array without modifying the array.\n *\n * @returns {*} The last element in the array.\n */\nManagedArray.prototype.peek = function () {\n  return this._array[this._length - 1];\n};\n\n/**\n * Push an element into the array.\n *\n * @param {*} element The element to push.\n */\nManagedArray.prototype.push = function (element) {\n  var index = this.length++;\n  this._array[index] = element;\n};\n\n/**\n * Pop an element from the array.\n *\n * @returns {*} The last element in the array.\n */\nManagedArray.prototype.pop = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n  var element = this._array[this._length - 1];\n  --this.length;\n  return element;\n};\n\n/**\n * Resize the internal array if length > _array.length.\n *\n * @param {Number} length The length.\n */\nManagedArray.prototype.reserve = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0);\n  //>>includeEnd('debug');\n\n  if (length > this._array.length) {\n    this._array.length = length;\n  }\n};\n\n/**\n * Resize the array.\n *\n * @param {Number} length The length.\n */\nManagedArray.prototype.resize = function (length) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"length\", length, 0);\n  //>>includeEnd('debug');\n\n  this.length = length;\n};\n\n/**\n * Trim the internal array to the specified length. Defaults to the current length.\n *\n * @param {Number} [length] The length.\n */\nManagedArray.prototype.trim = function (length) {\n  length = defaultValue(length, this._length);\n  this._array.length = length;\n};\nexport default ManagedArray;\n"]},"metadata":{},"sourceType":"module"}