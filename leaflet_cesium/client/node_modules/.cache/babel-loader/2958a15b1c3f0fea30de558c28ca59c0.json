{"ast":null,"code":"import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n/**\n * Array implementation of a heap.\n *\n * @alias Heap\n * @constructor\n * @private\n *\n * @param {Object} options Object with the following properties:\n * @param {Heap.ComparatorCallback} options.comparator The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n */\n\nfunction Heap(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.defined(\"options.comparator\", options.comparator); //>>includeEnd('debug');\n\n  this._comparator = options.comparator;\n  this._array = [];\n  this._length = 0;\n  this._maximumLength = undefined;\n}\n\nObject.defineProperties(Heap.prototype, {\n  /**\n   * Gets the length of the heap.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._length;\n    }\n  },\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Array}\n   * @readonly\n   */\n  internalArray: {\n    get: function () {\n      return this._array;\n    }\n  },\n\n  /**\n   * Gets and sets the maximum length of the heap.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Number}\n   */\n  maximumLength: {\n    get: function () {\n      return this._maximumLength;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"maximumLength\", value, 0); //>>includeEnd('debug');\n\n      var originalLength = this._length;\n\n      if (value < originalLength) {\n        var array = this._array; // Remove trailing references\n\n        for (var i = value; i < originalLength; ++i) {\n          array[i] = undefined;\n        }\n\n        this._length = value;\n        array.length = value;\n      }\n\n      this._maximumLength = value;\n    }\n  },\n\n  /**\n   * The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Heap.ComparatorCallback}\n   */\n  comparator: {\n    get: function () {\n      return this._comparator;\n    }\n  }\n});\n\nfunction swap(array, a, b) {\n  var temp = array[a];\n  array[a] = array[b];\n  array[b] = temp;\n}\n/**\n * Resizes the internal array of the heap.\n *\n * @param {Number} [length] The length to resize internal array to. Defaults to the current length of the heap.\n */\n\n\nHeap.prototype.reserve = function (length) {\n  length = defaultValue(length, this._length);\n  this._array.length = length;\n};\n/**\n * Update the heap so that index and all descendants satisfy the heap property.\n *\n * @param {Number} [index=0] The starting index to heapify from.\n */\n\n\nHeap.prototype.heapify = function (index) {\n  index = defaultValue(index, 0);\n  var length = this._length;\n  var comparator = this._comparator;\n  var array = this._array;\n  var candidate = -1;\n  var inserting = true;\n\n  while (inserting) {\n    var right = 2 * (index + 1);\n    var left = right - 1;\n\n    if (left < length && comparator(array[left], array[index]) < 0) {\n      candidate = left;\n    } else {\n      candidate = index;\n    }\n\n    if (right < length && comparator(array[right], array[candidate]) < 0) {\n      candidate = right;\n    }\n\n    if (candidate !== index) {\n      swap(array, candidate, index);\n      index = candidate;\n    } else {\n      inserting = false;\n    }\n  }\n};\n/**\n * Resort the heap.\n */\n\n\nHeap.prototype.resort = function () {\n  var length = this._length;\n\n  for (var i = Math.ceil(length / 2); i >= 0; --i) {\n    this.heapify(i);\n  }\n};\n/**\n * Insert an element into the heap. If the length would grow greater than maximumLength\n * of the heap, extra elements are removed.\n *\n * @param {*} element The element to insert\n *\n * @return {*} The element that was removed from the heap if the heap is at full capacity.\n */\n\n\nHeap.prototype.insert = function (element) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"element\", element); //>>includeEnd('debug');\n\n  var array = this._array;\n  var comparator = this._comparator;\n  var maximumLength = this._maximumLength;\n  var index = this._length++;\n\n  if (index < array.length) {\n    array[index] = element;\n  } else {\n    array.push(element);\n  }\n\n  while (index !== 0) {\n    var parent = Math.floor((index - 1) / 2);\n\n    if (comparator(array[index], array[parent]) < 0) {\n      swap(array, index, parent);\n      index = parent;\n    } else {\n      break;\n    }\n  }\n\n  var removedElement;\n\n  if (defined(maximumLength) && this._length > maximumLength) {\n    removedElement = array[maximumLength];\n    this._length = maximumLength;\n  }\n\n  return removedElement;\n};\n/**\n * Remove the element specified by index from the heap and return it.\n *\n * @param {Number} [index=0] The index to remove.\n * @returns {*} The specified element of the heap.\n */\n\n\nHeap.prototype.pop = function (index) {\n  index = defaultValue(index, 0);\n\n  if (this._length === 0) {\n    return undefined;\n  } //>>includeStart('debug', pragmas.debug);\n\n\n  Check.typeOf.number.lessThan(\"index\", index, this._length); //>>includeEnd('debug');\n\n  var array = this._array;\n  var root = array[index];\n  swap(array, index, --this._length);\n  this.heapify(index);\n  array[this._length] = undefined; // Remove trailing reference\n\n  return root;\n};\n/**\n * The comparator to use for the heap.\n * @callback Heap.ComparatorCallback\n * @param {*} a An element in the heap.\n * @param {*} b An element in the heap.\n * @returns {Number} If the result of the comparison is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n */\n\n\nexport default Heap;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Core/Heap.js"],"names":["Check","defaultValue","defined","Heap","options","typeOf","object","comparator","_comparator","_array","_length","_maximumLength","undefined","Object","defineProperties","prototype","length","get","internalArray","maximumLength","set","value","number","greaterThanOrEquals","originalLength","array","i","swap","a","b","temp","reserve","heapify","index","candidate","inserting","right","left","resort","Math","ceil","insert","element","push","parent","floor","removedElement","pop","lessThan","root"],"mappings":"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","sourcesContent":["import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Array implementation of a heap.\n *\n * @alias Heap\n * @constructor\n * @private\n *\n * @param {Object} options Object with the following properties:\n * @param {Heap.ComparatorCallback} options.comparator The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n */\nfunction Heap(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.defined(\"options.comparator\", options.comparator);\n  //>>includeEnd('debug');\n\n  this._comparator = options.comparator;\n  this._array = [];\n  this._length = 0;\n  this._maximumLength = undefined;\n}\n\nObject.defineProperties(Heap.prototype, {\n  /**\n   * Gets the length of the heap.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n  },\n\n  /**\n   * Gets the internal array.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Array}\n   * @readonly\n   */\n  internalArray: {\n    get: function () {\n      return this._array;\n    },\n  },\n\n  /**\n   * Gets and sets the maximum length of the heap.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Number}\n   */\n  maximumLength: {\n    get: function () {\n      return this._maximumLength;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"maximumLength\", value, 0);\n      //>>includeEnd('debug');\n      var originalLength = this._length;\n      if (value < originalLength) {\n        var array = this._array;\n        // Remove trailing references\n        for (var i = value; i < originalLength; ++i) {\n          array[i] = undefined;\n        }\n        this._length = value;\n        array.length = value;\n      }\n      this._maximumLength = value;\n    },\n  },\n\n  /**\n   * The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n   *\n   * @memberof Heap.prototype\n   *\n   * @type {Heap.ComparatorCallback}\n   */\n  comparator: {\n    get: function () {\n      return this._comparator;\n    },\n  },\n});\n\nfunction swap(array, a, b) {\n  var temp = array[a];\n  array[a] = array[b];\n  array[b] = temp;\n}\n\n/**\n * Resizes the internal array of the heap.\n *\n * @param {Number} [length] The length to resize internal array to. Defaults to the current length of the heap.\n */\nHeap.prototype.reserve = function (length) {\n  length = defaultValue(length, this._length);\n  this._array.length = length;\n};\n\n/**\n * Update the heap so that index and all descendants satisfy the heap property.\n *\n * @param {Number} [index=0] The starting index to heapify from.\n */\nHeap.prototype.heapify = function (index) {\n  index = defaultValue(index, 0);\n  var length = this._length;\n  var comparator = this._comparator;\n  var array = this._array;\n  var candidate = -1;\n  var inserting = true;\n\n  while (inserting) {\n    var right = 2 * (index + 1);\n    var left = right - 1;\n\n    if (left < length && comparator(array[left], array[index]) < 0) {\n      candidate = left;\n    } else {\n      candidate = index;\n    }\n\n    if (right < length && comparator(array[right], array[candidate]) < 0) {\n      candidate = right;\n    }\n    if (candidate !== index) {\n      swap(array, candidate, index);\n      index = candidate;\n    } else {\n      inserting = false;\n    }\n  }\n};\n\n/**\n * Resort the heap.\n */\nHeap.prototype.resort = function () {\n  var length = this._length;\n  for (var i = Math.ceil(length / 2); i >= 0; --i) {\n    this.heapify(i);\n  }\n};\n\n/**\n * Insert an element into the heap. If the length would grow greater than maximumLength\n * of the heap, extra elements are removed.\n *\n * @param {*} element The element to insert\n *\n * @return {*} The element that was removed from the heap if the heap is at full capacity.\n */\nHeap.prototype.insert = function (element) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"element\", element);\n  //>>includeEnd('debug');\n\n  var array = this._array;\n  var comparator = this._comparator;\n  var maximumLength = this._maximumLength;\n\n  var index = this._length++;\n  if (index < array.length) {\n    array[index] = element;\n  } else {\n    array.push(element);\n  }\n\n  while (index !== 0) {\n    var parent = Math.floor((index - 1) / 2);\n    if (comparator(array[index], array[parent]) < 0) {\n      swap(array, index, parent);\n      index = parent;\n    } else {\n      break;\n    }\n  }\n\n  var removedElement;\n\n  if (defined(maximumLength) && this._length > maximumLength) {\n    removedElement = array[maximumLength];\n    this._length = maximumLength;\n  }\n\n  return removedElement;\n};\n\n/**\n * Remove the element specified by index from the heap and return it.\n *\n * @param {Number} [index=0] The index to remove.\n * @returns {*} The specified element of the heap.\n */\nHeap.prototype.pop = function (index) {\n  index = defaultValue(index, 0);\n  if (this._length === 0) {\n    return undefined;\n  }\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.lessThan(\"index\", index, this._length);\n  //>>includeEnd('debug');\n\n  var array = this._array;\n  var root = array[index];\n  swap(array, index, --this._length);\n  this.heapify(index);\n  array[this._length] = undefined; // Remove trailing reference\n  return root;\n};\n\n/**\n * The comparator to use for the heap.\n * @callback Heap.ComparatorCallback\n * @param {*} a An element in the heap.\n * @param {*} b An element in the heap.\n * @returns {Number} If the result of the comparison is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\n */\nexport default Heap;\n"]},"metadata":{},"sourceType":"module"}