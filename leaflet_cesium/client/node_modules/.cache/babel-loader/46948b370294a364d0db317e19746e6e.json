{"ast":null,"code":"import when from \"../ThirdParty/when.js\";\nimport Check from \"./Check.js\";\n/**\n * Initiates a terrain height query for an array of {@link Cartographic} positions by\n * requesting tiles from a terrain provider, sampling, and interpolating.  The interpolation\n * matches the triangles used to render the terrain at the specified level.  The query\n * happens asynchronously, so this function returns a promise that is resolved when\n * the query completes.  Each point height is modified in place.  If a height can not be\n * determined because no terrain data is available for the specified level at that location,\n * or another error occurs, the height is set to undefined.  As is typical of the\n * {@link Cartographic} type, the supplied height is a height above the reference ellipsoid\n * (such as {@link Ellipsoid.WGS84}) rather than an altitude above mean sea level.  In other\n * words, it will not necessarily be 0.0 if sampled in the ocean. This function needs the\n * terrain level of detail as input, if you need to get the altitude of the terrain as precisely\n * as possible (i.e. with maximum level of detail) use {@link sampleTerrainMostDetailed}.\n *\n * @function sampleTerrain\n *\n * @param {TerrainProvider} terrainProvider The terrain provider from which to query heights.\n * @param {Number} level The terrain level-of-detail from which to query terrain heights.\n * @param {Cartographic[]} positions The positions to update with terrain heights.\n * @returns {Promise.<Cartographic[]>} A promise that resolves to the provided list of positions when terrain the query has completed.\n *\n * @see sampleTerrainMostDetailed\n *\n * @example\n * // Query the terrain height of two Cartographic positions\n * var terrainProvider = Cesium.createWorldTerrain();\n * var positions = [\n *     Cesium.Cartographic.fromDegrees(86.925145, 27.988257),\n *     Cesium.Cartographic.fromDegrees(87.0, 28.0)\n * ];\n * var promise = Cesium.sampleTerrain(terrainProvider, 11, positions);\n * Cesium.when(promise, function(updatedPositions) {\n *     // positions[0].height and positions[1].height have been updated.\n *     // updatedPositions is just a reference to positions.\n * });\n */\n\nfunction sampleTerrain(terrainProvider, level, positions) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"terrainProvider\", terrainProvider);\n  Check.typeOf.number(\"level\", level);\n  Check.defined(\"positions\", positions); //>>includeEnd('debug');\n\n  return terrainProvider.readyPromise.then(function () {\n    return doSampling(terrainProvider, level, positions);\n  });\n}\n\nfunction doSampling(terrainProvider, level, positions) {\n  var tilingScheme = terrainProvider.tilingScheme;\n  var i; // Sort points into a set of tiles\n\n  var tileRequests = []; // Result will be an Array as it's easier to work with\n\n  var tileRequestSet = {}; // A unique set\n\n  for (i = 0; i < positions.length; ++i) {\n    var xy = tilingScheme.positionToTileXY(positions[i], level);\n    var key = xy.toString();\n\n    if (!tileRequestSet.hasOwnProperty(key)) {\n      // When tile is requested for the first time\n      var value = {\n        x: xy.x,\n        y: xy.y,\n        level: level,\n        tilingScheme: tilingScheme,\n        terrainProvider: terrainProvider,\n        positions: []\n      };\n      tileRequestSet[key] = value;\n      tileRequests.push(value);\n    } // Now append to array of points for the tile\n\n\n    tileRequestSet[key].positions.push(positions[i]);\n  } // Send request for each required tile\n\n\n  var tilePromises = [];\n\n  for (i = 0; i < tileRequests.length; ++i) {\n    var tileRequest = tileRequests[i];\n    var requestPromise = tileRequest.terrainProvider.requestTileGeometry(tileRequest.x, tileRequest.y, tileRequest.level);\n    var tilePromise = requestPromise.then(createInterpolateFunction(tileRequest)).otherwise(createMarkFailedFunction(tileRequest));\n    tilePromises.push(tilePromise);\n  }\n\n  return when.all(tilePromises, function () {\n    return positions;\n  });\n}\n/**\n * Calls {@link TerrainData#interpolateHeight} on a given {@link TerrainData} for a given {@link Cartographic} and\n *  will assign the height property if the return value is not undefined.\n *\n * If the return value is false; it's suggesting that you should call {@link TerrainData#createMesh} first.\n * @param {Cartographic} position The position to interpolate for and assign the height value to\n * @param {TerrainData} terrainData\n * @param {Rectangle} rectangle\n * @returns {Boolean} If the height was actually interpolated and assigned\n * @private\n */\n\n\nfunction interpolateAndAssignHeight(position, terrainData, rectangle) {\n  var height = terrainData.interpolateHeight(rectangle, position.longitude, position.latitude);\n\n  if (height === undefined) {\n    // if height comes back as undefined, it may implicitly mean the terrain data\n    //  requires us to call TerrainData.createMesh() first (ArcGIS requires this in particular)\n    //  so we'll return false and do that next!\n    return false;\n  }\n\n  position.height = height;\n  return true;\n}\n\nfunction createInterpolateFunction(tileRequest) {\n  var tilePositions = tileRequest.positions;\n  var rectangle = tileRequest.tilingScheme.tileXYToRectangle(tileRequest.x, tileRequest.y, tileRequest.level);\n  return function (terrainData) {\n    var isMeshRequired = false;\n\n    for (var i = 0; i < tilePositions.length; ++i) {\n      var position = tilePositions[i];\n      var isHeightAssigned = interpolateAndAssignHeight(position, terrainData, rectangle); // we've found a position which returned undefined - hinting to us\n      //  that we probably need to create a mesh for this terrain data.\n      // so break out of this loop and create the mesh - then we'll interpolate all the heights again\n\n      if (!isHeightAssigned) {\n        isMeshRequired = true;\n        break;\n      }\n    }\n\n    if (!isMeshRequired) {\n      // all position heights were interpolated - we don't need the mesh\n      return when.resolve();\n    } // create the mesh - and interpolate all the positions again\n\n\n    return terrainData.createMesh({\n      tilingScheme: tileRequest.tilingScheme,\n      x: tileRequest.x,\n      y: tileRequest.y,\n      level: tileRequest.level,\n      // interpolateHeight will divide away the exaggeration - so passing in 1 is fine; it doesn't really matter\n      exaggeration: 1,\n      // don't throttle this mesh creation because we've asked to sample these points;\n      //  so sample them! We don't care how many tiles that is!\n      throttle: false\n    }).then(function () {\n      // mesh has been created - so go through every position (maybe again)\n      //  and re-interpolate the heights - presumably using the mesh this time\n      for (var i = 0; i < tilePositions.length; ++i) {\n        var position = tilePositions[i]; // if it doesn't work this time - that's fine, we tried.\n\n        interpolateAndAssignHeight(position, terrainData, rectangle);\n      }\n    });\n  };\n}\n\nfunction createMarkFailedFunction(tileRequest) {\n  var tilePositions = tileRequest.positions;\n  return function () {\n    for (var i = 0; i < tilePositions.length; ++i) {\n      var position = tilePositions[i];\n      position.height = undefined;\n    }\n  };\n}\n\nexport default sampleTerrain;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Core/sampleTerrain.js"],"names":["when","Check","sampleTerrain","terrainProvider","level","positions","typeOf","object","number","defined","readyPromise","then","doSampling","tilingScheme","i","tileRequests","tileRequestSet","length","xy","positionToTileXY","key","toString","hasOwnProperty","value","x","y","push","tilePromises","tileRequest","requestPromise","requestTileGeometry","tilePromise","createInterpolateFunction","otherwise","createMarkFailedFunction","all","interpolateAndAssignHeight","position","terrainData","rectangle","height","interpolateHeight","longitude","latitude","undefined","tilePositions","tileXYToRectangle","isMeshRequired","isHeightAssigned","resolve","createMesh","exaggeration","throttle"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,eAAvB,EAAwCC,KAAxC,EAA+CC,SAA/C,EAA0D;AACxD;AACAJ,EAAAA,KAAK,CAACK,MAAN,CAAaC,MAAb,CAAoB,iBAApB,EAAuCJ,eAAvC;AACAF,EAAAA,KAAK,CAACK,MAAN,CAAaE,MAAb,CAAoB,OAApB,EAA6BJ,KAA7B;AACAH,EAAAA,KAAK,CAACQ,OAAN,CAAc,WAAd,EAA2BJ,SAA3B,EAJwD,CAKxD;;AAEA,SAAOF,eAAe,CAACO,YAAhB,CAA6BC,IAA7B,CAAkC,YAAY;AACnD,WAAOC,UAAU,CAACT,eAAD,EAAkBC,KAAlB,EAAyBC,SAAzB,CAAjB;AACD,GAFM,CAAP;AAGD;;AAED,SAASO,UAAT,CAAoBT,eAApB,EAAqCC,KAArC,EAA4CC,SAA5C,EAAuD;AACrD,MAAIQ,YAAY,GAAGV,eAAe,CAACU,YAAnC;AAEA,MAAIC,CAAJ,CAHqD,CAKrD;;AACA,MAAIC,YAAY,GAAG,EAAnB,CANqD,CAM9B;;AACvB,MAAIC,cAAc,GAAG,EAArB,CAPqD,CAO5B;;AACzB,OAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGT,SAAS,CAACY,MAA1B,EAAkC,EAAEH,CAApC,EAAuC;AACrC,QAAII,EAAE,GAAGL,YAAY,CAACM,gBAAb,CAA8Bd,SAAS,CAACS,CAAD,CAAvC,EAA4CV,KAA5C,CAAT;AACA,QAAIgB,GAAG,GAAGF,EAAE,CAACG,QAAH,EAAV;;AAEA,QAAI,CAACL,cAAc,CAACM,cAAf,CAA8BF,GAA9B,CAAL,EAAyC;AACvC;AACA,UAAIG,KAAK,GAAG;AACVC,QAAAA,CAAC,EAAEN,EAAE,CAACM,CADI;AAEVC,QAAAA,CAAC,EAAEP,EAAE,CAACO,CAFI;AAGVrB,QAAAA,KAAK,EAAEA,KAHG;AAIVS,QAAAA,YAAY,EAAEA,YAJJ;AAKVV,QAAAA,eAAe,EAAEA,eALP;AAMVE,QAAAA,SAAS,EAAE;AAND,OAAZ;AAQAW,MAAAA,cAAc,CAACI,GAAD,CAAd,GAAsBG,KAAtB;AACAR,MAAAA,YAAY,CAACW,IAAb,CAAkBH,KAAlB;AACD,KAhBoC,CAkBrC;;;AACAP,IAAAA,cAAc,CAACI,GAAD,CAAd,CAAoBf,SAApB,CAA8BqB,IAA9B,CAAmCrB,SAAS,CAACS,CAAD,CAA5C;AACD,GA5BoD,CA8BrD;;;AACA,MAAIa,YAAY,GAAG,EAAnB;;AACA,OAAKb,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,YAAY,CAACE,MAA7B,EAAqC,EAAEH,CAAvC,EAA0C;AACxC,QAAIc,WAAW,GAAGb,YAAY,CAACD,CAAD,CAA9B;AACA,QAAIe,cAAc,GAAGD,WAAW,CAACzB,eAAZ,CAA4B2B,mBAA5B,CACnBF,WAAW,CAACJ,CADO,EAEnBI,WAAW,CAACH,CAFO,EAGnBG,WAAW,CAACxB,KAHO,CAArB;AAKA,QAAI2B,WAAW,GAAGF,cAAc,CAC7BlB,IADe,CACVqB,yBAAyB,CAACJ,WAAD,CADf,EAEfK,SAFe,CAELC,wBAAwB,CAACN,WAAD,CAFnB,CAAlB;AAGAD,IAAAA,YAAY,CAACD,IAAb,CAAkBK,WAAlB;AACD;;AAED,SAAO/B,IAAI,CAACmC,GAAL,CAASR,YAAT,EAAuB,YAAY;AACxC,WAAOtB,SAAP;AACD,GAFM,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+B,0BAAT,CAAoCC,QAApC,EAA8CC,WAA9C,EAA2DC,SAA3D,EAAsE;AACpE,MAAIC,MAAM,GAAGF,WAAW,CAACG,iBAAZ,CACXF,SADW,EAEXF,QAAQ,CAACK,SAFE,EAGXL,QAAQ,CAACM,QAHE,CAAb;;AAKA,MAAIH,MAAM,KAAKI,SAAf,EAA0B;AACxB;AACA;AACA;AACA,WAAO,KAAP;AACD;;AACDP,EAAAA,QAAQ,CAACG,MAAT,GAAkBA,MAAlB;AACA,SAAO,IAAP;AACD;;AAED,SAASR,yBAAT,CAAmCJ,WAAnC,EAAgD;AAC9C,MAAIiB,aAAa,GAAGjB,WAAW,CAACvB,SAAhC;AACA,MAAIkC,SAAS,GAAGX,WAAW,CAACf,YAAZ,CAAyBiC,iBAAzB,CACdlB,WAAW,CAACJ,CADE,EAEdI,WAAW,CAACH,CAFE,EAGdG,WAAW,CAACxB,KAHE,CAAhB;AAKA,SAAO,UAAUkC,WAAV,EAAuB;AAC5B,QAAIS,cAAc,GAAG,KAArB;;AACA,SAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+B,aAAa,CAAC5B,MAAlC,EAA0C,EAAEH,CAA5C,EAA+C;AAC7C,UAAIuB,QAAQ,GAAGQ,aAAa,CAAC/B,CAAD,CAA5B;AACA,UAAIkC,gBAAgB,GAAGZ,0BAA0B,CAC/CC,QAD+C,EAE/CC,WAF+C,EAG/CC,SAH+C,CAAjD,CAF6C,CAO7C;AACA;AACA;;AACA,UAAI,CAACS,gBAAL,EAAuB;AACrBD,QAAAA,cAAc,GAAG,IAAjB;AACA;AACD;AACF;;AAED,QAAI,CAACA,cAAL,EAAqB;AACnB;AACA,aAAO/C,IAAI,CAACiD,OAAL,EAAP;AACD,KArB2B,CAuB5B;;;AACA,WAAOX,WAAW,CACfY,UADI,CACO;AACVrC,MAAAA,YAAY,EAAEe,WAAW,CAACf,YADhB;AAEVW,MAAAA,CAAC,EAAEI,WAAW,CAACJ,CAFL;AAGVC,MAAAA,CAAC,EAAEG,WAAW,CAACH,CAHL;AAIVrB,MAAAA,KAAK,EAAEwB,WAAW,CAACxB,KAJT;AAKV;AACA+C,MAAAA,YAAY,EAAE,CANJ;AAOV;AACA;AACAC,MAAAA,QAAQ,EAAE;AATA,KADP,EAYJzC,IAZI,CAYC,YAAY;AAChB;AACA;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+B,aAAa,CAAC5B,MAAlC,EAA0C,EAAEH,CAA5C,EAA+C;AAC7C,YAAIuB,QAAQ,GAAGQ,aAAa,CAAC/B,CAAD,CAA5B,CAD6C,CAE7C;;AACAsB,QAAAA,0BAA0B,CAACC,QAAD,EAAWC,WAAX,EAAwBC,SAAxB,CAA1B;AACD;AACF,KApBI,CAAP;AAqBD,GA7CD;AA8CD;;AAED,SAASL,wBAAT,CAAkCN,WAAlC,EAA+C;AAC7C,MAAIiB,aAAa,GAAGjB,WAAW,CAACvB,SAAhC;AACA,SAAO,YAAY;AACjB,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+B,aAAa,CAAC5B,MAAlC,EAA0C,EAAEH,CAA5C,EAA+C;AAC7C,UAAIuB,QAAQ,GAAGQ,aAAa,CAAC/B,CAAD,CAA5B;AACAuB,MAAAA,QAAQ,CAACG,MAAT,GAAkBI,SAAlB;AACD;AACF,GALD;AAMD;;AACD,eAAe1C,aAAf","sourcesContent":["import when from \"../ThirdParty/when.js\";\nimport Check from \"./Check.js\";\n\n/**\n * Initiates a terrain height query for an array of {@link Cartographic} positions by\n * requesting tiles from a terrain provider, sampling, and interpolating.  The interpolation\n * matches the triangles used to render the terrain at the specified level.  The query\n * happens asynchronously, so this function returns a promise that is resolved when\n * the query completes.  Each point height is modified in place.  If a height can not be\n * determined because no terrain data is available for the specified level at that location,\n * or another error occurs, the height is set to undefined.  As is typical of the\n * {@link Cartographic} type, the supplied height is a height above the reference ellipsoid\n * (such as {@link Ellipsoid.WGS84}) rather than an altitude above mean sea level.  In other\n * words, it will not necessarily be 0.0 if sampled in the ocean. This function needs the\n * terrain level of detail as input, if you need to get the altitude of the terrain as precisely\n * as possible (i.e. with maximum level of detail) use {@link sampleTerrainMostDetailed}.\n *\n * @function sampleTerrain\n *\n * @param {TerrainProvider} terrainProvider The terrain provider from which to query heights.\n * @param {Number} level The terrain level-of-detail from which to query terrain heights.\n * @param {Cartographic[]} positions The positions to update with terrain heights.\n * @returns {Promise.<Cartographic[]>} A promise that resolves to the provided list of positions when terrain the query has completed.\n *\n * @see sampleTerrainMostDetailed\n *\n * @example\n * // Query the terrain height of two Cartographic positions\n * var terrainProvider = Cesium.createWorldTerrain();\n * var positions = [\n *     Cesium.Cartographic.fromDegrees(86.925145, 27.988257),\n *     Cesium.Cartographic.fromDegrees(87.0, 28.0)\n * ];\n * var promise = Cesium.sampleTerrain(terrainProvider, 11, positions);\n * Cesium.when(promise, function(updatedPositions) {\n *     // positions[0].height and positions[1].height have been updated.\n *     // updatedPositions is just a reference to positions.\n * });\n */\nfunction sampleTerrain(terrainProvider, level, positions) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"terrainProvider\", terrainProvider);\n  Check.typeOf.number(\"level\", level);\n  Check.defined(\"positions\", positions);\n  //>>includeEnd('debug');\n\n  return terrainProvider.readyPromise.then(function () {\n    return doSampling(terrainProvider, level, positions);\n  });\n}\n\nfunction doSampling(terrainProvider, level, positions) {\n  var tilingScheme = terrainProvider.tilingScheme;\n\n  var i;\n\n  // Sort points into a set of tiles\n  var tileRequests = []; // Result will be an Array as it's easier to work with\n  var tileRequestSet = {}; // A unique set\n  for (i = 0; i < positions.length; ++i) {\n    var xy = tilingScheme.positionToTileXY(positions[i], level);\n    var key = xy.toString();\n\n    if (!tileRequestSet.hasOwnProperty(key)) {\n      // When tile is requested for the first time\n      var value = {\n        x: xy.x,\n        y: xy.y,\n        level: level,\n        tilingScheme: tilingScheme,\n        terrainProvider: terrainProvider,\n        positions: [],\n      };\n      tileRequestSet[key] = value;\n      tileRequests.push(value);\n    }\n\n    // Now append to array of points for the tile\n    tileRequestSet[key].positions.push(positions[i]);\n  }\n\n  // Send request for each required tile\n  var tilePromises = [];\n  for (i = 0; i < tileRequests.length; ++i) {\n    var tileRequest = tileRequests[i];\n    var requestPromise = tileRequest.terrainProvider.requestTileGeometry(\n      tileRequest.x,\n      tileRequest.y,\n      tileRequest.level\n    );\n    var tilePromise = requestPromise\n      .then(createInterpolateFunction(tileRequest))\n      .otherwise(createMarkFailedFunction(tileRequest));\n    tilePromises.push(tilePromise);\n  }\n\n  return when.all(tilePromises, function () {\n    return positions;\n  });\n}\n\n/**\n * Calls {@link TerrainData#interpolateHeight} on a given {@link TerrainData} for a given {@link Cartographic} and\n *  will assign the height property if the return value is not undefined.\n *\n * If the return value is false; it's suggesting that you should call {@link TerrainData#createMesh} first.\n * @param {Cartographic} position The position to interpolate for and assign the height value to\n * @param {TerrainData} terrainData\n * @param {Rectangle} rectangle\n * @returns {Boolean} If the height was actually interpolated and assigned\n * @private\n */\nfunction interpolateAndAssignHeight(position, terrainData, rectangle) {\n  var height = terrainData.interpolateHeight(\n    rectangle,\n    position.longitude,\n    position.latitude\n  );\n  if (height === undefined) {\n    // if height comes back as undefined, it may implicitly mean the terrain data\n    //  requires us to call TerrainData.createMesh() first (ArcGIS requires this in particular)\n    //  so we'll return false and do that next!\n    return false;\n  }\n  position.height = height;\n  return true;\n}\n\nfunction createInterpolateFunction(tileRequest) {\n  var tilePositions = tileRequest.positions;\n  var rectangle = tileRequest.tilingScheme.tileXYToRectangle(\n    tileRequest.x,\n    tileRequest.y,\n    tileRequest.level\n  );\n  return function (terrainData) {\n    var isMeshRequired = false;\n    for (var i = 0; i < tilePositions.length; ++i) {\n      var position = tilePositions[i];\n      var isHeightAssigned = interpolateAndAssignHeight(\n        position,\n        terrainData,\n        rectangle\n      );\n      // we've found a position which returned undefined - hinting to us\n      //  that we probably need to create a mesh for this terrain data.\n      // so break out of this loop and create the mesh - then we'll interpolate all the heights again\n      if (!isHeightAssigned) {\n        isMeshRequired = true;\n        break;\n      }\n    }\n\n    if (!isMeshRequired) {\n      // all position heights were interpolated - we don't need the mesh\n      return when.resolve();\n    }\n\n    // create the mesh - and interpolate all the positions again\n    return terrainData\n      .createMesh({\n        tilingScheme: tileRequest.tilingScheme,\n        x: tileRequest.x,\n        y: tileRequest.y,\n        level: tileRequest.level,\n        // interpolateHeight will divide away the exaggeration - so passing in 1 is fine; it doesn't really matter\n        exaggeration: 1,\n        // don't throttle this mesh creation because we've asked to sample these points;\n        //  so sample them! We don't care how many tiles that is!\n        throttle: false,\n      })\n      .then(function () {\n        // mesh has been created - so go through every position (maybe again)\n        //  and re-interpolate the heights - presumably using the mesh this time\n        for (var i = 0; i < tilePositions.length; ++i) {\n          var position = tilePositions[i];\n          // if it doesn't work this time - that's fine, we tried.\n          interpolateAndAssignHeight(position, terrainData, rectangle);\n        }\n      });\n  };\n}\n\nfunction createMarkFailedFunction(tileRequest) {\n  var tilePositions = tileRequest.positions;\n  return function () {\n    for (var i = 0; i < tilePositions.length; ++i) {\n      var position = tilePositions[i];\n      position.height = undefined;\n    }\n  };\n}\nexport default sampleTerrain;\n"]},"metadata":{},"sourceType":"module"}