{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\n/**\n * Properties for controlling globe translucency.\n *\n * @alias GlobeTranslucency\n * @constructor\n */\n\nfunction GlobeTranslucency() {\n  this._enabled = false;\n  this._frontFaceAlpha = 1.0;\n  this._frontFaceAlphaByDistance = undefined;\n  this._backFaceAlpha = 1.0;\n  this._backFaceAlphaByDistance = undefined;\n  this._rectangle = Rectangle.clone(Rectangle.MAX_VALUE);\n}\n\nObject.defineProperties(GlobeTranslucency.prototype, {\n  /**\n   * When true, the globe is rendered as a translucent surface.\n   * <br /><br />\n   * The alpha is computed by blending {@link Globe#material}, {@link Globe#imageryLayers},\n   * and {@link Globe#baseColor}, all of which may contain translucency, and then multiplying by\n   * {@link GlobeTranslucency#frontFaceAlpha} and {@link GlobeTranslucency#frontFaceAlphaByDistance} for front faces and\n   * {@link GlobeTranslucency#backFaceAlpha} and {@link GlobeTranslucency#backFaceAlphaByDistance} for back faces.\n   * When the camera is underground back faces and front faces are swapped, i.e. back-facing geometry\n   * is considered front facing.\n   * <br /><br />\n   * Translucency is disabled by default.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   * @see GlobeTranslucency#frontFaceAlpha\n   * @see GlobeTranslucency#frontFaceAlphaByDistance\n   * @see GlobeTranslucency#backFaceAlpha\n   * @see GlobeTranslucency#backFaceAlphaByDistance\n   */\n  enabled: {\n    get: function () {\n      return this._enabled;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"enabled\", value); //>>includeEnd('debug');\n\n      this._enabled = value;\n    }\n  },\n\n  /**\n   * A constant translucency to apply to front faces of the globe.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Number}\n   * @default 1.0\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#frontFaceAlphaByDistance\n   *\n   * @example\n   * // Set front face translucency to 0.5.\n   * globe.translucency.frontFaceAlpha = 0.5;\n   * globe.translucency.enabled = true;\n   */\n  frontFaceAlpha: {\n    get: function () {\n      return this._frontFaceAlpha;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"frontFaceAlpha\", value, 0.0);\n      Check.typeOf.number.lessThanOrEquals(\"frontFaceAlpha\", value, 1.0); //>>includeEnd('debug');\n\n      this._frontFaceAlpha = value;\n    }\n  },\n\n  /**\n   * Gets or sets near and far translucency properties of front faces of the globe based on the distance to the camera.\n   * The translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the translucency remains clamped to the nearest bound.  If undefined,\n   * frontFaceAlphaByDistance will be disabled.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {NearFarScalar}\n   * @default undefined\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#frontFaceAlpha\n   *\n   * @example\n   * // Example 1.\n   * // Set front face translucency to 0.5 when the\n   * // camera is 1500 meters from the surface and 1.0\n   * // as the camera distance approaches 8.0e6 meters.\n   * globe.translucency.frontFaceAlphaByDistance = new Cesium.NearFarScalar(1.5e2, 0.5, 8.0e6, 1.0);\n   * globe.translucency.enabled = true;\n   *\n   * @example\n   * // Example 2.\n   * // Disable front face translucency by distance\n   * globe.translucency.frontFaceAlphaByDistance = undefined;\n   */\n  frontFaceAlphaByDistance: {\n    get: function () {\n      return this._frontFaceAlphaByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far < value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      } //>>includeEnd('debug');\n\n\n      this._frontFaceAlphaByDistance = NearFarScalar.clone(value, this._frontFaceAlphaByDistance);\n    }\n  },\n\n  /**\n   * A constant translucency to apply to back faces of the globe.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Number}\n   * @default 1.0\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#backFaceAlphaByDistance\n   *\n   * @example\n   * // Set back face translucency to 0.5.\n   * globe.translucency.backFaceAlpha = 0.5;\n   * globe.translucency.enabled = true;\n   */\n  backFaceAlpha: {\n    get: function () {\n      return this._backFaceAlpha;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"backFaceAlpha\", value, 0.0);\n      Check.typeOf.number.lessThanOrEquals(\"backFaceAlpha\", value, 1.0); //>>includeEnd('debug');\n\n      this._backFaceAlpha = value;\n    }\n  },\n\n  /**\n   * Gets or sets near and far translucency properties of back faces of the globe based on the distance to the camera.\n   * The translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the translucency remains clamped to the nearest bound.  If undefined,\n   * backFaceAlphaByDistance will be disabled.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {NearFarScalar}\n   * @default undefined\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#backFaceAlpha\n   *\n   * @example\n   * // Example 1.\n   * // Set back face translucency to 0.5 when the\n   * // camera is 1500 meters from the surface and 1.0\n   * // as the camera distance approaches 8.0e6 meters.\n   * globe.translucency.backFaceAlphaByDistance = new Cesium.NearFarScalar(1.5e2, 0.5, 8.0e6, 1.0);\n   * globe.translucency.enabled = true;\n   *\n   * @example\n   * // Example 2.\n   * // Disable back face translucency by distance\n   * globe.translucency.backFaceAlphaByDistance = undefined;\n   */\n  backFaceAlphaByDistance: {\n    get: function () {\n      return this._backFaceAlphaByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far < value.near) {\n        throw new DeveloperError(\"far distance must be greater than near distance.\");\n      } //>>includeEnd('debug');\n\n\n      this._backFaceAlphaByDistance = NearFarScalar.clone(value, this._backFaceAlphaByDistance);\n    }\n  },\n\n  /**\n   * A property specifying a {@link Rectangle} used to limit translucency to a cartographic area.\n   * Defaults to the maximum extent of cartographic coordinates.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Rectangle}\n   * @default {@link Rectangle.MAX_VALUE}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n    set: function (value) {\n      if (!defined(value)) {\n        value = Rectangle.clone(Rectangle.MAX_VALUE);\n      }\n\n      Rectangle.clone(value, this._rectangle);\n    }\n  }\n});\nexport default GlobeTranslucency;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Scene/GlobeTranslucency.js"],"names":["Check","defined","DeveloperError","NearFarScalar","Rectangle","GlobeTranslucency","_enabled","_frontFaceAlpha","_frontFaceAlphaByDistance","undefined","_backFaceAlpha","_backFaceAlphaByDistance","_rectangle","clone","MAX_VALUE","Object","defineProperties","prototype","enabled","get","set","value","typeOf","bool","frontFaceAlpha","number","greaterThanOrEquals","lessThanOrEquals","frontFaceAlphaByDistance","far","near","backFaceAlpha","backFaceAlphaByDistance","rectangle"],"mappings":"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","sourcesContent":["import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\n\n/**\n * Properties for controlling globe translucency.\n *\n * @alias GlobeTranslucency\n * @constructor\n */\nfunction GlobeTranslucency() {\n  this._enabled = false;\n  this._frontFaceAlpha = 1.0;\n  this._frontFaceAlphaByDistance = undefined;\n  this._backFaceAlpha = 1.0;\n  this._backFaceAlphaByDistance = undefined;\n  this._rectangle = Rectangle.clone(Rectangle.MAX_VALUE);\n}\n\nObject.defineProperties(GlobeTranslucency.prototype, {\n  /**\n   * When true, the globe is rendered as a translucent surface.\n   * <br /><br />\n   * The alpha is computed by blending {@link Globe#material}, {@link Globe#imageryLayers},\n   * and {@link Globe#baseColor}, all of which may contain translucency, and then multiplying by\n   * {@link GlobeTranslucency#frontFaceAlpha} and {@link GlobeTranslucency#frontFaceAlphaByDistance} for front faces and\n   * {@link GlobeTranslucency#backFaceAlpha} and {@link GlobeTranslucency#backFaceAlphaByDistance} for back faces.\n   * When the camera is underground back faces and front faces are swapped, i.e. back-facing geometry\n   * is considered front facing.\n   * <br /><br />\n   * Translucency is disabled by default.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   * @see GlobeTranslucency#frontFaceAlpha\n   * @see GlobeTranslucency#frontFaceAlphaByDistance\n   * @see GlobeTranslucency#backFaceAlpha\n   * @see GlobeTranslucency#backFaceAlphaByDistance\n   */\n  enabled: {\n    get: function () {\n      return this._enabled;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.bool(\"enabled\", value);\n      //>>includeEnd('debug');\n      this._enabled = value;\n    },\n  },\n\n  /**\n   * A constant translucency to apply to front faces of the globe.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Number}\n   * @default 1.0\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#frontFaceAlphaByDistance\n   *\n   * @example\n   * // Set front face translucency to 0.5.\n   * globe.translucency.frontFaceAlpha = 0.5;\n   * globe.translucency.enabled = true;\n   */\n  frontFaceAlpha: {\n    get: function () {\n      return this._frontFaceAlpha;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"frontFaceAlpha\", value, 0.0);\n      Check.typeOf.number.lessThanOrEquals(\"frontFaceAlpha\", value, 1.0);\n      //>>includeEnd('debug');\n      this._frontFaceAlpha = value;\n    },\n  },\n  /**\n   * Gets or sets near and far translucency properties of front faces of the globe based on the distance to the camera.\n   * The translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the translucency remains clamped to the nearest bound.  If undefined,\n   * frontFaceAlphaByDistance will be disabled.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {NearFarScalar}\n   * @default undefined\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#frontFaceAlpha\n   *\n   * @example\n   * // Example 1.\n   * // Set front face translucency to 0.5 when the\n   * // camera is 1500 meters from the surface and 1.0\n   * // as the camera distance approaches 8.0e6 meters.\n   * globe.translucency.frontFaceAlphaByDistance = new Cesium.NearFarScalar(1.5e2, 0.5, 8.0e6, 1.0);\n   * globe.translucency.enabled = true;\n   *\n   * @example\n   * // Example 2.\n   * // Disable front face translucency by distance\n   * globe.translucency.frontFaceAlphaByDistance = undefined;\n   */\n  frontFaceAlphaByDistance: {\n    get: function () {\n      return this._frontFaceAlphaByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far < value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\"\n        );\n      }\n      //>>includeEnd('debug');\n      this._frontFaceAlphaByDistance = NearFarScalar.clone(\n        value,\n        this._frontFaceAlphaByDistance\n      );\n    },\n  },\n\n  /**\n   * A constant translucency to apply to back faces of the globe.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Number}\n   * @default 1.0\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#backFaceAlphaByDistance\n   *\n   * @example\n   * // Set back face translucency to 0.5.\n   * globe.translucency.backFaceAlpha = 0.5;\n   * globe.translucency.enabled = true;\n   */\n  backFaceAlpha: {\n    get: function () {\n      return this._backFaceAlpha;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      Check.typeOf.number.greaterThanOrEquals(\"backFaceAlpha\", value, 0.0);\n      Check.typeOf.number.lessThanOrEquals(\"backFaceAlpha\", value, 1.0);\n      //>>includeEnd('debug');\n      this._backFaceAlpha = value;\n    },\n  },\n  /**\n   * Gets or sets near and far translucency properties of back faces of the globe based on the distance to the camera.\n   * The translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the translucency remains clamped to the nearest bound.  If undefined,\n   * backFaceAlphaByDistance will be disabled.\n   * <br /><br />\n   * {@link GlobeTranslucency#enabled} must be set to true for this option to take effect.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {NearFarScalar}\n   * @default undefined\n   *\n   * @see GlobeTranslucency#enabled\n   * @see GlobeTranslucency#backFaceAlpha\n   *\n   * @example\n   * // Example 1.\n   * // Set back face translucency to 0.5 when the\n   * // camera is 1500 meters from the surface and 1.0\n   * // as the camera distance approaches 8.0e6 meters.\n   * globe.translucency.backFaceAlphaByDistance = new Cesium.NearFarScalar(1.5e2, 0.5, 8.0e6, 1.0);\n   * globe.translucency.enabled = true;\n   *\n   * @example\n   * // Example 2.\n   * // Disable back face translucency by distance\n   * globe.translucency.backFaceAlphaByDistance = undefined;\n   */\n  backFaceAlphaByDistance: {\n    get: function () {\n      return this._backFaceAlphaByDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (defined(value) && value.far < value.near) {\n        throw new DeveloperError(\n          \"far distance must be greater than near distance.\"\n        );\n      }\n      //>>includeEnd('debug');\n      this._backFaceAlphaByDistance = NearFarScalar.clone(\n        value,\n        this._backFaceAlphaByDistance\n      );\n    },\n  },\n\n  /**\n   * A property specifying a {@link Rectangle} used to limit translucency to a cartographic area.\n   * Defaults to the maximum extent of cartographic coordinates.\n   *\n   * @memberof GlobeTranslucency.prototype\n   *\n   * @type {Rectangle}\n   * @default {@link Rectangle.MAX_VALUE}\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n    set: function (value) {\n      if (!defined(value)) {\n        value = Rectangle.clone(Rectangle.MAX_VALUE);\n      }\n      Rectangle.clone(value, this._rectangle);\n    },\n  },\n});\n\nexport default GlobeTranslucency;\n"]},"metadata":{},"sourceType":"module"}