{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n/**\n * @typedef {Object} EllipsoidGraphics.ConstructorOptions\n *\n * Initialization options for the EllipsoidGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the ellipsoid.\n * @property {Property | Cartesian3} [radii] A {@link Cartesian3} Property specifying the radii of the ellipsoid.\n * @property {Property | Cartesian3} [innerRadii] A {@link Cartesian3} Property specifying the inner radii of the ellipsoid.\n * @property {Property | number} [minimumClock=0.0] A Property specifying the minimum clock angle of the ellipsoid.\n * @property {Property | number} [maximumClock=2*PI] A Property specifying the maximum clock angle of the ellipsoid.\n * @property {Property | number} [minimumCone=0.0] A Property specifying the minimum cone angle of the ellipsoid.\n * @property {Property | number} [maximumCone=PI] A Property specifying the maximum cone angle of the ellipsoid.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height from the entity position is relative to.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the ellipsoid is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the ellipsoid.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the ellipsoid is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | number} [stackPartitions=64] A Property specifying the number of stacks.\n * @property {Property | number} [slicePartitions=64] A Property specifying the number of radial slices.\n * @property {Property | number} [subdivisions=128] A Property specifying the number of samples per outline ring, determining the granularity of the curvature.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the ellipsoid casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this ellipsoid will be displayed.\n */\n\n/**\n * Describe an ellipsoid or sphere.  The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias EllipsoidGraphics\n * @constructor\n *\n * @param {EllipsoidGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Spheres%20and%20Ellipsoids.html|Cesium Sandcastle Spheres and Ellipsoids Demo}\n */\n\nfunction EllipsoidGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._radii = undefined;\n  this._radiiSubscription = undefined;\n  this._innerRadii = undefined;\n  this._innerRadiiSubscription = undefined;\n  this._minimumClock = undefined;\n  this._minimumClockSubscription = undefined;\n  this._maximumClock = undefined;\n  this._maximumClockSubscription = undefined;\n  this._minimumCone = undefined;\n  this._minimumConeSubscription = undefined;\n  this._maximumCone = undefined;\n  this._maximumConeSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._stackPartitions = undefined;\n  this._stackPartitionsSubscription = undefined;\n  this._slicePartitions = undefined;\n  this._slicePartitionsSubscription = undefined;\n  this._subdivisions = undefined;\n  this._subdivisionsSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(EllipsoidGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof EllipsoidGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    }\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} {@link Property} specifying the radii of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   */\n  radii: createPropertyDescriptor(\"radii\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} {@link Property} specifying the inner radii of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default radii\n   */\n  innerRadii: createPropertyDescriptor(\"innerRadii\"),\n\n  /**\n   * Gets or sets the Property specifying the minimum clock angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  minimumClock: createPropertyDescriptor(\"minimumClock\"),\n\n  /**\n   * Gets or sets the Property specifying the maximum clock angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 2*PI\n   */\n  maximumClock: createPropertyDescriptor(\"maximumClock\"),\n\n  /**\n   * Gets or sets the Property specifying the minimum cone angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  minimumCone: createPropertyDescriptor(\"minimumCone\"),\n\n  /**\n   * Gets or sets the Property specifying the maximum cone angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default PI\n   */\n  maximumCone: createPropertyDescriptor(\"maximumCone\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the ellipsoid is filled with the provided material.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the ellipsoid is outlined.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the Property specifying the number of stacks.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 64\n   */\n  stackPartitions: createPropertyDescriptor(\"stackPartitions\"),\n\n  /**\n   * Gets or sets the Property specifying the number of radial slices per 360 degrees.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 64\n   */\n  slicePartitions: createPropertyDescriptor(\"slicePartitions\"),\n\n  /**\n   * Gets or sets the Property specifying the number of samples per outline ring, determining the granularity of the curvature.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 128\n   */\n  subdivisions: createPropertyDescriptor(\"subdivisions\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the ellipsoid\n   * casts or receives shadows from light sources.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this ellipsoid will be displayed.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\"distanceDisplayCondition\")\n});\n/**\n * Duplicates this instance.\n *\n * @param {EllipsoidGraphics} [result] The object onto which to store the result.\n * @returns {EllipsoidGraphics} The modified result parameter or a new instance if one was not provided.\n */\n\nEllipsoidGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new EllipsoidGraphics(this);\n  }\n\n  result.show = this.show;\n  result.radii = this.radii;\n  result.innerRadii = this.innerRadii;\n  result.minimumClock = this.minimumClock;\n  result.maximumClock = this.maximumClock;\n  result.minimumCone = this.minimumCone;\n  result.maximumCone = this.maximumCone;\n  result.heightReference = this.heightReference;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.stackPartitions = this.stackPartitions;\n  result.slicePartitions = this.slicePartitions;\n  result.subdivisions = this.subdivisions;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {EllipsoidGraphics} source The object to be merged into this object.\n */\n\n\nEllipsoidGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  } //>>includeEnd('debug');\n\n\n  this.show = defaultValue(this.show, source.show);\n  this.radii = defaultValue(this.radii, source.radii);\n  this.innerRadii = defaultValue(this.innerRadii, source.innerRadii);\n  this.minimumClock = defaultValue(this.minimumClock, source.minimumClock);\n  this.maximumClock = defaultValue(this.maximumClock, source.maximumClock);\n  this.minimumCone = defaultValue(this.minimumCone, source.minimumCone);\n  this.maximumCone = defaultValue(this.maximumCone, source.maximumCone);\n  this.heightReference = defaultValue(this.heightReference, source.heightReference);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.stackPartitions = defaultValue(this.stackPartitions, source.stackPartitions);\n  this.slicePartitions = defaultValue(this.slicePartitions, source.slicePartitions);\n  this.subdivisions = defaultValue(this.subdivisions, source.subdivisions);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(this.distanceDisplayCondition, source.distanceDisplayCondition);\n};\n\nexport default EllipsoidGraphics;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/DataSources/EllipsoidGraphics.js"],"names":["defaultValue","defined","DeveloperError","Event","createMaterialPropertyDescriptor","createPropertyDescriptor","EllipsoidGraphics","options","_definitionChanged","_show","undefined","_showSubscription","_radii","_radiiSubscription","_innerRadii","_innerRadiiSubscription","_minimumClock","_minimumClockSubscription","_maximumClock","_maximumClockSubscription","_minimumCone","_minimumConeSubscription","_maximumCone","_maximumConeSubscription","_heightReference","_heightReferenceSubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_stackPartitions","_stackPartitionsSubscription","_slicePartitions","_slicePartitionsSubscription","_subdivisions","_subdivisionsSubscription","_shadows","_shadowsSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","merge","EMPTY_OBJECT","Object","defineProperties","prototype","definitionChanged","get","show","radii","innerRadii","minimumClock","maximumClock","minimumCone","maximumCone","heightReference","fill","material","outline","outlineColor","outlineWidth","stackPartitions","slicePartitions","subdivisions","shadows","distanceDisplayCondition","clone","result","source"],"mappings":"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","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} EllipsoidGraphics.ConstructorOptions\n *\n * Initialization options for the EllipsoidGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the ellipsoid.\n * @property {Property | Cartesian3} [radii] A {@link Cartesian3} Property specifying the radii of the ellipsoid.\n * @property {Property | Cartesian3} [innerRadii] A {@link Cartesian3} Property specifying the inner radii of the ellipsoid.\n * @property {Property | number} [minimumClock=0.0] A Property specifying the minimum clock angle of the ellipsoid.\n * @property {Property | number} [maximumClock=2*PI] A Property specifying the maximum clock angle of the ellipsoid.\n * @property {Property | number} [minimumCone=0.0] A Property specifying the minimum cone angle of the ellipsoid.\n * @property {Property | number} [maximumCone=PI] A Property specifying the maximum cone angle of the ellipsoid.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height from the entity position is relative to.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the ellipsoid is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the ellipsoid.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the ellipsoid is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | number} [stackPartitions=64] A Property specifying the number of stacks.\n * @property {Property | number} [slicePartitions=64] A Property specifying the number of radial slices.\n * @property {Property | number} [subdivisions=128] A Property specifying the number of samples per outline ring, determining the granularity of the curvature.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the ellipsoid casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this ellipsoid will be displayed.\n */\n\n/**\n * Describe an ellipsoid or sphere.  The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias EllipsoidGraphics\n * @constructor\n *\n * @param {EllipsoidGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Spheres%20and%20Ellipsoids.html|Cesium Sandcastle Spheres and Ellipsoids Demo}\n */\nfunction EllipsoidGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._radii = undefined;\n  this._radiiSubscription = undefined;\n  this._innerRadii = undefined;\n  this._innerRadiiSubscription = undefined;\n  this._minimumClock = undefined;\n  this._minimumClockSubscription = undefined;\n  this._maximumClock = undefined;\n  this._maximumClockSubscription = undefined;\n  this._minimumCone = undefined;\n  this._minimumConeSubscription = undefined;\n  this._maximumCone = undefined;\n  this._maximumConeSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._stackPartitions = undefined;\n  this._stackPartitionsSubscription = undefined;\n  this._slicePartitions = undefined;\n  this._slicePartitionsSubscription = undefined;\n  this._subdivisions = undefined;\n  this._subdivisionsSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(EllipsoidGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof EllipsoidGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} {@link Property} specifying the radii of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   */\n  radii: createPropertyDescriptor(\"radii\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} {@link Property} specifying the inner radii of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default radii\n   */\n  innerRadii: createPropertyDescriptor(\"innerRadii\"),\n\n  /**\n   * Gets or sets the Property specifying the minimum clock angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  minimumClock: createPropertyDescriptor(\"minimumClock\"),\n\n  /**\n   * Gets or sets the Property specifying the maximum clock angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 2*PI\n   */\n  maximumClock: createPropertyDescriptor(\"maximumClock\"),\n\n  /**\n   * Gets or sets the Property specifying the minimum cone angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  minimumCone: createPropertyDescriptor(\"minimumCone\"),\n\n  /**\n   * Gets or sets the Property specifying the maximum cone angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default PI\n   */\n  maximumCone: createPropertyDescriptor(\"maximumCone\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the ellipsoid is filled with the provided material.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the ellipsoid is outlined.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the Property specifying the number of stacks.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 64\n   */\n  stackPartitions: createPropertyDescriptor(\"stackPartitions\"),\n\n  /**\n   * Gets or sets the Property specifying the number of radial slices per 360 degrees.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 64\n   */\n  slicePartitions: createPropertyDescriptor(\"slicePartitions\"),\n\n  /**\n   * Gets or sets the Property specifying the number of samples per outline ring, determining the granularity of the curvature.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 128\n   */\n  subdivisions: createPropertyDescriptor(\"subdivisions\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the ellipsoid\n   * casts or receives shadows from light sources.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this ellipsoid will be displayed.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {EllipsoidGraphics} [result] The object onto which to store the result.\n * @returns {EllipsoidGraphics} The modified result parameter or a new instance if one was not provided.\n */\nEllipsoidGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new EllipsoidGraphics(this);\n  }\n  result.show = this.show;\n  result.radii = this.radii;\n  result.innerRadii = this.innerRadii;\n  result.minimumClock = this.minimumClock;\n  result.maximumClock = this.maximumClock;\n  result.minimumCone = this.minimumCone;\n  result.maximumCone = this.maximumCone;\n  result.heightReference = this.heightReference;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.stackPartitions = this.stackPartitions;\n  result.slicePartitions = this.slicePartitions;\n  result.subdivisions = this.subdivisions;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {EllipsoidGraphics} source The object to be merged into this object.\n */\nEllipsoidGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.radii = defaultValue(this.radii, source.radii);\n  this.innerRadii = defaultValue(this.innerRadii, source.innerRadii);\n  this.minimumClock = defaultValue(this.minimumClock, source.minimumClock);\n  this.maximumClock = defaultValue(this.maximumClock, source.maximumClock);\n  this.minimumCone = defaultValue(this.minimumCone, source.minimumCone);\n  this.maximumCone = defaultValue(this.maximumCone, source.maximumCone);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.stackPartitions = defaultValue(\n    this.stackPartitions,\n    source.stackPartitions\n  );\n  this.slicePartitions = defaultValue(\n    this.slicePartitions,\n    source.slicePartitions\n  );\n  this.subdivisions = defaultValue(this.subdivisions, source.subdivisions);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default EllipsoidGraphics;\n"]},"metadata":{},"sourceType":"module"}