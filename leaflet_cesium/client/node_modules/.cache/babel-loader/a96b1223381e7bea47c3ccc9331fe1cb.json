{"ast":null,"code":"import Color from \"../Core/Color.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport defined from \"../Core/defined.js\";\n/**\n * @private\n */\n\nfunction DebugInspector() {\n  this._cachedShowFrustumsShaders = {};\n}\n\nfunction getAttributeLocations(shaderProgram) {\n  var attributeLocations = {};\n  var attributes = shaderProgram.vertexAttributes;\n\n  for (var a in attributes) {\n    if (attributes.hasOwnProperty(a)) {\n      attributeLocations[a] = attributes[a].index;\n    }\n  }\n\n  return attributeLocations;\n}\n\nfunction createDebugShowFrustumsShaderProgram(scene, shaderProgram) {\n  var context = scene.context;\n  var sp = shaderProgram;\n  var fs = sp.fragmentShaderSource.clone();\n  var targets = [];\n  fs.sources = fs.sources.map(function (source) {\n    source = ShaderSource.replaceMain(source, \"czm_Debug_main\");\n    var re = /gl_FragData\\[(\\d+)\\]/g;\n    var match;\n\n    while ((match = re.exec(source)) !== null) {\n      if (targets.indexOf(match[1]) === -1) {\n        targets.push(match[1]);\n      }\n    }\n\n    return source;\n  });\n  var length = targets.length;\n  var newMain = \"\";\n  newMain += \"uniform vec3 debugShowCommandsColor;\\n\";\n  newMain += \"uniform vec3 debugShowFrustumsColor;\\n\";\n  newMain += \"void main() \\n\" + \"{ \\n\" + \"    czm_Debug_main(); \\n\"; // set debugShowCommandsColor to Color(1.0, 1.0, 1.0, 1.0) to stop rendering scene.debugShowCommands\n  // set debugShowFrustumsColor to Color(1.0, 1.0, 1.0, 1.0) to stop rendering scene.debugShowFrustums\n\n  var i;\n\n  if (length > 0) {\n    for (i = 0; i < length; ++i) {\n      newMain += \"    gl_FragData[\" + targets[i] + \"].rgb *= debugShowCommandsColor;\\n\";\n      newMain += \"    gl_FragData[\" + targets[i] + \"].rgb *= debugShowFrustumsColor;\\n\";\n    }\n  } else {\n    newMain += \"    gl_FragColor.rgb *= debugShowCommandsColor;\\n\";\n    newMain += \"    gl_FragColor.rgb *= debugShowFrustumsColor;\\n\";\n  }\n\n  newMain += \"}\";\n  fs.sources.push(newMain);\n  var attributeLocations = getAttributeLocations(sp);\n  return ShaderProgram.fromCache({\n    context: context,\n    vertexShaderSource: sp.vertexShaderSource,\n    fragmentShaderSource: fs,\n    attributeLocations: attributeLocations\n  });\n}\n\nvar scratchFrustumColor = new Color();\n\nfunction createDebugShowFrustumsUniformMap(scene, command) {\n  // setup uniform for the shader\n  var debugUniformMap;\n\n  if (!defined(command.uniformMap)) {\n    debugUniformMap = {};\n  } else {\n    debugUniformMap = command.uniformMap;\n  }\n\n  if (defined(debugUniformMap.debugShowCommandsColor) || defined(debugUniformMap.debugShowFrustumsColor)) {\n    return debugUniformMap;\n  }\n\n  debugUniformMap.debugShowCommandsColor = function () {\n    if (!scene.debugShowCommands) {\n      return Color.WHITE;\n    }\n\n    if (!defined(command._debugColor)) {\n      command._debugColor = Color.fromRandom();\n    }\n\n    return command._debugColor;\n  };\n\n  debugUniformMap.debugShowFrustumsColor = function () {\n    if (!scene.debugShowFrustums) {\n      return Color.WHITE;\n    } // Support up to three frustums.  If a command overlaps all\n    // three, it's code is not changed.\n\n\n    scratchFrustumColor.red = command.debugOverlappingFrustums & 1 << 0 ? 1.0 : 0.0;\n    scratchFrustumColor.green = command.debugOverlappingFrustums & 1 << 1 ? 1.0 : 0.0;\n    scratchFrustumColor.blue = command.debugOverlappingFrustums & 1 << 2 ? 1.0 : 0.0;\n    scratchFrustumColor.alpha = 1.0;\n    return scratchFrustumColor;\n  };\n\n  return debugUniformMap;\n}\n\nvar scratchShowFrustumCommand = new DrawCommand();\n\nDebugInspector.prototype.executeDebugShowFrustumsCommand = function (scene, command, passState) {\n  // create debug command\n  var shaderProgramId = command.shaderProgram.id;\n  var debugShaderProgram = this._cachedShowFrustumsShaders[shaderProgramId];\n\n  if (!defined(debugShaderProgram)) {\n    debugShaderProgram = createDebugShowFrustumsShaderProgram(scene, command.shaderProgram);\n    this._cachedShowFrustumsShaders[shaderProgramId] = debugShaderProgram;\n  }\n\n  var debugCommand = DrawCommand.shallowClone(command, scratchShowFrustumCommand);\n  debugCommand.shaderProgram = debugShaderProgram;\n  debugCommand.uniformMap = createDebugShowFrustumsUniformMap(scene, command);\n  debugCommand.execute(scene.context, passState);\n};\n\nexport default DebugInspector;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Scene/DebugInspector.js"],"names":["Color","DrawCommand","ShaderSource","ShaderProgram","defined","DebugInspector","_cachedShowFrustumsShaders","getAttributeLocations","shaderProgram","attributeLocations","attributes","vertexAttributes","a","hasOwnProperty","index","createDebugShowFrustumsShaderProgram","scene","context","sp","fs","fragmentShaderSource","clone","targets","sources","map","source","replaceMain","re","match","exec","indexOf","push","length","newMain","i","fromCache","vertexShaderSource","scratchFrustumColor","createDebugShowFrustumsUniformMap","command","debugUniformMap","uniformMap","debugShowCommandsColor","debugShowFrustumsColor","debugShowCommands","WHITE","_debugColor","fromRandom","debugShowFrustums","red","debugOverlappingFrustums","green","blue","alpha","scratchShowFrustumCommand","prototype","executeDebugShowFrustumsCommand","passState","shaderProgramId","id","debugShaderProgram","debugCommand","shallowClone","execute"],"mappings":"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","sourcesContent":["import Color from \"../Core/Color.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * @private\n */\nfunction DebugInspector() {\n  this._cachedShowFrustumsShaders = {};\n}\n\nfunction getAttributeLocations(shaderProgram) {\n  var attributeLocations = {};\n  var attributes = shaderProgram.vertexAttributes;\n  for (var a in attributes) {\n    if (attributes.hasOwnProperty(a)) {\n      attributeLocations[a] = attributes[a].index;\n    }\n  }\n\n  return attributeLocations;\n}\n\nfunction createDebugShowFrustumsShaderProgram(scene, shaderProgram) {\n  var context = scene.context;\n  var sp = shaderProgram;\n  var fs = sp.fragmentShaderSource.clone();\n\n  var targets = [];\n  fs.sources = fs.sources.map(function (source) {\n    source = ShaderSource.replaceMain(source, \"czm_Debug_main\");\n    var re = /gl_FragData\\[(\\d+)\\]/g;\n    var match;\n    while ((match = re.exec(source)) !== null) {\n      if (targets.indexOf(match[1]) === -1) {\n        targets.push(match[1]);\n      }\n    }\n    return source;\n  });\n  var length = targets.length;\n\n  var newMain = \"\";\n  newMain += \"uniform vec3 debugShowCommandsColor;\\n\";\n  newMain += \"uniform vec3 debugShowFrustumsColor;\\n\";\n  newMain += \"void main() \\n\" + \"{ \\n\" + \"    czm_Debug_main(); \\n\";\n\n  // set debugShowCommandsColor to Color(1.0, 1.0, 1.0, 1.0) to stop rendering scene.debugShowCommands\n  // set debugShowFrustumsColor to Color(1.0, 1.0, 1.0, 1.0) to stop rendering scene.debugShowFrustums\n  var i;\n  if (length > 0) {\n    for (i = 0; i < length; ++i) {\n      newMain +=\n        \"    gl_FragData[\" + targets[i] + \"].rgb *= debugShowCommandsColor;\\n\";\n      newMain +=\n        \"    gl_FragData[\" + targets[i] + \"].rgb *= debugShowFrustumsColor;\\n\";\n    }\n  } else {\n    newMain += \"    gl_FragColor.rgb *= debugShowCommandsColor;\\n\";\n    newMain += \"    gl_FragColor.rgb *= debugShowFrustumsColor;\\n\";\n  }\n  newMain += \"}\";\n\n  fs.sources.push(newMain);\n\n  var attributeLocations = getAttributeLocations(sp);\n\n  return ShaderProgram.fromCache({\n    context: context,\n    vertexShaderSource: sp.vertexShaderSource,\n    fragmentShaderSource: fs,\n    attributeLocations: attributeLocations,\n  });\n}\n\nvar scratchFrustumColor = new Color();\nfunction createDebugShowFrustumsUniformMap(scene, command) {\n  // setup uniform for the shader\n  var debugUniformMap;\n  if (!defined(command.uniformMap)) {\n    debugUniformMap = {};\n  } else {\n    debugUniformMap = command.uniformMap;\n  }\n\n  if (\n    defined(debugUniformMap.debugShowCommandsColor) ||\n    defined(debugUniformMap.debugShowFrustumsColor)\n  ) {\n    return debugUniformMap;\n  }\n\n  debugUniformMap.debugShowCommandsColor = function () {\n    if (!scene.debugShowCommands) {\n      return Color.WHITE;\n    }\n\n    if (!defined(command._debugColor)) {\n      command._debugColor = Color.fromRandom();\n    }\n\n    return command._debugColor;\n  };\n\n  debugUniformMap.debugShowFrustumsColor = function () {\n    if (!scene.debugShowFrustums) {\n      return Color.WHITE;\n    }\n\n    // Support up to three frustums.  If a command overlaps all\n    // three, it's code is not changed.\n    scratchFrustumColor.red =\n      command.debugOverlappingFrustums & (1 << 0) ? 1.0 : 0.0;\n    scratchFrustumColor.green =\n      command.debugOverlappingFrustums & (1 << 1) ? 1.0 : 0.0;\n    scratchFrustumColor.blue =\n      command.debugOverlappingFrustums & (1 << 2) ? 1.0 : 0.0;\n    scratchFrustumColor.alpha = 1.0;\n    return scratchFrustumColor;\n  };\n\n  return debugUniformMap;\n}\n\nvar scratchShowFrustumCommand = new DrawCommand();\nDebugInspector.prototype.executeDebugShowFrustumsCommand = function (\n  scene,\n  command,\n  passState\n) {\n  // create debug command\n  var shaderProgramId = command.shaderProgram.id;\n  var debugShaderProgram = this._cachedShowFrustumsShaders[shaderProgramId];\n  if (!defined(debugShaderProgram)) {\n    debugShaderProgram = createDebugShowFrustumsShaderProgram(\n      scene,\n      command.shaderProgram\n    );\n\n    this._cachedShowFrustumsShaders[shaderProgramId] = debugShaderProgram;\n  }\n\n  var debugCommand = DrawCommand.shallowClone(\n    command,\n    scratchShowFrustumCommand\n  );\n  debugCommand.shaderProgram = debugShaderProgram;\n  debugCommand.uniformMap = createDebugShowFrustumsUniformMap(scene, command);\n  debugCommand.execute(scene.context, passState);\n};\nexport default DebugInspector;\n"]},"metadata":{},"sourceType":"module"}