{"ast":null,"code":"import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport BoxGeometry from \"../Core/BoxGeometry.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport clone from \"../Core/clone.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport CullingVolume from \"../Core/CullingVolume.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport EllipsoidGeometry from \"../Core/EllipsoidGeometry.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryPipeline from \"../Core/GeometryPipeline.js\";\nimport Intersect from \"../Core/Intersect.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport mergeSort from \"../Core/mergeSort.js\";\nimport Occluder from \"../Core/Occluder.js\";\nimport OrthographicFrustum from \"../Core/OrthographicFrustum.js\";\nimport OrthographicOffCenterFrustum from \"../Core/OrthographicOffCenterFrustum.js\";\nimport PerspectiveFrustum from \"../Core/PerspectiveFrustum.js\";\nimport PerspectiveOffCenterFrustum from \"../Core/PerspectiveOffCenterFrustum.js\";\nimport RequestScheduler from \"../Core/RequestScheduler.js\";\nimport TaskProcessor from \"../Core/TaskProcessor.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport ComputeEngine from \"../Renderer/ComputeEngine.js\";\nimport Context from \"../Renderer/Context.js\";\nimport ContextLimits from \"../Renderer/ContextLimits.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport BrdfLutGenerator from \"./BrdfLutGenerator.js\";\nimport Camera from \"./Camera.js\";\nimport Cesium3DTilePass from \"./Cesium3DTilePass.js\";\nimport Cesium3DTilePassState from \"./Cesium3DTilePassState.js\";\nimport CreditDisplay from \"./CreditDisplay.js\";\nimport DebugCameraPrimitive from \"./DebugCameraPrimitive.js\";\nimport DepthPlane from \"./DepthPlane.js\";\nimport DerivedCommand from \"./DerivedCommand.js\";\nimport DeviceOrientationCameraController from \"./DeviceOrientationCameraController.js\";\nimport Fog from \"./Fog.js\";\nimport FrameState from \"./FrameState.js\";\nimport GlobeDepth from \"./GlobeDepth.js\";\nimport GlobeTranslucencyState from \"./GlobeTranslucencyState.js\";\nimport InvertClassification from \"./InvertClassification.js\";\nimport JobScheduler from \"./JobScheduler.js\";\nimport MapMode2D from \"./MapMode2D.js\";\nimport OctahedralProjectedCubeMap from \"./OctahedralProjectedCubeMap.js\";\nimport PerformanceDisplay from \"./PerformanceDisplay.js\";\nimport PerInstanceColorAppearance from \"./PerInstanceColorAppearance.js\";\nimport Picking from \"./Picking.js\";\nimport PostProcessStageCollection from \"./PostProcessStageCollection.js\";\nimport Primitive from \"./Primitive.js\";\nimport PrimitiveCollection from \"./PrimitiveCollection.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\nimport SceneTransitioner from \"./SceneTransitioner.js\";\nimport ScreenSpaceCameraController from \"./ScreenSpaceCameraController.js\";\nimport ShadowMap from \"./ShadowMap.js\";\nimport StencilConstants from \"./StencilConstants.js\";\nimport SunLight from \"./SunLight.js\";\nimport SunPostProcess from \"./SunPostProcess.js\";\nimport TweenCollection from \"./TweenCollection.js\";\nimport View from \"./View.js\";\nimport DebugInspector from \"./DebugInspector.js\";\n\nvar requestRenderAfterFrame = function (scene) {\n  return function () {\n    scene.frameState.afterRender.push(function () {\n      scene.requestRender();\n    });\n  };\n};\n/**\n * The container for all 3D graphical objects and state in a Cesium virtual scene.  Generally,\n * a scene is not created directly; instead, it is implicitly created by {@link CesiumWidget}.\n * <p>\n * <em><code>contextOptions</code> parameter details:</em>\n * </p>\n * <p>\n * The default values are:\n * <code>\n * {\n *   webgl : {\n *     alpha : false,\n *     depth : true,\n *     stencil : false,\n *     antialias : true,\n *     powerPreference: 'high-performance',\n *     premultipliedAlpha : true,\n *     preserveDrawingBuffer : false,\n *     failIfMajorPerformanceCaveat : false\n *   },\n *   allowTextureFilterAnisotropic : true\n * }\n * </code>\n * </p>\n * <p>\n * The <code>webgl</code> property corresponds to the {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}\n * object used to create the WebGL context.\n * </p>\n * <p>\n * <code>webgl.alpha</code> defaults to false, which can improve performance compared to the standard WebGL default\n * of true.  If an application needs to composite Cesium above other HTML elements using alpha-blending, set\n * <code>webgl.alpha</code> to true.\n * </p>\n * <p>\n * The other <code>webgl</code> properties match the WebGL defaults for {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}.\n * </p>\n * <p>\n * <code>allowTextureFilterAnisotropic</code> defaults to true, which enables anisotropic texture filtering when the\n * WebGL extension is supported.  Setting this to false will improve performance, but hurt visual quality, especially for horizon views.\n * </p>\n *\n * @alias Scene\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {HTMLCanvasElement} options.canvas The HTML canvas element to create the scene for.\n * @param {Object} [options.contextOptions] Context and WebGL creation properties.  See details above.\n * @param {Element} [options.creditContainer] The HTML element in which the credits will be displayed.\n * @param {Element} [options.creditViewport] The HTML element in which to display the credit popup.  If not specified, the viewport will be a added as a sibling of the canvas.\n * @param {MapProjection} [options.mapProjection=new GeographicProjection()] The map projection to use in 2D and Columbus View modes.\n * @param {Boolean} [options.orderIndependentTranslucency=true] If true and the configuration supports it, use order independent translucency.\n * @param {Boolean} [options.scene3DOnly=false] If true, optimizes memory use and performance for 3D mode but disables the ability to use 2D or Columbus View.\n * @param {Number} [options.terrainExaggeration=1.0] A scalar used to exaggerate the terrain. Note that terrain exaggeration will not modify any other primitive as they are positioned relative to the ellipsoid.\n * @param {Boolean} [options.shadows=false] Determines if shadows are cast by light sources.\n * @param {MapMode2D} [options.mapMode2D=MapMode2D.INFINITE_SCROLL] Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n * @param {Boolean} [options.requestRenderMode=false] If true, rendering a frame will only occur when needed as determined by changes within the scene. Enabling improves performance of the application, but requires using {@link Scene#requestRender} to render a new frame explicitly in this mode. This will be necessary in many cases after making changes to the scene in other parts of the API. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n * @param {Number} [options.maximumRenderTimeChange=0.0] If requestRenderMode is true, this value defines the maximum change in simulation time allowed before a render is requested. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n *\n * @see CesiumWidget\n * @see {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}\n *\n * @exception {DeveloperError} options and options.canvas are required.\n *\n * @example\n * // Create scene without anisotropic texture filtering\n * var scene = new Cesium.Scene({\n *   canvas : canvas,\n *   contextOptions : {\n *     allowTextureFilterAnisotropic : false\n *   }\n * });\n */\n\n\nfunction Scene(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var canvas = options.canvas;\n  var creditContainer = options.creditContainer;\n  var creditViewport = options.creditViewport;\n  var contextOptions = clone(options.contextOptions);\n\n  if (!defined(contextOptions)) {\n    contextOptions = {};\n  }\n\n  if (!defined(contextOptions.webgl)) {\n    contextOptions.webgl = {};\n  }\n\n  contextOptions.webgl.powerPreference = defaultValue(contextOptions.webgl.powerPreference, \"high-performance\"); //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(canvas)) {\n    throw new DeveloperError(\"options and options.canvas are required.\");\n  } //>>includeEnd('debug');\n\n\n  var hasCreditContainer = defined(creditContainer);\n  var context = new Context(canvas, contextOptions);\n\n  if (!hasCreditContainer) {\n    creditContainer = document.createElement(\"div\");\n    creditContainer.style.position = \"absolute\";\n    creditContainer.style.bottom = \"0\";\n    creditContainer.style[\"text-shadow\"] = \"0 0 2px #000000\";\n    creditContainer.style.color = \"#ffffff\";\n    creditContainer.style[\"font-size\"] = \"10px\";\n    creditContainer.style[\"padding-right\"] = \"5px\";\n    canvas.parentNode.appendChild(creditContainer);\n  }\n\n  if (!defined(creditViewport)) {\n    creditViewport = canvas.parentNode;\n  }\n\n  this._id = createGuid();\n  this._jobScheduler = new JobScheduler();\n  this._frameState = new FrameState(context, new CreditDisplay(creditContainer, \" • \", creditViewport), this._jobScheduler);\n  this._frameState.scene3DOnly = defaultValue(options.scene3DOnly, false);\n  this._removeCreditContainer = !hasCreditContainer;\n  this._creditContainer = creditContainer;\n  this._canvas = canvas;\n  this._context = context;\n  this._computeEngine = new ComputeEngine(context);\n  this._globe = undefined;\n  this._globeTranslucencyState = new GlobeTranslucencyState();\n  this._primitives = new PrimitiveCollection();\n  this._groundPrimitives = new PrimitiveCollection();\n  this._globeHeight = undefined;\n  this._cameraUnderground = false;\n  this._logDepthBuffer = context.fragmentDepth;\n  this._logDepthBufferDirty = true;\n  this._tweens = new TweenCollection();\n  this._shaderFrameCount = 0;\n  this._sunPostProcess = undefined;\n  this._computeCommandList = [];\n  this._overlayCommandList = [];\n  this._useOIT = defaultValue(options.orderIndependentTranslucency, true);\n  this._executeOITFunction = undefined;\n  this._depthPlane = new DepthPlane();\n  this._clearColorCommand = new ClearCommand({\n    color: new Color(),\n    stencil: 0,\n    owner: this\n  });\n  this._depthClearCommand = new ClearCommand({\n    depth: 1.0,\n    owner: this\n  });\n  this._stencilClearCommand = new ClearCommand({\n    stencil: 0\n  });\n  this._classificationStencilClearCommand = new ClearCommand({\n    stencil: 0,\n    renderState: RenderState.fromCache({\n      stencilMask: StencilConstants.CLASSIFICATION_MASK\n    })\n  });\n  this._depthOnlyRenderStateCache = {};\n  this._transitioner = new SceneTransitioner(this);\n  this._preUpdate = new Event();\n  this._postUpdate = new Event();\n  this._renderError = new Event();\n  this._preRender = new Event();\n  this._postRender = new Event();\n  this._minimumDisableDepthTestDistance = 0.0;\n  this._debugInspector = new DebugInspector();\n  /**\n   * Exceptions occurring in <code>render</code> are always caught in order to raise the\n   * <code>renderError</code> event.  If this property is true, the error is rethrown\n   * after the event is raised.  If this property is false, the <code>render</code> function\n   * returns normally after raising the event.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.rethrowRenderErrors = false;\n  /**\n   * Determines whether or not to instantly complete the\n   * scene transition animation on user input.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.completeMorphOnUserInput = true;\n  /**\n   * The event fired at the beginning of a scene transition.\n   * @type {Event}\n   * @default Event()\n   */\n\n  this.morphStart = new Event();\n  /**\n   * The event fired at the completion of a scene transition.\n   * @type {Event}\n   * @default Event()\n   */\n\n  this.morphComplete = new Event();\n  /**\n   * The {@link SkyBox} used to draw the stars.\n   *\n   * @type {SkyBox}\n   * @default undefined\n   *\n   * @see Scene#backgroundColor\n   */\n\n  this.skyBox = undefined;\n  /**\n   * The sky atmosphere drawn around the globe.\n   *\n   * @type {SkyAtmosphere}\n   * @default undefined\n   */\n\n  this.skyAtmosphere = undefined;\n  /**\n   * The {@link Sun}.\n   *\n   * @type {Sun}\n   * @default undefined\n   */\n\n  this.sun = undefined;\n  /**\n   * Uses a bloom filter on the sun when enabled.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.sunBloom = true;\n  this._sunBloom = undefined;\n  /**\n   * The {@link Moon}\n   *\n   * @type Moon\n   * @default undefined\n   */\n\n  this.moon = undefined;\n  /**\n   * The background color, which is only visible if there is no sky box, i.e., {@link Scene#skyBox} is undefined.\n   *\n   * @type {Color}\n   * @default {@link Color.BLACK}\n   *\n   * @see Scene#skyBox\n   */\n\n  this.backgroundColor = Color.clone(Color.BLACK);\n  this._mode = SceneMode.SCENE3D;\n  this._mapProjection = defined(options.mapProjection) ? options.mapProjection : new GeographicProjection();\n  /**\n   * The current morph transition time between 2D/Columbus View and 3D,\n   * with 0.0 being 2D or Columbus View and 1.0 being 3D.\n   *\n   * @type {Number}\n   * @default 1.0\n   */\n\n  this.morphTime = 1.0;\n  /**\n   * The far-to-near ratio of the multi-frustum when using a normal depth buffer.\n   * <p>\n   * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n   * when {@link Scene#logarithmicDepthBuffer} is <code>false</code>. When <code>logarithmicDepthBuffer</code> is\n   * <code>true</code>, use {@link Scene#logarithmicDepthFarToNearRatio}.\n   * </p>\n   *\n   * @type {Number}\n   * @default 1000.0\n   */\n\n  this.farToNearRatio = 1000.0;\n  /**\n   * The far-to-near ratio of the multi-frustum when using a logarithmic depth buffer.\n   * <p>\n   * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n   * when {@link Scene#logarithmicDepthBuffer} is <code>true</code>. When <code>logarithmicDepthBuffer</code> is\n   * <code>false</code>, use {@link Scene#farToNearRatio}.\n   * </p>\n   *\n   * @type {Number}\n   * @default 1e9\n   */\n\n  this.logarithmicDepthFarToNearRatio = 1e9;\n  /**\n   * Determines the uniform depth size in meters of each frustum of the multifrustum in 2D. If a primitive or model close\n   * to the surface shows z-fighting, decreasing this will eliminate the artifact, but decrease performance. On the\n   * other hand, increasing this will increase performance but may cause z-fighting among primitives close to the surface.\n   *\n   * @type {Number}\n   * @default 1.75e6\n   */\n\n  this.nearToFarDistance2D = 1.75e6;\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * A function that determines what commands are executed.  As shown in the examples below,\n   * the function receives the command's <code>owner</code> as an argument, and returns a boolean indicating if the\n   * command should be executed.\n   * </p>\n   * <p>\n   * The default is <code>undefined</code>, indicating that all commands are executed.\n   * </p>\n   *\n   * @type Function\n   *\n   * @default undefined\n   *\n   * @example\n   * // Do not execute any commands.\n   * scene.debugCommandFilter = function(command) {\n   *     return false;\n   * };\n   *\n   * // Execute only the billboard's commands.  That is, only draw the billboard.\n   * var billboards = new Cesium.BillboardCollection();\n   * scene.debugCommandFilter = function(command) {\n   *     return command.owner === billboards;\n   * };\n   */\n\n  this.debugCommandFilter = undefined;\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, commands are randomly shaded.  This is useful\n   * for performance analysis to see what parts of a scene or model are\n   * command-dense and could benefit from batching.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n\n  this.debugShowCommands = false;\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, commands are shaded based on the frustums they\n   * overlap.  Commands in the closest frustum are tinted red, commands in\n   * the next closest are green, and commands in the farthest frustum are\n   * blue.  If a command overlaps more than one frustum, the color components\n   * are combined, e.g., a command overlapping the first two frustums is tinted\n   * yellow.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n\n  this.debugShowFrustums = false;\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Displays frames per second and time between frames.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n\n  this.debugShowFramesPerSecond = false;\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Displays depth information for the indicated frustum.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n\n  this.debugShowGlobeDepth = false;\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Indicates which frustum will have depth information displayed.\n   * </p>\n   *\n   * @type Number\n   *\n   * @default 1\n   */\n\n  this.debugShowDepthFrustum = 1;\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, draws outlines to show the boundaries of the camera frustums\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n\n  this.debugShowFrustumPlanes = false;\n  this._debugShowFrustumPlanes = false;\n  this._debugFrustumPlanes = undefined;\n  /**\n   * When <code>true</code>, enables picking using the depth buffer.\n   *\n   * @type Boolean\n   * @default true\n   */\n\n  this.useDepthPicking = true;\n  /**\n   * When <code>true</code>, enables picking translucent geometry using the depth buffer. Note that {@link Scene#useDepthPicking} must also be true for enabling this to work.\n   *\n   * <p>\n   * Render must be called between picks.\n   * <br>There is a decrease in performance when enabled. There are extra draw calls to write depth for\n   * translucent geometry.\n   * </p>\n   *\n   * @example\n   * // picking the position of a translucent primitive\n   * viewer.screenSpaceEventHandler.setInputAction(function onLeftClick(movement) {\n   *      var pickedFeature = viewer.scene.pick(movement.position);\n   *      if (!Cesium.defined(pickedFeature)) {\n   *          // nothing picked\n   *          return;\n   *      }\n   *      viewer.scene.render();\n   *      var worldPosition = viewer.scene.pickPosition(movement.position);\n   * }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.pickTranslucentDepth = false;\n  /**\n   * The time in milliseconds to wait before checking if the camera has not moved and fire the cameraMoveEnd event.\n   * @type {Number}\n   * @default 500.0\n   * @private\n   */\n\n  this.cameraEventWaitTime = 500.0;\n  /**\n   * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n   * performance improvements by rendering less geometry and dispatching less terrain requests.\n   * @type {Fog}\n   */\n\n  this.fog = new Fog();\n  this._shadowMapCamera = new Camera(this);\n  /**\n   * The shadow map for the scene's light source. When enabled, models, primitives, and the globe may cast and receive shadows.\n   * @type {ShadowMap}\n   */\n\n  this.shadowMap = new ShadowMap({\n    context: context,\n    lightCamera: this._shadowMapCamera,\n    enabled: defaultValue(options.shadows, false)\n  });\n  /**\n   * When <code>false</code>, 3D Tiles will render normally. When <code>true</code>, classified 3D Tile geometry will render normally and\n   * unclassified 3D Tile geometry will render with the color multiplied by {@link Scene#invertClassificationColor}.\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.invertClassification = false;\n  /**\n   * The highlight color of unclassified 3D Tile geometry when {@link Scene#invertClassification} is <code>true</code>.\n   * <p>When the color's alpha is less than 1.0, the unclassified portions of the 3D Tiles will not blend correctly with the classified positions of the 3D Tiles.</p>\n   * <p>Also, when the color's alpha is less than 1.0, the WEBGL_depth_texture and EXT_frag_depth WebGL extensions must be supported.</p>\n   * @type {Color}\n   * @default Color.WHITE\n   */\n\n  this.invertClassificationColor = Color.clone(Color.WHITE);\n  this._actualInvertClassificationColor = Color.clone(this._invertClassificationColor);\n  this._invertClassification = new InvertClassification();\n  /**\n   * The focal length for use when with cardboard or WebVR.\n   * @type {Number}\n   */\n\n  this.focalLength = undefined;\n  /**\n   * The eye separation distance in meters for use with cardboard or WebVR.\n   * @type {Number}\n   */\n\n  this.eyeSeparation = undefined;\n  /**\n   * Post processing effects applied to the final render.\n   * @type {PostProcessStageCollection}\n   */\n\n  this.postProcessStages = new PostProcessStageCollection();\n  this._brdfLutGenerator = new BrdfLutGenerator();\n  this._terrainExaggeration = defaultValue(options.terrainExaggeration, 1.0);\n  this._performanceDisplay = undefined;\n  this._debugVolume = undefined;\n  this._screenSpaceCameraController = new ScreenSpaceCameraController(this);\n  this._cameraUnderground = false;\n  this._mapMode2D = defaultValue(options.mapMode2D, MapMode2D.INFINITE_SCROLL); // Keeps track of the state of a frame. FrameState is the state across\n  // the primitives of the scene. This state is for internally keeping track\n  // of celestial and environment effects that need to be updated/rendered in\n  // a certain order as well as updating/tracking framebuffer usage.\n\n  this._environmentState = {\n    skyBoxCommand: undefined,\n    skyAtmosphereCommand: undefined,\n    sunDrawCommand: undefined,\n    sunComputeCommand: undefined,\n    moonCommand: undefined,\n    isSunVisible: false,\n    isMoonVisible: false,\n    isReadyForAtmosphere: false,\n    isSkyAtmosphereVisible: false,\n    clearGlobeDepth: false,\n    useDepthPlane: false,\n    renderTranslucentDepthForPick: false,\n    originalFramebuffer: undefined,\n    useGlobeDepthFramebuffer: false,\n    separatePrimitiveFramebuffer: false,\n    useOIT: false,\n    useInvertClassification: false,\n    usePostProcess: false,\n    usePostProcessSelected: false,\n    useWebVR: false\n  };\n  this._useWebVR = false;\n  this._cameraVR = undefined;\n  this._aspectRatioVR = undefined;\n  /**\n   * When <code>true</code>, rendering a frame will only occur when needed as determined by changes within the scene.\n   * Enabling improves performance of the application, but requires using {@link Scene#requestRender}\n   * to render a new frame explicitly in this mode. This will be necessary in many cases after making changes\n   * to the scene in other parts of the API.\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#maximumRenderTimeChange\n   * @see Scene#requestRender\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.requestRenderMode = defaultValue(options.requestRenderMode, false);\n  this._renderRequested = true;\n  /**\n   * If {@link Scene#requestRenderMode} is <code>true</code>, this value defines the maximum change in\n   * simulation time allowed before a render is requested. Lower values increase the number of frames rendered\n   * and higher values decrease the number of frames rendered. If <code>undefined</code>, changes to\n   * the simulation time will never request a render.\n   * This value impacts the rate of rendering for changes in the scene like lighting, entity property updates,\n   * and animations.\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#requestRenderMode\n   *\n   * @type {Number}\n   * @default 0.0\n   */\n\n  this.maximumRenderTimeChange = defaultValue(options.maximumRenderTimeChange, 0.0);\n  this._lastRenderTime = undefined;\n  this._frameRateMonitor = undefined;\n  this._removeRequestListenerCallback = RequestScheduler.requestCompletedEvent.addEventListener(requestRenderAfterFrame(this));\n  this._removeTaskProcessorListenerCallback = TaskProcessor.taskCompletedEvent.addEventListener(requestRenderAfterFrame(this));\n  this._removeGlobeCallbacks = [];\n  var viewport = new BoundingRectangle(0, 0, context.drawingBufferWidth, context.drawingBufferHeight);\n  var camera = new Camera(this);\n\n  if (this._logDepthBuffer) {\n    camera.frustum.near = 0.1;\n    camera.frustum.far = 10000000000.0;\n  }\n  /**\n   * The camera view for the scene camera flight destination. Used for preloading flight destination tiles.\n   * @type {Camera}\n   * @private\n   */\n\n\n  this.preloadFlightCamera = new Camera(this);\n  /**\n   * The culling volume for the scene camera flight destination. Used for preloading flight destination tiles.\n   * @type {CullingVolume}\n   * @private\n   */\n\n  this.preloadFlightCullingVolume = undefined;\n  this._picking = new Picking(this);\n  this._defaultView = new View(this, camera, viewport);\n  this._view = this._defaultView;\n  this._hdr = undefined;\n  this._hdrDirty = undefined;\n  this.highDynamicRange = false;\n  this.gamma = 2.2;\n  /**\n   * The spherical harmonic coefficients for image-based lighting of PBR models.\n   * @type {Cartesian3[]}\n   */\n\n  this.sphericalHarmonicCoefficients = undefined;\n  /**\n   * The url to the KTX file containing the specular environment map and convoluted mipmaps for image-based lighting of PBR models.\n   * @type {String}\n   */\n\n  this.specularEnvironmentMaps = undefined;\n  this._specularEnvironmentMapAtlas = undefined;\n  /**\n   * The light source for shading. Defaults to a directional light from the Sun.\n   * @type {Light}\n   */\n\n  this.light = new SunLight(); // Give frameState, camera, and screen space camera controller initial state before rendering\n\n  updateFrameNumber(this, 0.0, JulianDate.now());\n  this.updateFrameState();\n  this.initializeFrame();\n}\n\nfunction updateGlobeListeners(scene, globe) {\n  for (var i = 0; i < scene._removeGlobeCallbacks.length; ++i) {\n    scene._removeGlobeCallbacks[i]();\n  }\n\n  scene._removeGlobeCallbacks.length = 0;\n  var removeGlobeCallbacks = [];\n\n  if (defined(globe)) {\n    removeGlobeCallbacks.push(globe.imageryLayersUpdatedEvent.addEventListener(requestRenderAfterFrame(scene)));\n    removeGlobeCallbacks.push(globe.terrainProviderChanged.addEventListener(requestRenderAfterFrame(scene)));\n  }\n\n  scene._removeGlobeCallbacks = removeGlobeCallbacks;\n}\n\nObject.defineProperties(Scene.prototype, {\n  /**\n   * Gets the canvas element to which this scene is bound.\n   * @memberof Scene.prototype\n   *\n   * @type {HTMLCanvasElement}\n   * @readonly\n   */\n  canvas: {\n    get: function () {\n      return this._canvas;\n    }\n  },\n\n  /**\n   * The drawingBufferHeight of the underlying GL context.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n   */\n  drawingBufferHeight: {\n    get: function () {\n      return this._context.drawingBufferHeight;\n    }\n  },\n\n  /**\n   * The drawingBufferHeight of the underlying GL context.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n   */\n  drawingBufferWidth: {\n    get: function () {\n      return this._context.drawingBufferWidth;\n    }\n  },\n\n  /**\n   * The maximum aliased line width, in pixels, supported by this WebGL implementation.  It will be at least one.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n   */\n  maximumAliasedLineWidth: {\n    get: function () {\n      return ContextLimits.maximumAliasedLineWidth;\n    }\n  },\n\n  /**\n   * The maximum length in pixels of one edge of a cube map, supported by this WebGL implementation.  It will be at least 16.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>GL_MAX_CUBE_MAP_TEXTURE_SIZE</code>.\n   */\n  maximumCubeMapSize: {\n    get: function () {\n      return ContextLimits.maximumCubeMapSize;\n    }\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#pickPosition} function is supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#pickPosition\n   */\n  pickPositionSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    }\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#sampleHeight} and {@link Scene#sampleHeightMostDetailed} functions are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#sampleHeight\n   * @see Scene#sampleHeightMostDetailed\n   */\n  sampleHeightSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    }\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#clampToHeight} and {@link Scene#clampToHeightMostDetailed} functions are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#clampToHeight\n   * @see Scene#clampToHeightMostDetailed\n   */\n  clampToHeightSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    }\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#invertClassification} is supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#invertClassification\n   */\n  invertClassificationSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    }\n  },\n\n  /**\n   * Returns <code>true</code> if specular environment maps are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#specularEnvironmentMaps\n   */\n  specularEnvironmentMapsSupported: {\n    get: function () {\n      return OctahedralProjectedCubeMap.isSupported(this._context);\n    }\n  },\n\n  /**\n   * Gets or sets the depth-test ellipsoid.\n   * @memberof Scene.prototype\n   *\n   * @type {Globe}\n   */\n  globe: {\n    get: function () {\n      return this._globe;\n    },\n    set: function (globe) {\n      this._globe = this._globe && this._globe.destroy();\n      this._globe = globe;\n      updateGlobeListeners(this, globe);\n    }\n  },\n\n  /**\n   * Gets the collection of primitives.\n   * @memberof Scene.prototype\n   *\n   * @type {PrimitiveCollection}\n   * @readonly\n   */\n  primitives: {\n    get: function () {\n      return this._primitives;\n    }\n  },\n\n  /**\n   * Gets the collection of ground primitives.\n   * @memberof Scene.prototype\n   *\n   * @type {PrimitiveCollection}\n   * @readonly\n   */\n  groundPrimitives: {\n    get: function () {\n      return this._groundPrimitives;\n    }\n  },\n\n  /**\n   * Gets or sets the camera.\n   * @memberof Scene.prototype\n   *\n   * @type {Camera}\n   * @readonly\n   */\n  camera: {\n    get: function () {\n      return this._view.camera;\n    },\n    set: function (camera) {\n      // For internal use only. Documentation is still @readonly.\n      this._view.camera = camera;\n    }\n  },\n\n  /**\n   * Gets or sets the view.\n   * @memberof Scene.prototype\n   *\n   * @type {View}\n   * @readonly\n   *\n   * @private\n   */\n  view: {\n    get: function () {\n      return this._view;\n    },\n    set: function (view) {\n      // For internal use only. Documentation is still @readonly.\n      this._view = view;\n    }\n  },\n\n  /**\n   * Gets the default view.\n   * @memberof Scene.prototype\n   *\n   * @type {View}\n   * @readonly\n   *\n   * @private\n   */\n  defaultView: {\n    get: function () {\n      return this._defaultView;\n    }\n  },\n\n  /**\n   * Gets picking functions and state\n   * @memberof Scene.prototype\n   *\n   * @type {Picking}\n   * @readonly\n   *\n   * @private\n   */\n  picking: {\n    get: function () {\n      return this._picking;\n    }\n  },\n\n  /**\n   * Gets the controller for camera input handling.\n   * @memberof Scene.prototype\n   *\n   * @type {ScreenSpaceCameraController}\n   * @readonly\n   */\n  screenSpaceCameraController: {\n    get: function () {\n      return this._screenSpaceCameraController;\n    }\n  },\n\n  /**\n   * Get the map projection to use in 2D and Columbus View modes.\n   * @memberof Scene.prototype\n   *\n   * @type {MapProjection}\n   * @readonly\n   *\n   * @default new GeographicProjection()\n   */\n  mapProjection: {\n    get: function () {\n      return this._mapProjection;\n    }\n  },\n\n  /**\n   * Gets the job scheduler\n   * @memberof Scene.prototype\n   * @type {JobScheduler}\n   * @readonly\n   *\n   * @private\n   */\n  jobScheduler: {\n    get: function () {\n      return this._jobScheduler;\n    }\n  },\n\n  /**\n   * Gets state information about the current scene. If called outside of a primitive's <code>update</code>\n   * function, the previous frame's state is returned.\n   * @memberof Scene.prototype\n   *\n   * @type {FrameState}\n   * @readonly\n   *\n   * @private\n   */\n  frameState: {\n    get: function () {\n      return this._frameState;\n    }\n  },\n\n  /**\n   * Gets the environment state.\n   * @memberof Scene.prototype\n   *\n   * @type {EnvironmentState}\n   * @readonly\n   *\n   * @private\n   */\n  environmentState: {\n    get: function () {\n      return this._environmentState;\n    }\n  },\n\n  /**\n   * Gets the collection of tweens taking place in the scene.\n   * @memberof Scene.prototype\n   *\n   * @type {TweenCollection}\n   * @readonly\n   *\n   * @private\n   */\n  tweens: {\n    get: function () {\n      return this._tweens;\n    }\n  },\n\n  /**\n   * Gets the collection of image layers that will be rendered on the globe.\n   * @memberof Scene.prototype\n   *\n   * @type {ImageryLayerCollection}\n   * @readonly\n   */\n  imageryLayers: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.imageryLayers;\n    }\n  },\n\n  /**\n   * The terrain provider providing surface geometry for the globe.\n   * @memberof Scene.prototype\n   *\n   * @type {TerrainProvider}\n   */\n  terrainProvider: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.terrainProvider;\n    },\n    set: function (terrainProvider) {\n      if (defined(this.globe)) {\n        this.globe.terrainProvider = terrainProvider;\n      }\n    }\n  },\n\n  /**\n   * Gets an event that's raised when the terrain provider is changed\n   * @memberof Scene.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  terrainProviderChanged: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.terrainProviderChanged;\n    }\n  },\n\n  /**\n   * Gets the event that will be raised before the scene is updated or rendered.  Subscribers to the event\n   * receive the Scene instance as the first parameter and the current time as the second parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#postUpdate\n   * @see Scene#preRender\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  preUpdate: {\n    get: function () {\n      return this._preUpdate;\n    }\n  },\n\n  /**\n   * Gets the event that will be raised immediately after the scene is updated and before the scene is rendered.\n   * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n   * parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#preRender\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  postUpdate: {\n    get: function () {\n      return this._postUpdate;\n    }\n  },\n\n  /**\n   * Gets the event that will be raised when an error is thrown inside the <code>render</code> function.\n   * The Scene instance and the thrown error are the only two parameters passed to the event handler.\n   * By default, errors are not rethrown after this event is raised, but that can be changed by setting\n   * the <code>rethrowRenderErrors</code> property.\n   * @memberof Scene.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  renderError: {\n    get: function () {\n      return this._renderError;\n    }\n  },\n\n  /**\n   * Gets the event that will be raised after the scene is updated and immediately before the scene is rendered.\n   * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n   * parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#postUpdate\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  preRender: {\n    get: function () {\n      return this._preRender;\n    }\n  },\n\n  /**\n   * Gets the event that will be raised immediately after the scene is rendered.  Subscribers to the event\n   * receive the Scene instance as the first parameter and the current time as the second parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#postUpdate\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  postRender: {\n    get: function () {\n      return this._postRender;\n    }\n  },\n\n  /**\n   * Gets the simulation time when the scene was last rendered. Returns undefined if the scene has not yet been\n   * rendered.\n   * @memberof Scene.prototype\n   *\n   * @type {JulianDate}\n   * @readonly\n   */\n  lastRenderTime: {\n    get: function () {\n      return this._lastRenderTime;\n    }\n  },\n\n  /**\n   * @memberof Scene.prototype\n   * @private\n   * @readonly\n   */\n  context: {\n    get: function () {\n      return this._context;\n    }\n  },\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When {@link Scene.debugShowFrustums} is <code>true</code>, this contains\n   * properties with statistics about the number of command execute per frustum.\n   * <code>totalCommands</code> is the total number of commands executed, ignoring\n   * overlap. <code>commandsInFrustums</code> is an array with the number of times\n   * commands are executed redundantly, e.g., how many commands overlap two or\n   * three frustums.\n   * </p>\n   *\n   * @memberof Scene.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  debugFrustumStatistics: {\n    get: function () {\n      return this._view.debugFrustumStatistics;\n    }\n  },\n\n  /**\n   * Gets whether or not the scene is optimized for 3D only viewing.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  scene3DOnly: {\n    get: function () {\n      return this._frameState.scene3DOnly;\n    }\n  },\n\n  /**\n   * Gets whether or not the scene has order independent translucency enabled.\n   * Note that this only reflects the original construction option, and there are\n   * other factors that could prevent OIT from functioning on a given system configuration.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  orderIndependentTranslucency: {\n    get: function () {\n      return this._useOIT;\n    }\n  },\n\n  /**\n   * Gets the unique identifier for this scene.\n   * @memberof Scene.prototype\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    }\n  },\n\n  /**\n   * Gets or sets the current mode of the scene.\n   * @memberof Scene.prototype\n   * @type {SceneMode}\n   * @default {@link SceneMode.SCENE3D}\n   */\n  mode: {\n    get: function () {\n      return this._mode;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (this.scene3DOnly && value !== SceneMode.SCENE3D) {\n        throw new DeveloperError(\"Only SceneMode.SCENE3D is valid when scene3DOnly is true.\");\n      } //>>includeEnd('debug');\n\n\n      if (value === SceneMode.SCENE2D) {\n        this.morphTo2D(0);\n      } else if (value === SceneMode.SCENE3D) {\n        this.morphTo3D(0);\n      } else if (value === SceneMode.COLUMBUS_VIEW) {\n        this.morphToColumbusView(0); //>>includeStart('debug', pragmas.debug);\n      } else {\n        throw new DeveloperError(\"value must be a valid SceneMode enumeration.\"); //>>includeEnd('debug');\n      }\n\n      this._mode = value;\n    }\n  },\n\n  /**\n   * Gets the number of frustums used in the last frame.\n   * @memberof Scene.prototype\n   * @type {FrustumCommands[]}\n   *\n   * @private\n   */\n  frustumCommandsList: {\n    get: function () {\n      return this._view.frustumCommandsList;\n    }\n  },\n\n  /**\n   * Gets the number of frustums used in the last frame.\n   * @memberof Scene.prototype\n   * @type {Number}\n   *\n   * @private\n   */\n  numberOfFrustums: {\n    get: function () {\n      return this._view.frustumCommandsList.length;\n    }\n  },\n\n  /**\n   * Gets the scalar used to exaggerate the terrain.\n   * @memberof Scene.prototype\n   * @type {Number}\n   * @readonly\n   */\n  terrainExaggeration: {\n    get: function () {\n      return this._terrainExaggeration;\n    }\n  },\n\n  /**\n   * When <code>true</code>, splits the scene into two viewports with steroscopic views for the left and right eyes.\n   * Used for cardboard and WebVR.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  useWebVR: {\n    get: function () {\n      return this._useWebVR;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (this.camera.frustum instanceof OrthographicFrustum) {\n        throw new DeveloperError(\"VR is unsupported with an orthographic projection.\");\n      } //>>includeEnd('debug');\n\n\n      this._useWebVR = value;\n\n      if (this._useWebVR) {\n        this._frameState.creditDisplay.container.style.visibility = \"hidden\";\n        this._cameraVR = new Camera(this);\n\n        if (!defined(this._deviceOrientationCameraController)) {\n          this._deviceOrientationCameraController = new DeviceOrientationCameraController(this);\n        }\n\n        this._aspectRatioVR = this.camera.frustum.aspectRatio;\n      } else {\n        this._frameState.creditDisplay.container.style.visibility = \"visible\";\n        this._cameraVR = undefined;\n        this._deviceOrientationCameraController = this._deviceOrientationCameraController && !this._deviceOrientationCameraController.isDestroyed() && this._deviceOrientationCameraController.destroy();\n        this.camera.frustum.aspectRatio = this._aspectRatioVR;\n        this.camera.frustum.xOffset = 0.0;\n      }\n    }\n  },\n\n  /**\n   * Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n   * @memberof Scene.prototype\n   * @type {MapMode2D}\n   * @readonly\n   */\n  mapMode2D: {\n    get: function () {\n      return this._mapMode2D;\n    }\n  },\n\n  /**\n   * Gets or sets the position of the Imagery splitter within the viewport.  Valid values are between 0.0 and 1.0.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   */\n  imagerySplitPosition: {\n    get: function () {\n      return this._frameState.imagerySplitPosition;\n    },\n    set: function (value) {\n      this._frameState.imagerySplitPosition = value;\n    }\n  },\n\n  /**\n   * The distance from the camera at which to disable the depth test of billboards, labels and points\n   * to, for example, prevent clipping against terrain. When set to zero, the depth test should always\n   * be applied. When less than zero, the depth test should never be applied. Setting the disableDepthTestDistance\n   * property of a billboard, label or point will override this value.\n   * @memberof Scene.prototype\n   * @type {Number}\n   * @default 0.0\n   */\n  minimumDisableDepthTestDistance: {\n    get: function () {\n      return this._minimumDisableDepthTestDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value) || value < 0.0) {\n        throw new DeveloperError(\"minimumDisableDepthTestDistance must be greater than or equal to 0.0.\");\n      } //>>includeEnd('debug');\n\n\n      this._minimumDisableDepthTestDistance = value;\n    }\n  },\n\n  /**\n   * Whether or not to use a logarithmic depth buffer. Enabling this option will allow for less frustums in the multi-frustum,\n   * increasing performance. This property relies on fragmentDepth being supported.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   */\n  logarithmicDepthBuffer: {\n    get: function () {\n      return this._logDepthBuffer;\n    },\n    set: function (value) {\n      value = this._context.fragmentDepth && value;\n\n      if (this._logDepthBuffer !== value) {\n        this._logDepthBuffer = value;\n        this._logDepthBufferDirty = true;\n      }\n    }\n  },\n\n  /**\n   * The value used for gamma correction. This is only used when rendering with high dynamic range.\n   * @memberof Scene.prototype\n   * @type {Number}\n   * @default 2.2\n   */\n  gamma: {\n    get: function () {\n      return this._context.uniformState.gamma;\n    },\n    set: function (value) {\n      this._context.uniformState.gamma = value;\n    }\n  },\n\n  /**\n   * Whether or not to use high dynamic range rendering.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  highDynamicRange: {\n    get: function () {\n      return this._hdr;\n    },\n    set: function (value) {\n      var context = this._context;\n      var hdr = value && context.depthTexture && (context.colorBufferFloat || context.colorBufferHalfFloat);\n      this._hdrDirty = hdr !== this._hdr;\n      this._hdr = hdr;\n    }\n  },\n\n  /**\n   * Whether or not high dynamic range rendering is supported.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   * @default true\n   */\n  highDynamicRangeSupported: {\n    get: function () {\n      var context = this._context;\n      return context.depthTexture && (context.colorBufferFloat || context.colorBufferHalfFloat);\n    }\n  },\n\n  /**\n   * Whether or not the camera is underneath the globe.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   * @default false\n   */\n  cameraUnderground: {\n    get: function () {\n      return this._cameraUnderground;\n    }\n  },\n\n  /**\n   * Ratio between a pixel and a density-independent pixel. Provides a standard unit of\n   * measure for real pixel measurements appropriate to a particular device.\n   *\n   * @memberof Scene.prototype\n   * @type {Number}\n   * @default 1.0\n   * @private\n   */\n  pixelRatio: {\n    get: function () {\n      return this._frameState.pixelRatio;\n    },\n    set: function (value) {\n      this._frameState.pixelRatio = value;\n    }\n  },\n\n  /**\n   * @private\n   */\n  opaqueFrustumNearOffset: {\n    get: function () {\n      return 0.9999;\n    }\n  },\n\n  /**\n   * @private\n   */\n  globeHeight: {\n    get: function () {\n      return this._globeHeight;\n    }\n  }\n});\n/**\n * Determines if a compressed texture format is supported.\n * @param {String} format The texture format. May be the name of the format or the WebGL extension name, e.g. s3tc or WEBGL_compressed_texture_s3tc.\n * @return {boolean} Whether or not the format is supported.\n */\n\nScene.prototype.getCompressedTextureFormatSupported = function (format) {\n  var context = this.context;\n  return (format === \"WEBGL_compressed_texture_s3tc\" || format === \"s3tc\") && context.s3tc || (format === \"WEBGL_compressed_texture_pvrtc\" || format === \"pvrtc\") && context.pvrtc || (format === \"WEBGL_compressed_texture_etc1\" || format === \"etc1\") && context.etc1;\n};\n\nfunction updateDerivedCommands(scene, command, shadowsDirty) {\n  var frameState = scene._frameState;\n  var context = scene._context;\n  var oit = scene._view.oit;\n  var lightShadowMaps = frameState.shadowState.lightShadowMaps;\n  var lightShadowsEnabled = frameState.shadowState.lightShadowsEnabled;\n  var derivedCommands = command.derivedCommands;\n\n  if (defined(command.pickId)) {\n    derivedCommands.picking = DerivedCommand.createPickDerivedCommand(scene, command, context, derivedCommands.picking);\n  }\n\n  if (!command.pickOnly) {\n    derivedCommands.depth = DerivedCommand.createDepthOnlyDerivedCommand(scene, command, context, derivedCommands.depth);\n  }\n\n  derivedCommands.originalCommand = command;\n\n  if (scene._hdr) {\n    derivedCommands.hdr = DerivedCommand.createHdrCommand(command, context, derivedCommands.hdr);\n    command = derivedCommands.hdr.command;\n    derivedCommands = command.derivedCommands;\n  }\n\n  if (lightShadowsEnabled && command.receiveShadows) {\n    derivedCommands.shadows = ShadowMap.createReceiveDerivedCommand(lightShadowMaps, command, shadowsDirty, context, derivedCommands.shadows);\n  }\n\n  if (command.pass === Pass.TRANSLUCENT && defined(oit) && oit.isSupported()) {\n    if (lightShadowsEnabled && command.receiveShadows) {\n      derivedCommands.oit = defined(derivedCommands.oit) ? derivedCommands.oit : {};\n      derivedCommands.oit.shadows = oit.createDerivedCommands(derivedCommands.shadows.receiveCommand, context, derivedCommands.oit.shadows);\n    } else {\n      derivedCommands.oit = oit.createDerivedCommands(command, context, derivedCommands.oit);\n    }\n  }\n}\n/**\n * @private\n */\n\n\nScene.prototype.updateDerivedCommands = function (command) {\n  if (!defined(command.derivedCommands)) {\n    // Is not a DrawCommand\n    return;\n  }\n\n  var frameState = this._frameState;\n  var context = this._context; // Update derived commands when any shadow maps become dirty\n\n  var shadowsDirty = false;\n  var lastDirtyTime = frameState.shadowState.lastDirtyTime;\n\n  if (command.lastDirtyTime !== lastDirtyTime) {\n    command.lastDirtyTime = lastDirtyTime;\n    command.dirty = true;\n    shadowsDirty = true;\n  }\n\n  var useLogDepth = frameState.useLogDepth;\n  var useHdr = this._hdr;\n  var derivedCommands = command.derivedCommands;\n  var hasLogDepthDerivedCommands = defined(derivedCommands.logDepth);\n  var hasHdrCommands = defined(derivedCommands.hdr);\n  var hasDerivedCommands = defined(derivedCommands.originalCommand);\n  var needsLogDepthDerivedCommands = useLogDepth && !hasLogDepthDerivedCommands;\n  var needsHdrCommands = useHdr && !hasHdrCommands;\n  var needsDerivedCommands = (!useLogDepth || !useHdr) && !hasDerivedCommands;\n  command.dirty = command.dirty || needsLogDepthDerivedCommands || needsHdrCommands || needsDerivedCommands;\n\n  if (command.dirty) {\n    command.dirty = false;\n    var shadowMaps = frameState.shadowState.shadowMaps;\n    var shadowsEnabled = frameState.shadowState.shadowsEnabled;\n\n    if (shadowsEnabled && command.castShadows) {\n      derivedCommands.shadows = ShadowMap.createCastDerivedCommand(shadowMaps, command, shadowsDirty, context, derivedCommands.shadows);\n    }\n\n    if (hasLogDepthDerivedCommands || needsLogDepthDerivedCommands) {\n      derivedCommands.logDepth = DerivedCommand.createLogDepthCommand(command, context, derivedCommands.logDepth);\n      updateDerivedCommands(this, derivedCommands.logDepth.command, shadowsDirty);\n    }\n\n    if (hasDerivedCommands || needsDerivedCommands) {\n      updateDerivedCommands(this, command, shadowsDirty);\n    }\n  }\n};\n\nvar renderTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.RENDER\n});\nvar preloadTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.PRELOAD\n});\nvar preloadFlightTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.PRELOAD_FLIGHT\n});\nvar requestRenderModeDeferCheckPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.REQUEST_RENDER_MODE_DEFER_CHECK\n});\nvar scratchOccluderBoundingSphere = new BoundingSphere();\nvar scratchOccluder;\n\nfunction getOccluder(scene) {\n  // TODO: The occluder is the top-level globe. When we add\n  //       support for multiple central bodies, this should be the closest one.\n  var globe = scene.globe;\n\n  if (scene._mode === SceneMode.SCENE3D && defined(globe) && globe.show && !scene._cameraUnderground && !scene._globeTranslucencyState.translucent) {\n    var ellipsoid = globe.ellipsoid;\n    var minimumTerrainHeight = scene.frameState.minimumTerrainHeight;\n    scratchOccluderBoundingSphere.radius = ellipsoid.minimumRadius + minimumTerrainHeight;\n    scratchOccluder = Occluder.fromBoundingSphere(scratchOccluderBoundingSphere, scene.camera.positionWC, scratchOccluder);\n    return scratchOccluder;\n  }\n\n  return undefined;\n}\n/**\n * @private\n */\n\n\nScene.prototype.clearPasses = function (passes) {\n  passes.render = false;\n  passes.pick = false;\n  passes.depth = false;\n  passes.postProcess = false;\n  passes.offscreen = false;\n};\n\nfunction updateFrameNumber(scene, frameNumber, time) {\n  var frameState = scene._frameState;\n  frameState.frameNumber = frameNumber;\n  frameState.time = JulianDate.clone(time, frameState.time);\n}\n/**\n * @private\n */\n\n\nScene.prototype.updateFrameState = function () {\n  var camera = this.camera;\n  var frameState = this._frameState;\n  frameState.commandList.length = 0;\n  frameState.shadowMaps.length = 0;\n  frameState.brdfLutGenerator = this._brdfLutGenerator;\n  frameState.environmentMap = this.skyBox && this.skyBox._cubeMap;\n  frameState.mode = this._mode;\n  frameState.morphTime = this.morphTime;\n  frameState.mapProjection = this.mapProjection;\n  frameState.camera = camera;\n  frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n  frameState.occluder = getOccluder(this);\n  frameState.terrainExaggeration = this._terrainExaggeration;\n  frameState.minimumTerrainHeight = 0.0;\n  frameState.minimumDisableDepthTestDistance = this._minimumDisableDepthTestDistance;\n  frameState.invertClassification = this.invertClassification;\n  frameState.useLogDepth = this._logDepthBuffer && !(this.camera.frustum instanceof OrthographicFrustum || this.camera.frustum instanceof OrthographicOffCenterFrustum);\n  frameState.light = this.light;\n  frameState.cameraUnderground = this._cameraUnderground;\n  frameState.globeTranslucencyState = this._globeTranslucencyState;\n\n  if (defined(this._specularEnvironmentMapAtlas) && this._specularEnvironmentMapAtlas.ready) {\n    frameState.specularEnvironmentMaps = this._specularEnvironmentMapAtlas.texture;\n    frameState.specularEnvironmentMapsMaximumLOD = this._specularEnvironmentMapAtlas.maximumMipmapLevel;\n  } else {\n    frameState.specularEnvironmentMaps = undefined;\n    frameState.specularEnvironmentMapsMaximumLOD = undefined;\n  }\n\n  frameState.sphericalHarmonicCoefficients = this.sphericalHarmonicCoefficients;\n  this._actualInvertClassificationColor = Color.clone(this.invertClassificationColor, this._actualInvertClassificationColor);\n\n  if (!InvertClassification.isTranslucencySupported(this._context)) {\n    this._actualInvertClassificationColor.alpha = 1.0;\n  }\n\n  frameState.invertClassificationColor = this._actualInvertClassificationColor;\n\n  if (defined(this.globe)) {\n    frameState.maximumScreenSpaceError = this.globe.maximumScreenSpaceError;\n  } else {\n    frameState.maximumScreenSpaceError = 2;\n  }\n\n  this.clearPasses(frameState.passes);\n  frameState.tilesetPassState = undefined;\n};\n/**\n * @private\n */\n\n\nScene.prototype.isVisible = function (command, cullingVolume, occluder) {\n  return defined(command) && (!defined(command.boundingVolume) || !command.cull || cullingVolume.computeVisibility(command.boundingVolume) !== Intersect.OUTSIDE && (!defined(occluder) || !command.occlude || !command.boundingVolume.isOccluded(occluder)));\n};\n\nvar transformFrom2D = new Matrix4(0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);\ntransformFrom2D = Matrix4.inverseTransformation(transformFrom2D, transformFrom2D);\n\nfunction debugShowBoundingVolume(command, scene, passState, debugFramebuffer) {\n  // Debug code to draw bounding volume for command.  Not optimized!\n  // Assumes bounding volume is a bounding sphere or box\n  var frameState = scene._frameState;\n  var context = frameState.context;\n  var boundingVolume = command.boundingVolume;\n\n  if (defined(scene._debugVolume)) {\n    scene._debugVolume.destroy();\n  }\n\n  var geometry;\n  var center = Cartesian3.clone(boundingVolume.center);\n\n  if (frameState.mode !== SceneMode.SCENE3D) {\n    center = Matrix4.multiplyByPoint(transformFrom2D, center, center);\n    var projection = frameState.mapProjection;\n    var centerCartographic = projection.unproject(center);\n    center = projection.ellipsoid.cartographicToCartesian(centerCartographic);\n  }\n\n  if (defined(boundingVolume.radius)) {\n    var radius = boundingVolume.radius;\n    geometry = GeometryPipeline.toWireframe(EllipsoidGeometry.createGeometry(new EllipsoidGeometry({\n      radii: new Cartesian3(radius, radius, radius),\n      vertexFormat: PerInstanceColorAppearance.FLAT_VERTEX_FORMAT\n    })));\n    scene._debugVolume = new Primitive({\n      geometryInstances: new GeometryInstance({\n        geometry: geometry,\n        modelMatrix: Matrix4.fromTranslation(center),\n        attributes: {\n          color: new ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 1.0)\n        }\n      }),\n      appearance: new PerInstanceColorAppearance({\n        flat: true,\n        translucent: false\n      }),\n      asynchronous: false\n    });\n  } else {\n    var halfAxes = boundingVolume.halfAxes;\n    geometry = GeometryPipeline.toWireframe(BoxGeometry.createGeometry(BoxGeometry.fromDimensions({\n      dimensions: new Cartesian3(2.0, 2.0, 2.0),\n      vertexFormat: PerInstanceColorAppearance.FLAT_VERTEX_FORMAT\n    })));\n    scene._debugVolume = new Primitive({\n      geometryInstances: new GeometryInstance({\n        geometry: geometry,\n        modelMatrix: Matrix4.fromRotationTranslation(halfAxes, center, new Matrix4()),\n        attributes: {\n          color: new ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 1.0)\n        }\n      }),\n      appearance: new PerInstanceColorAppearance({\n        flat: true,\n        translucent: false\n      }),\n      asynchronous: false\n    });\n  }\n\n  var savedCommandList = frameState.commandList;\n  var commandList = frameState.commandList = [];\n\n  scene._debugVolume.update(frameState);\n\n  command = commandList[0];\n\n  if (frameState.useLogDepth) {\n    var logDepth = DerivedCommand.createLogDepthCommand(command, context);\n    command = logDepth.command;\n  }\n\n  var framebuffer;\n\n  if (defined(debugFramebuffer)) {\n    framebuffer = passState.framebuffer;\n    passState.framebuffer = debugFramebuffer;\n  }\n\n  command.execute(context, passState);\n\n  if (defined(framebuffer)) {\n    passState.framebuffer = framebuffer;\n  }\n\n  frameState.commandList = savedCommandList;\n}\n\nfunction executeCommand(command, scene, context, passState, debugFramebuffer) {\n  var frameState = scene._frameState;\n\n  if (defined(scene.debugCommandFilter) && !scene.debugCommandFilter(command)) {\n    return;\n  }\n\n  if (command instanceof ClearCommand) {\n    command.execute(context, passState);\n    return;\n  }\n\n  if (command.debugShowBoundingVolume && defined(command.boundingVolume)) {\n    debugShowBoundingVolume(command, scene, passState, debugFramebuffer);\n  }\n\n  if (frameState.useLogDepth && defined(command.derivedCommands.logDepth)) {\n    command = command.derivedCommands.logDepth.command;\n  }\n\n  var passes = frameState.passes;\n\n  if (!passes.pick && !passes.depth && scene._hdr && defined(command.derivedCommands) && defined(command.derivedCommands.hdr)) {\n    command = command.derivedCommands.hdr.command;\n  }\n\n  if (passes.pick || passes.depth) {\n    if (passes.pick && !passes.depth && defined(command.derivedCommands.picking)) {\n      command = command.derivedCommands.picking.pickCommand;\n      command.execute(context, passState);\n      return;\n    } else if (defined(command.derivedCommands.depth)) {\n      command = command.derivedCommands.depth.depthOnlyCommand;\n      command.execute(context, passState);\n      return;\n    }\n  }\n\n  if (scene.debugShowCommands || scene.debugShowFrustums) {\n    scene._debugInspector.executeDebugShowFrustumsCommand(scene, command, passState);\n\n    return;\n  }\n\n  if (frameState.shadowState.lightShadowsEnabled && command.receiveShadows && defined(command.derivedCommands.shadows)) {\n    // If the command receives shadows, execute the derived shadows command.\n    // Some commands, such as OIT derived commands, do not have derived shadow commands themselves\n    // and instead shadowing is built-in. In this case execute the command regularly below.\n    command.derivedCommands.shadows.receiveCommand.execute(context, passState);\n  } else {\n    command.execute(context, passState);\n  }\n}\n\nfunction executeIdCommand(command, scene, context, passState) {\n  var frameState = scene._frameState;\n  var derivedCommands = command.derivedCommands;\n\n  if (!defined(derivedCommands)) {\n    return;\n  }\n\n  if (frameState.useLogDepth && defined(derivedCommands.logDepth)) {\n    command = derivedCommands.logDepth.command;\n  }\n\n  derivedCommands = command.derivedCommands;\n\n  if (defined(derivedCommands.picking)) {\n    command = derivedCommands.picking.pickCommand;\n    command.execute(context, passState);\n  } else if (defined(derivedCommands.depth)) {\n    command = derivedCommands.depth.depthOnlyCommand;\n    command.execute(context, passState);\n  }\n}\n\nfunction backToFront(a, b, position) {\n  return b.boundingVolume.distanceSquaredTo(position) - a.boundingVolume.distanceSquaredTo(position);\n}\n\nfunction frontToBack(a, b, position) {\n  // When distances are equal equal favor sorting b before a. This gives render priority to commands later in the list.\n  return a.boundingVolume.distanceSquaredTo(position) - b.boundingVolume.distanceSquaredTo(position) + CesiumMath.EPSILON12;\n}\n\nfunction executeTranslucentCommandsBackToFront(scene, executeFunction, passState, commands, invertClassification) {\n  var context = scene.context;\n  mergeSort(commands, backToFront, scene.camera.positionWC);\n\n  if (defined(invertClassification)) {\n    executeFunction(invertClassification.unclassifiedCommand, scene, context, passState);\n  }\n\n  var length = commands.length;\n\n  for (var i = 0; i < length; ++i) {\n    executeFunction(commands[i], scene, context, passState);\n  }\n}\n\nfunction executeTranslucentCommandsFrontToBack(scene, executeFunction, passState, commands, invertClassification) {\n  var context = scene.context;\n  mergeSort(commands, frontToBack, scene.camera.positionWC);\n\n  if (defined(invertClassification)) {\n    executeFunction(invertClassification.unclassifiedCommand, scene, context, passState);\n  }\n\n  var length = commands.length;\n\n  for (var i = 0; i < length; ++i) {\n    executeFunction(commands[i], scene, context, passState);\n  }\n}\n\nfunction getDebugGlobeDepth(scene, index) {\n  var globeDepths = scene._view.debugGlobeDepths;\n  var globeDepth = globeDepths[index];\n\n  if (!defined(globeDepth) && scene.context.depthTexture) {\n    globeDepth = new GlobeDepth();\n    globeDepths[index] = globeDepth;\n  }\n\n  return globeDepth;\n}\n\nvar scratchPerspectiveFrustum = new PerspectiveFrustum();\nvar scratchPerspectiveOffCenterFrustum = new PerspectiveOffCenterFrustum();\nvar scratchOrthographicFrustum = new OrthographicFrustum();\nvar scratchOrthographicOffCenterFrustum = new OrthographicOffCenterFrustum();\n\nfunction executeCommands(scene, passState) {\n  var camera = scene.camera;\n  var context = scene.context;\n  var frameState = scene.frameState;\n  var us = context.uniformState;\n  us.updateCamera(camera); // Create a working frustum from the original camera frustum.\n\n  var frustum;\n\n  if (defined(camera.frustum.fov)) {\n    frustum = camera.frustum.clone(scratchPerspectiveFrustum);\n  } else if (defined(camera.frustum.infiniteProjectionMatrix)) {\n    frustum = camera.frustum.clone(scratchPerspectiveOffCenterFrustum);\n  } else if (defined(camera.frustum.width)) {\n    frustum = camera.frustum.clone(scratchOrthographicFrustum);\n  } else {\n    frustum = camera.frustum.clone(scratchOrthographicOffCenterFrustum);\n  } // Ideally, we would render the sky box and atmosphere last for\n  // early-z, but we would have to draw it in each frustum\n\n\n  frustum.near = camera.frustum.near;\n  frustum.far = camera.frustum.far;\n  us.updateFrustum(frustum);\n  us.updatePass(Pass.ENVIRONMENT);\n  var passes = frameState.passes;\n  var picking = passes.pick;\n  var environmentState = scene._environmentState;\n  var view = scene._view;\n  var renderTranslucentDepthForPick = environmentState.renderTranslucentDepthForPick;\n  var useWebVR = environmentState.useWebVR; // Do not render environment primitives during a pick pass since they do not generate picking commands.\n\n  if (!picking) {\n    var skyBoxCommand = environmentState.skyBoxCommand;\n\n    if (defined(skyBoxCommand)) {\n      executeCommand(skyBoxCommand, scene, context, passState);\n    }\n\n    if (environmentState.isSkyAtmosphereVisible) {\n      executeCommand(environmentState.skyAtmosphereCommand, scene, context, passState);\n    }\n\n    if (environmentState.isSunVisible) {\n      environmentState.sunDrawCommand.execute(context, passState);\n\n      if (scene.sunBloom && !useWebVR) {\n        var framebuffer;\n\n        if (environmentState.useGlobeDepthFramebuffer) {\n          framebuffer = view.globeDepth.framebuffer;\n        } else if (environmentState.usePostProcess) {\n          framebuffer = view.sceneFramebuffer.getFramebuffer();\n        } else {\n          framebuffer = environmentState.originalFramebuffer;\n        }\n\n        scene._sunPostProcess.execute(context);\n\n        scene._sunPostProcess.copy(context, framebuffer);\n\n        passState.framebuffer = framebuffer;\n      }\n    } // Moon can be seen through the atmosphere, since the sun is rendered after the atmosphere.\n\n\n    if (environmentState.isMoonVisible) {\n      environmentState.moonCommand.execute(context, passState);\n    }\n  } // Determine how translucent surfaces will be handled.\n\n\n  var executeTranslucentCommands;\n\n  if (environmentState.useOIT) {\n    if (!defined(scene._executeOITFunction)) {\n      scene._executeOITFunction = function (scene, executeFunction, passState, commands, invertClassification) {\n        view.oit.executeCommands(scene, executeFunction, passState, commands, invertClassification);\n      };\n    }\n\n    executeTranslucentCommands = scene._executeOITFunction;\n  } else if (passes.render) {\n    executeTranslucentCommands = executeTranslucentCommandsBackToFront;\n  } else {\n    executeTranslucentCommands = executeTranslucentCommandsFrontToBack;\n  }\n\n  var frustumCommandsList = view.frustumCommandsList;\n  var numFrustums = frustumCommandsList.length;\n  var clearGlobeDepth = environmentState.clearGlobeDepth;\n  var useDepthPlane = environmentState.useDepthPlane;\n  var globeTranslucencyState = scene._globeTranslucencyState;\n  var globeTranslucent = globeTranslucencyState.translucent;\n  var globeTranslucencyFramebuffer = scene._view.globeTranslucencyFramebuffer;\n  var separatePrimitiveFramebuffer = environmentState.separatePrimitiveFramebuffer = false;\n  var clearDepth = scene._depthClearCommand;\n  var clearStencil = scene._stencilClearCommand;\n  var clearClassificationStencil = scene._classificationStencilClearCommand;\n  var depthPlane = scene._depthPlane;\n  var usePostProcessSelected = environmentState.usePostProcessSelected;\n  var height2D = camera.position.z; // Execute commands in each frustum in back to front order\n\n  var j;\n\n  for (var i = 0; i < numFrustums; ++i) {\n    var index = numFrustums - i - 1;\n    var frustumCommands = frustumCommandsList[index];\n\n    if (scene.mode === SceneMode.SCENE2D) {\n      // To avoid z-fighting in 2D, move the camera to just before the frustum\n      // and scale the frustum depth to be in [1.0, nearToFarDistance2D].\n      camera.position.z = height2D - frustumCommands.near + 1.0;\n      frustum.far = Math.max(1.0, frustumCommands.far - frustumCommands.near);\n      frustum.near = 1.0;\n      us.update(frameState);\n      us.updateFrustum(frustum);\n    } else {\n      // Avoid tearing artifacts between adjacent frustums in the opaque passes\n      frustum.near = index !== 0 ? frustumCommands.near * scene.opaqueFrustumNearOffset : frustumCommands.near;\n      frustum.far = frustumCommands.far;\n      us.updateFrustum(frustum);\n    }\n\n    var globeDepth = scene.debugShowGlobeDepth ? getDebugGlobeDepth(scene, index) : view.globeDepth;\n\n    if (separatePrimitiveFramebuffer) {\n      // Render to globe framebuffer in GLOBE pass\n      passState.framebuffer = globeDepth.framebuffer;\n    }\n\n    var fb;\n\n    if (scene.debugShowGlobeDepth && defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n      globeDepth.update(context, passState, view.viewport, scene._hdr, clearGlobeDepth);\n      globeDepth.clear(context, passState, scene._clearColorCommand.color);\n      fb = passState.framebuffer;\n      passState.framebuffer = globeDepth.framebuffer;\n    }\n\n    clearDepth.execute(context, passState);\n\n    if (context.stencilBuffer) {\n      clearStencil.execute(context, passState);\n    }\n\n    us.updatePass(Pass.GLOBE);\n    var commands = frustumCommands.commands[Pass.GLOBE];\n    var length = frustumCommands.indices[Pass.GLOBE];\n\n    if (globeTranslucent) {\n      globeTranslucencyState.executeGlobeCommands(frustumCommands, executeCommand, globeTranslucencyFramebuffer, scene, passState);\n    } else {\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n    }\n\n    if (defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n      globeDepth.executeCopyDepth(context, passState);\n    }\n\n    if (scene.debugShowGlobeDepth && defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n      passState.framebuffer = fb;\n    } // Draw terrain classification\n\n\n    if (!environmentState.renderTranslucentDepthForPick) {\n      us.updatePass(Pass.TERRAIN_CLASSIFICATION);\n      commands = frustumCommands.commands[Pass.TERRAIN_CLASSIFICATION];\n      length = frustumCommands.indices[Pass.TERRAIN_CLASSIFICATION];\n\n      if (globeTranslucent) {\n        globeTranslucencyState.executeGlobeClassificationCommands(frustumCommands, executeCommand, globeTranslucencyFramebuffer, scene, passState);\n      } else {\n        for (j = 0; j < length; ++j) {\n          executeCommand(commands[j], scene, context, passState);\n        }\n      }\n    }\n\n    if (clearGlobeDepth) {\n      clearDepth.execute(context, passState);\n\n      if (useDepthPlane) {\n        depthPlane.execute(context, passState);\n      }\n    }\n\n    if (separatePrimitiveFramebuffer) {\n      // Render to primitive framebuffer in all other passes\n      passState.framebuffer = globeDepth.primitiveFramebuffer;\n    }\n\n    if (!environmentState.useInvertClassification || picking || environmentState.renderTranslucentDepthForPick) {\n      // Common/fastest path. Draw 3D Tiles and classification normally.\n      // Draw 3D Tiles\n      us.updatePass(Pass.CESIUM_3D_TILE);\n      commands = frustumCommands.commands[Pass.CESIUM_3D_TILE];\n      length = frustumCommands.indices[Pass.CESIUM_3D_TILE];\n\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n\n      if (length > 0) {\n        if (defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n          globeDepth.executeUpdateDepth(context, passState, clearGlobeDepth);\n        } // Draw classifications. Modifies 3D Tiles color.\n\n\n        if (!environmentState.renderTranslucentDepthForPick) {\n          us.updatePass(Pass.CESIUM_3D_TILE_CLASSIFICATION);\n          commands = frustumCommands.commands[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n          length = frustumCommands.indices[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n\n          for (j = 0; j < length; ++j) {\n            executeCommand(commands[j], scene, context, passState);\n          }\n        }\n      }\n    } else {\n      // When the invert classification color is opaque:\n      //    Main FBO (FBO1):                   Main_Color   + Main_DepthStencil\n      //    Invert classification FBO (FBO2) : Invert_Color + Main_DepthStencil\n      //\n      //    1. Clear FBO2 color to vec4(0.0) for each frustum\n      //    2. Draw 3D Tiles to FBO2\n      //    3. Draw classification to FBO2\n      //    4. Fullscreen pass to FBO1, draw Invert_Color when:\n      //           * Main_DepthStencil has the stencil bit set > 0 (classified)\n      //    5. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n      //           * Main_DepthStencil has stencil bit set to 0 (unclassified) and\n      //           * Invert_Color !== vec4(0.0)\n      //\n      // When the invert classification color is translucent:\n      //    Main FBO (FBO1):                  Main_Color         + Main_DepthStencil\n      //    Invert classification FBO (FBO2): Invert_Color       + Invert_DepthStencil\n      //    IsClassified FBO (FBO3):          IsClassified_Color + Invert_DepthStencil\n      //\n      //    1. Clear FBO2 and FBO3 color to vec4(0.0), stencil to 0, and depth to 1.0\n      //    2. Draw 3D Tiles to FBO2\n      //    3. Draw classification to FBO2\n      //    4. Fullscreen pass to FBO3, draw any color when\n      //           * Invert_DepthStencil has the stencil bit set > 0 (classified)\n      //    5. Fullscreen pass to FBO1, draw Invert_Color when:\n      //           * Invert_Color !== vec4(0.0) and\n      //           * IsClassified_Color !== vec4(0.0)\n      //    6. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n      //           * Invert_Color !== vec4(0.0) and\n      //           * IsClassified_Color === vec4(0.0)\n      //\n      // NOTE: Step six when translucent invert color occurs after the TRANSLUCENT pass\n      //\n      scene._invertClassification.clear(context, passState);\n\n      var opaqueClassificationFramebuffer = passState.framebuffer;\n      passState.framebuffer = scene._invertClassification._fbo; // Draw normally\n\n      us.updatePass(Pass.CESIUM_3D_TILE);\n      commands = frustumCommands.commands[Pass.CESIUM_3D_TILE];\n      length = frustumCommands.indices[Pass.CESIUM_3D_TILE];\n\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n\n      if (defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n        globeDepth.executeUpdateDepth(context, passState, clearGlobeDepth);\n      } // Set stencil\n\n\n      us.updatePass(Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW);\n      commands = frustumCommands.commands[Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW];\n      length = frustumCommands.indices[Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW];\n\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n\n      passState.framebuffer = opaqueClassificationFramebuffer; // Fullscreen pass to copy classified fragments\n\n      scene._invertClassification.executeClassified(context, passState);\n\n      if (frameState.invertClassificationColor.alpha === 1.0) {\n        // Fullscreen pass to copy unclassified fragments when alpha == 1.0\n        scene._invertClassification.executeUnclassified(context, passState);\n      } // Clear stencil set by the classification for the next classification pass\n\n\n      if (length > 0 && context.stencilBuffer) {\n        clearClassificationStencil.execute(context, passState);\n      } // Draw style over classification.\n\n\n      us.updatePass(Pass.CESIUM_3D_TILE_CLASSIFICATION);\n      commands = frustumCommands.commands[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n      length = frustumCommands.indices[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n    }\n\n    if (length > 0 && context.stencilBuffer) {\n      clearStencil.execute(context, passState);\n    }\n\n    us.updatePass(Pass.OPAQUE);\n    commands = frustumCommands.commands[Pass.OPAQUE];\n    length = frustumCommands.indices[Pass.OPAQUE];\n\n    for (j = 0; j < length; ++j) {\n      executeCommand(commands[j], scene, context, passState);\n    }\n\n    if (index !== 0 && scene.mode !== SceneMode.SCENE2D) {\n      // Do not overlap frustums in the translucent pass to avoid blending artifacts\n      frustum.near = frustumCommands.near;\n      us.updateFrustum(frustum);\n    }\n\n    var invertClassification;\n\n    if (!picking && environmentState.useInvertClassification && frameState.invertClassificationColor.alpha < 1.0) {\n      // Fullscreen pass to copy unclassified fragments when alpha < 1.0.\n      // Not executed when undefined.\n      invertClassification = scene._invertClassification;\n    }\n\n    us.updatePass(Pass.TRANSLUCENT);\n    commands = frustumCommands.commands[Pass.TRANSLUCENT];\n    commands.length = frustumCommands.indices[Pass.TRANSLUCENT];\n    executeTranslucentCommands(scene, executeCommand, passState, commands, invertClassification);\n\n    if (context.depthTexture && scene.useDepthPicking && (environmentState.useGlobeDepthFramebuffer || renderTranslucentDepthForPick)) {\n      // PERFORMANCE_IDEA: Use MRT to avoid the extra copy.\n      var depthStencilTexture = renderTranslucentDepthForPick ? passState.framebuffer.depthStencilTexture : globeDepth.framebuffer.depthStencilTexture;\n\n      var pickDepth = scene._picking.getPickDepth(scene, index);\n\n      pickDepth.update(context, depthStencilTexture);\n      pickDepth.executeCopyDepth(context, passState);\n    }\n\n    if (separatePrimitiveFramebuffer) {\n      // Reset framebuffer\n      passState.framebuffer = globeDepth.framebuffer;\n    }\n\n    if (picking || !usePostProcessSelected) {\n      continue;\n    }\n\n    var originalFramebuffer = passState.framebuffer;\n    passState.framebuffer = view.sceneFramebuffer.getIdFramebuffer(); // reset frustum\n\n    frustum.near = index !== 0 ? frustumCommands.near * scene.opaqueFrustumNearOffset : frustumCommands.near;\n    frustum.far = frustumCommands.far;\n    us.updateFrustum(frustum);\n    us.updatePass(Pass.GLOBE);\n    commands = frustumCommands.commands[Pass.GLOBE];\n    length = frustumCommands.indices[Pass.GLOBE];\n\n    if (globeTranslucent) {\n      globeTranslucencyState.executeGlobeCommands(frustumCommands, executeIdCommand, globeTranslucencyFramebuffer, scene, passState);\n    } else {\n      for (j = 0; j < length; ++j) {\n        executeIdCommand(commands[j], scene, context, passState);\n      }\n    }\n\n    if (clearGlobeDepth) {\n      clearDepth.framebuffer = passState.framebuffer;\n      clearDepth.execute(context, passState);\n      clearDepth.framebuffer = undefined;\n    }\n\n    if (clearGlobeDepth && useDepthPlane) {\n      depthPlane.execute(context, passState);\n    }\n\n    us.updatePass(Pass.CESIUM_3D_TILE);\n    commands = frustumCommands.commands[Pass.CESIUM_3D_TILE];\n    length = frustumCommands.indices[Pass.CESIUM_3D_TILE];\n\n    for (j = 0; j < length; ++j) {\n      executeIdCommand(commands[j], scene, context, passState);\n    }\n\n    us.updatePass(Pass.OPAQUE);\n    commands = frustumCommands.commands[Pass.OPAQUE];\n    length = frustumCommands.indices[Pass.OPAQUE];\n\n    for (j = 0; j < length; ++j) {\n      executeIdCommand(commands[j], scene, context, passState);\n    }\n\n    us.updatePass(Pass.TRANSLUCENT);\n    commands = frustumCommands.commands[Pass.TRANSLUCENT];\n    length = frustumCommands.indices[Pass.TRANSLUCENT];\n\n    for (j = 0; j < length; ++j) {\n      executeIdCommand(commands[j], scene, context, passState);\n    }\n\n    passState.framebuffer = originalFramebuffer;\n  }\n}\n\nfunction executeComputeCommands(scene) {\n  var us = scene.context.uniformState;\n  us.updatePass(Pass.COMPUTE);\n  var sunComputeCommand = scene._environmentState.sunComputeCommand;\n\n  if (defined(sunComputeCommand)) {\n    sunComputeCommand.execute(scene._computeEngine);\n  }\n\n  var commandList = scene._computeCommandList;\n  var length = commandList.length;\n\n  for (var i = 0; i < length; ++i) {\n    commandList[i].execute(scene._computeEngine);\n  }\n}\n\nfunction executeOverlayCommands(scene, passState) {\n  var us = scene.context.uniformState;\n  us.updatePass(Pass.OVERLAY);\n  var context = scene.context;\n  var commandList = scene._overlayCommandList;\n  var length = commandList.length;\n\n  for (var i = 0; i < length; ++i) {\n    commandList[i].execute(context, passState);\n  }\n}\n\nfunction insertShadowCastCommands(scene, commandList, shadowMap) {\n  var shadowVolume = shadowMap.shadowMapCullingVolume;\n  var isPointLight = shadowMap.isPointLight;\n  var passes = shadowMap.passes;\n  var numberOfPasses = passes.length;\n  var length = commandList.length;\n\n  for (var i = 0; i < length; ++i) {\n    var command = commandList[i];\n    scene.updateDerivedCommands(command);\n\n    if (command.castShadows && (command.pass === Pass.GLOBE || command.pass === Pass.CESIUM_3D_TILE || command.pass === Pass.OPAQUE || command.pass === Pass.TRANSLUCENT)) {\n      if (scene.isVisible(command, shadowVolume)) {\n        if (isPointLight) {\n          for (var k = 0; k < numberOfPasses; ++k) {\n            passes[k].commandList.push(command);\n          }\n        } else if (numberOfPasses === 1) {\n          passes[0].commandList.push(command);\n        } else {\n          var wasVisible = false; // Loop over cascades from largest to smallest\n\n          for (var j = numberOfPasses - 1; j >= 0; --j) {\n            var cascadeVolume = passes[j].cullingVolume;\n\n            if (scene.isVisible(command, cascadeVolume)) {\n              passes[j].commandList.push(command);\n              wasVisible = true;\n            } else if (wasVisible) {\n              // If it was visible in the previous cascade but now isn't\n              // then there is no need to check any more cascades\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction executeShadowMapCastCommands(scene) {\n  var frameState = scene.frameState;\n  var shadowMaps = frameState.shadowState.shadowMaps;\n  var shadowMapLength = shadowMaps.length;\n\n  if (!frameState.shadowState.shadowsEnabled) {\n    return;\n  }\n\n  var context = scene.context;\n  var uniformState = context.uniformState;\n\n  for (var i = 0; i < shadowMapLength; ++i) {\n    var shadowMap = shadowMaps[i];\n\n    if (shadowMap.outOfView) {\n      continue;\n    } // Reset the command lists\n\n\n    var j;\n    var passes = shadowMap.passes;\n    var numberOfPasses = passes.length;\n\n    for (j = 0; j < numberOfPasses; ++j) {\n      passes[j].commandList.length = 0;\n    } // Insert the primitive/model commands into the command lists\n\n\n    var sceneCommands = scene.frameState.commandList;\n    insertShadowCastCommands(scene, sceneCommands, shadowMap);\n\n    for (j = 0; j < numberOfPasses; ++j) {\n      var pass = shadowMap.passes[j];\n      uniformState.updateCamera(pass.camera);\n      shadowMap.updatePass(context, j);\n      var numberOfCommands = pass.commandList.length;\n\n      for (var k = 0; k < numberOfCommands; ++k) {\n        var command = pass.commandList[k]; // Set the correct pass before rendering into the shadow map because some shaders\n        // conditionally render based on whether the pass is translucent or opaque.\n\n        uniformState.updatePass(command.pass);\n        executeCommand(command.derivedCommands.shadows.castCommands[i], scene, context, pass.passState);\n      }\n    }\n  }\n}\n\nvar scratchEyeTranslation = new Cartesian3();\n/**\n * @private\n */\n\nScene.prototype.updateAndExecuteCommands = function (passState, backgroundColor) {\n  var frameState = this._frameState;\n  var mode = frameState.mode;\n  var useWebVR = this._environmentState.useWebVR;\n\n  if (useWebVR) {\n    executeWebVRCommands(this, passState, backgroundColor);\n  } else if (mode !== SceneMode.SCENE2D || this._mapMode2D === MapMode2D.ROTATE) {\n    executeCommandsInViewport(true, this, passState, backgroundColor);\n  } else {\n    updateAndClearFramebuffers(this, passState, backgroundColor);\n    execute2DViewportCommands(this, passState);\n  }\n};\n\nfunction executeWebVRCommands(scene, passState, backgroundColor) {\n  var view = scene._view;\n  var camera = view.camera;\n  var environmentState = scene._environmentState;\n  var renderTranslucentDepthForPick = environmentState.renderTranslucentDepthForPick;\n  updateAndClearFramebuffers(scene, passState, backgroundColor);\n\n  if (!renderTranslucentDepthForPick) {\n    updateAndRenderPrimitives(scene);\n  }\n\n  view.createPotentiallyVisibleSet(scene);\n\n  if (!renderTranslucentDepthForPick) {\n    executeComputeCommands(scene);\n    executeShadowMapCastCommands(scene);\n  } // Based on Calculating Stereo pairs by Paul Bourke\n  // http://paulbourke.net/stereographics/stereorender/\n\n\n  var viewport = passState.viewport;\n  viewport.x = 0;\n  viewport.y = 0;\n  viewport.width = viewport.width * 0.5;\n  var savedCamera = Camera.clone(camera, scene._cameraVR);\n  savedCamera.frustum = camera.frustum;\n  var near = camera.frustum.near;\n  var fo = near * defaultValue(scene.focalLength, 5.0);\n  var eyeSeparation = defaultValue(scene.eyeSeparation, fo / 30.0);\n  var eyeTranslation = Cartesian3.multiplyByScalar(savedCamera.right, eyeSeparation * 0.5, scratchEyeTranslation);\n  camera.frustum.aspectRatio = viewport.width / viewport.height;\n  var offset = 0.5 * eyeSeparation * near / fo;\n  Cartesian3.add(savedCamera.position, eyeTranslation, camera.position);\n  camera.frustum.xOffset = offset;\n  executeCommands(scene, passState);\n  viewport.x = viewport.width;\n  Cartesian3.subtract(savedCamera.position, eyeTranslation, camera.position);\n  camera.frustum.xOffset = -offset;\n  executeCommands(scene, passState);\n  Camera.clone(savedCamera, camera);\n}\n\nvar scratch2DViewportCartographic = new Cartographic(Math.PI, CesiumMath.PI_OVER_TWO);\nvar scratch2DViewportMaxCoord = new Cartesian3();\nvar scratch2DViewportSavedPosition = new Cartesian3();\nvar scratch2DViewportTransform = new Matrix4();\nvar scratch2DViewportCameraTransform = new Matrix4();\nvar scratch2DViewportEyePoint = new Cartesian3();\nvar scratch2DViewportWindowCoords = new Cartesian3();\nvar scratch2DViewport = new BoundingRectangle();\n\nfunction execute2DViewportCommands(scene, passState) {\n  var context = scene.context;\n  var frameState = scene.frameState;\n  var camera = scene.camera;\n  var originalViewport = passState.viewport;\n  var viewport = BoundingRectangle.clone(originalViewport, scratch2DViewport);\n  passState.viewport = viewport;\n  var maxCartographic = scratch2DViewportCartographic;\n  var maxCoord = scratch2DViewportMaxCoord;\n  var projection = scene.mapProjection;\n  projection.project(maxCartographic, maxCoord);\n  var position = Cartesian3.clone(camera.position, scratch2DViewportSavedPosition);\n  var transform = Matrix4.clone(camera.transform, scratch2DViewportCameraTransform);\n  var frustum = camera.frustum.clone();\n\n  camera._setTransform(Matrix4.IDENTITY);\n\n  var viewportTransformation = Matrix4.computeViewportTransformation(viewport, 0.0, 1.0, scratch2DViewportTransform);\n  var projectionMatrix = camera.frustum.projectionMatrix;\n  var x = camera.positionWC.y;\n  var eyePoint = Cartesian3.fromElements(CesiumMath.sign(x) * maxCoord.x - x, 0.0, -camera.positionWC.x, scratch2DViewportEyePoint);\n  var windowCoordinates = Transforms.pointToGLWindowCoordinates(projectionMatrix, viewportTransformation, eyePoint, scratch2DViewportWindowCoords);\n  windowCoordinates.x = Math.floor(windowCoordinates.x);\n  var viewportX = viewport.x;\n  var viewportWidth = viewport.width;\n\n  if (x === 0.0 || windowCoordinates.x <= viewportX || windowCoordinates.x >= viewportX + viewportWidth) {\n    executeCommandsInViewport(true, scene, passState);\n  } else if (Math.abs(viewportX + viewportWidth * 0.5 - windowCoordinates.x) < 1.0) {\n    viewport.width = windowCoordinates.x - viewport.x;\n    camera.position.x *= CesiumMath.sign(camera.position.x);\n    camera.frustum.right = 0.0;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    context.uniformState.update(frameState);\n    executeCommandsInViewport(true, scene, passState);\n    viewport.x = windowCoordinates.x;\n    camera.position.x = -camera.position.x;\n    camera.frustum.right = -camera.frustum.left;\n    camera.frustum.left = 0.0;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    context.uniformState.update(frameState);\n    executeCommandsInViewport(false, scene, passState);\n  } else if (windowCoordinates.x > viewportX + viewportWidth * 0.5) {\n    viewport.width = windowCoordinates.x - viewportX;\n    var right = camera.frustum.right;\n    camera.frustum.right = maxCoord.x - x;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    context.uniformState.update(frameState);\n    executeCommandsInViewport(true, scene, passState);\n    viewport.x = windowCoordinates.x;\n    viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n    camera.position.x = -camera.position.x;\n    camera.frustum.left = -camera.frustum.right;\n    camera.frustum.right = right - camera.frustum.right * 2.0;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    context.uniformState.update(frameState);\n    executeCommandsInViewport(false, scene, passState);\n  } else {\n    viewport.x = windowCoordinates.x;\n    viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n    var left = camera.frustum.left;\n    camera.frustum.left = -maxCoord.x - x;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    context.uniformState.update(frameState);\n    executeCommandsInViewport(true, scene, passState);\n    viewport.x = viewportX;\n    viewport.width = windowCoordinates.x - viewportX;\n    camera.position.x = -camera.position.x;\n    camera.frustum.right = -camera.frustum.left;\n    camera.frustum.left = left - camera.frustum.left * 2.0;\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    context.uniformState.update(frameState);\n    executeCommandsInViewport(false, scene, passState);\n  }\n\n  camera._setTransform(transform);\n\n  Cartesian3.clone(position, camera.position);\n  camera.frustum = frustum.clone();\n  passState.viewport = originalViewport;\n}\n\nfunction executeCommandsInViewport(firstViewport, scene, passState, backgroundColor) {\n  var environmentState = scene._environmentState;\n  var view = scene._view;\n  var renderTranslucentDepthForPick = environmentState.renderTranslucentDepthForPick;\n\n  if (!firstViewport && !renderTranslucentDepthForPick) {\n    scene.frameState.commandList.length = 0;\n  }\n\n  if (!renderTranslucentDepthForPick) {\n    updateAndRenderPrimitives(scene);\n  }\n\n  view.createPotentiallyVisibleSet(scene);\n\n  if (firstViewport) {\n    if (defined(backgroundColor)) {\n      updateAndClearFramebuffers(scene, passState, backgroundColor);\n    }\n\n    if (!renderTranslucentDepthForPick) {\n      executeComputeCommands(scene);\n      executeShadowMapCastCommands(scene);\n    }\n  }\n\n  executeCommands(scene, passState);\n}\n\nvar scratchCullingVolume = new CullingVolume();\n/**\n * @private\n */\n\nScene.prototype.updateEnvironment = function () {\n  var frameState = this._frameState;\n  var view = this._view; // Update celestial and terrestrial environment effects.\n\n  var environmentState = this._environmentState;\n  var renderPass = frameState.passes.render;\n  var offscreenPass = frameState.passes.offscreen;\n  var skyAtmosphere = this.skyAtmosphere;\n  var globe = this.globe;\n  var globeTranslucencyState = this._globeTranslucencyState;\n\n  if (!renderPass || this._mode !== SceneMode.SCENE2D && view.camera.frustum instanceof OrthographicFrustum || !globeTranslucencyState.environmentVisible) {\n    environmentState.skyAtmosphereCommand = undefined;\n    environmentState.skyBoxCommand = undefined;\n    environmentState.sunDrawCommand = undefined;\n    environmentState.sunComputeCommand = undefined;\n    environmentState.moonCommand = undefined;\n  } else {\n    if (defined(skyAtmosphere)) {\n      if (defined(globe)) {\n        skyAtmosphere.setDynamicAtmosphereColor(globe.enableLighting && globe.dynamicAtmosphereLighting, globe.dynamicAtmosphereLightingFromSun);\n        environmentState.isReadyForAtmosphere = environmentState.isReadyForAtmosphere || globe._surface._tilesToRender.length > 0;\n      }\n\n      environmentState.skyAtmosphereCommand = skyAtmosphere.update(frameState, globe);\n\n      if (defined(environmentState.skyAtmosphereCommand)) {\n        this.updateDerivedCommands(environmentState.skyAtmosphereCommand);\n      }\n    } else {\n      environmentState.skyAtmosphereCommand = undefined;\n    }\n\n    environmentState.skyBoxCommand = defined(this.skyBox) ? this.skyBox.update(frameState, this._hdr) : undefined;\n    var sunCommands = defined(this.sun) ? this.sun.update(frameState, view.passState, this._hdr) : undefined;\n    environmentState.sunDrawCommand = defined(sunCommands) ? sunCommands.drawCommand : undefined;\n    environmentState.sunComputeCommand = defined(sunCommands) ? sunCommands.computeCommand : undefined;\n    environmentState.moonCommand = defined(this.moon) ? this.moon.update(frameState) : undefined;\n  }\n\n  var clearGlobeDepth = environmentState.clearGlobeDepth = defined(globe) && globe.show && (!globe.depthTestAgainstTerrain || this.mode === SceneMode.SCENE2D);\n  var useDepthPlane = environmentState.useDepthPlane = clearGlobeDepth && this.mode === SceneMode.SCENE3D && globeTranslucencyState.useDepthPlane;\n\n  if (useDepthPlane) {\n    // Update the depth plane that is rendered in 3D when the primitives are\n    // not depth tested against terrain so primitives on the backface\n    // of the globe are not picked.\n    this._depthPlane.update(frameState);\n  }\n\n  environmentState.renderTranslucentDepthForPick = false;\n  environmentState.useWebVR = this._useWebVR && this.mode !== SceneMode.SCENE2D && !offscreenPass;\n  var occluder = frameState.mode === SceneMode.SCENE3D && !globeTranslucencyState.sunVisibleThroughGlobe ? frameState.occluder : undefined;\n  var cullingVolume = frameState.cullingVolume; // get user culling volume minus the far plane.\n\n  var planes = scratchCullingVolume.planes;\n\n  for (var k = 0; k < 5; ++k) {\n    planes[k] = cullingVolume.planes[k];\n  }\n\n  cullingVolume = scratchCullingVolume; // Determine visibility of celestial and terrestrial environment effects.\n\n  environmentState.isSkyAtmosphereVisible = defined(environmentState.skyAtmosphereCommand) && environmentState.isReadyForAtmosphere;\n  environmentState.isSunVisible = this.isVisible(environmentState.sunDrawCommand, cullingVolume, occluder);\n  environmentState.isMoonVisible = this.isVisible(environmentState.moonCommand, cullingVolume, occluder);\n  var envMaps = this.specularEnvironmentMaps;\n  var envMapAtlas = this._specularEnvironmentMapAtlas;\n\n  if (defined(envMaps) && (!defined(envMapAtlas) || envMapAtlas.url !== envMaps)) {\n    envMapAtlas = envMapAtlas && envMapAtlas.destroy();\n    this._specularEnvironmentMapAtlas = new OctahedralProjectedCubeMap(envMaps);\n  } else if (!defined(envMaps) && defined(envMapAtlas)) {\n    envMapAtlas.destroy();\n    this._specularEnvironmentMapAtlas = undefined;\n  }\n\n  if (defined(this._specularEnvironmentMapAtlas)) {\n    this._specularEnvironmentMapAtlas.update(frameState);\n  }\n};\n\nfunction updateDebugFrustumPlanes(scene) {\n  var frameState = scene._frameState;\n\n  if (scene.debugShowFrustumPlanes !== scene._debugShowFrustumPlanes) {\n    if (scene.debugShowFrustumPlanes) {\n      scene._debugFrustumPlanes = new DebugCameraPrimitive({\n        camera: scene.camera,\n        updateOnChange: false,\n        frustumSplits: frameState.frustumSplits\n      });\n    } else {\n      scene._debugFrustumPlanes = scene._debugFrustumPlanes && scene._debugFrustumPlanes.destroy();\n    }\n\n    scene._debugShowFrustumPlanes = scene.debugShowFrustumPlanes;\n  }\n\n  if (defined(scene._debugFrustumPlanes)) {\n    scene._debugFrustumPlanes.update(frameState);\n  }\n}\n\nfunction updateShadowMaps(scene) {\n  var frameState = scene._frameState;\n  var shadowMaps = frameState.shadowMaps;\n  var length = shadowMaps.length;\n  var shadowsEnabled = length > 0 && !frameState.passes.pick && scene.mode === SceneMode.SCENE3D;\n\n  if (shadowsEnabled !== frameState.shadowState.shadowsEnabled) {\n    // Update derived commands when shadowsEnabled changes\n    ++frameState.shadowState.lastDirtyTime;\n    frameState.shadowState.shadowsEnabled = shadowsEnabled;\n  }\n\n  frameState.shadowState.lightShadowsEnabled = false;\n\n  if (!shadowsEnabled) {\n    return;\n  } // Check if the shadow maps are different than the shadow maps last frame.\n  // If so, the derived commands need to be updated.\n\n\n  for (var j = 0; j < length; ++j) {\n    if (shadowMaps[j] !== frameState.shadowState.shadowMaps[j]) {\n      ++frameState.shadowState.lastDirtyTime;\n      break;\n    }\n  }\n\n  frameState.shadowState.shadowMaps.length = 0;\n  frameState.shadowState.lightShadowMaps.length = 0;\n\n  for (var i = 0; i < length; ++i) {\n    var shadowMap = shadowMaps[i];\n    shadowMap.update(frameState);\n    frameState.shadowState.shadowMaps.push(shadowMap);\n\n    if (shadowMap.fromLightSource) {\n      frameState.shadowState.lightShadowMaps.push(shadowMap);\n      frameState.shadowState.lightShadowsEnabled = true;\n    }\n\n    if (shadowMap.dirty) {\n      ++frameState.shadowState.lastDirtyTime;\n      shadowMap.dirty = false;\n    }\n  }\n}\n\nfunction updateAndRenderPrimitives(scene) {\n  var frameState = scene._frameState;\n\n  scene._groundPrimitives.update(frameState);\n\n  scene._primitives.update(frameState);\n\n  updateDebugFrustumPlanes(scene);\n  updateShadowMaps(scene);\n\n  if (scene._globe) {\n    scene._globe.render(frameState);\n  }\n}\n\nfunction updateAndClearFramebuffers(scene, passState, clearColor) {\n  var context = scene._context;\n  var frameState = scene._frameState;\n  var environmentState = scene._environmentState;\n  var view = scene._view;\n  var passes = scene._frameState.passes;\n  var picking = passes.pick;\n  var useWebVR = environmentState.useWebVR; // Preserve the reference to the original framebuffer.\n\n  environmentState.originalFramebuffer = passState.framebuffer; // Manage sun bloom post-processing effect.\n\n  if (defined(scene.sun) && scene.sunBloom !== scene._sunBloom) {\n    if (scene.sunBloom && !useWebVR) {\n      scene._sunPostProcess = new SunPostProcess();\n    } else if (defined(scene._sunPostProcess)) {\n      scene._sunPostProcess = scene._sunPostProcess.destroy();\n    }\n\n    scene._sunBloom = scene.sunBloom;\n  } else if (!defined(scene.sun) && defined(scene._sunPostProcess)) {\n    scene._sunPostProcess = scene._sunPostProcess.destroy();\n    scene._sunBloom = false;\n  } // Clear the pass state framebuffer.\n\n\n  var clear = scene._clearColorCommand;\n  Color.clone(clearColor, clear.color);\n  clear.execute(context, passState); // Update globe depth rendering based on the current context and clear the globe depth framebuffer.\n  // Globe depth is copied for the pick pass to support picking batched geometries in GroundPrimitives.\n\n  var useGlobeDepthFramebuffer = environmentState.useGlobeDepthFramebuffer = defined(view.globeDepth);\n\n  if (useGlobeDepthFramebuffer) {\n    view.globeDepth.update(context, passState, view.viewport, scene._hdr, environmentState.clearGlobeDepth);\n    view.globeDepth.clear(context, passState, clearColor);\n  } // If supported, configure OIT to use the globe depth framebuffer and clear the OIT framebuffer.\n\n\n  var oit = view.oit;\n  var useOIT = environmentState.useOIT = !picking && defined(oit) && oit.isSupported();\n\n  if (useOIT) {\n    oit.update(context, passState, view.globeDepth.framebuffer, scene._hdr);\n    oit.clear(context, passState, clearColor);\n    environmentState.useOIT = oit.isSupported();\n  }\n\n  var postProcess = scene.postProcessStages;\n  var usePostProcess = environmentState.usePostProcess = !picking && (scene._hdr || postProcess.length > 0 || postProcess.ambientOcclusion.enabled || postProcess.fxaa.enabled || postProcess.bloom.enabled);\n  environmentState.usePostProcessSelected = false;\n\n  if (usePostProcess) {\n    view.sceneFramebuffer.update(context, view.viewport, scene._hdr);\n    view.sceneFramebuffer.clear(context, passState, clearColor);\n    postProcess.update(context, frameState.useLogDepth, scene._hdr);\n    postProcess.clear(context);\n    usePostProcess = environmentState.usePostProcess = postProcess.ready;\n    environmentState.usePostProcessSelected = usePostProcess && postProcess.hasSelected;\n  }\n\n  if (environmentState.isSunVisible && scene.sunBloom && !useWebVR) {\n    passState.framebuffer = scene._sunPostProcess.update(passState);\n\n    scene._sunPostProcess.clear(context, passState, clearColor);\n  } else if (useGlobeDepthFramebuffer) {\n    passState.framebuffer = view.globeDepth.framebuffer;\n  } else if (usePostProcess) {\n    passState.framebuffer = view.sceneFramebuffer.getFramebuffer();\n  }\n\n  if (defined(passState.framebuffer)) {\n    clear.execute(context, passState);\n  }\n\n  var useInvertClassification = environmentState.useInvertClassification = !picking && defined(passState.framebuffer) && scene.invertClassification;\n\n  if (useInvertClassification) {\n    var depthFramebuffer;\n\n    if (scene.frameState.invertClassificationColor.alpha === 1.0) {\n      if (environmentState.useGlobeDepthFramebuffer) {\n        depthFramebuffer = view.globeDepth.framebuffer;\n      }\n    }\n\n    if (defined(depthFramebuffer) || context.depthTexture) {\n      scene._invertClassification.previousFramebuffer = depthFramebuffer;\n\n      scene._invertClassification.update(context);\n\n      scene._invertClassification.clear(context, passState);\n\n      if (scene.frameState.invertClassificationColor.alpha < 1.0 && useOIT) {\n        var command = scene._invertClassification.unclassifiedCommand;\n        var derivedCommands = command.derivedCommands;\n        derivedCommands.oit = oit.createDerivedCommands(command, context, derivedCommands.oit);\n      }\n    } else {\n      environmentState.useInvertClassification = false;\n    }\n  }\n\n  if (scene._globeTranslucencyState.translucent) {\n    view.globeTranslucencyFramebuffer.updateAndClear(scene._hdr, view.viewport, context, passState);\n  }\n}\n/**\n * @private\n */\n\n\nScene.prototype.resolveFramebuffers = function (passState) {\n  var context = this._context;\n  var frameState = this._frameState;\n  var environmentState = this._environmentState;\n  var view = this._view;\n  var globeDepth = view.globeDepth;\n  var useOIT = environmentState.useOIT;\n  var useGlobeDepthFramebuffer = environmentState.useGlobeDepthFramebuffer;\n  var usePostProcess = environmentState.usePostProcess;\n  var defaultFramebuffer = environmentState.originalFramebuffer;\n  var globeFramebuffer = useGlobeDepthFramebuffer ? globeDepth.framebuffer : undefined;\n  var sceneFramebuffer = view.sceneFramebuffer.getFramebuffer();\n  var idFramebuffer = view.sceneFramebuffer.getIdFramebuffer();\n\n  if (environmentState.separatePrimitiveFramebuffer) {\n    // Merge primitive framebuffer into globe framebuffer\n    globeDepth.executeMergeColor(context, passState);\n  }\n\n  if (useOIT) {\n    passState.framebuffer = usePostProcess ? sceneFramebuffer : defaultFramebuffer;\n    view.oit.execute(context, passState);\n  }\n\n  if (usePostProcess) {\n    var inputFramebuffer = sceneFramebuffer;\n\n    if (useGlobeDepthFramebuffer && !useOIT) {\n      inputFramebuffer = globeFramebuffer;\n    }\n\n    var postProcess = this.postProcessStages;\n    var colorTexture = inputFramebuffer.getColorTexture(0);\n    var idTexture = idFramebuffer.getColorTexture(0);\n    var depthTexture = defaultValue(globeFramebuffer, sceneFramebuffer).depthStencilTexture;\n    postProcess.execute(context, colorTexture, depthTexture, idTexture);\n    postProcess.copy(context, defaultFramebuffer);\n  }\n\n  if (!useOIT && !usePostProcess && useGlobeDepthFramebuffer) {\n    passState.framebuffer = defaultFramebuffer;\n    globeDepth.executeCopyColor(context, passState);\n  }\n\n  var useLogDepth = frameState.useLogDepth;\n\n  if (this.debugShowGlobeDepth && useGlobeDepthFramebuffer) {\n    var gd = getDebugGlobeDepth(this, this.debugShowDepthFrustum - 1);\n    gd.executeDebugGlobeDepth(context, passState, useLogDepth);\n  }\n\n  if (this.debugShowPickDepth && useGlobeDepthFramebuffer) {\n    var pd = this._picking.getPickDepth(this, this.debugShowDepthFrustum - 1);\n\n    pd.executeDebugPickDepth(context, passState, useLogDepth);\n  }\n};\n\nfunction callAfterRenderFunctions(scene) {\n  // Functions are queued up during primitive update and executed here in case\n  // the function modifies scene state that should remain constant over the frame.\n  var functions = scene._frameState.afterRender;\n\n  for (var i = 0, length = functions.length; i < length; ++i) {\n    functions[i]();\n    scene.requestRender();\n  }\n\n  functions.length = 0;\n}\n\nfunction getGlobeHeight(scene) {\n  var globe = scene._globe;\n  var camera = scene.camera;\n  var cartographic = camera.positionCartographic;\n\n  if (defined(globe) && globe.show && defined(cartographic)) {\n    return globe.getHeight(cartographic);\n  }\n\n  return undefined;\n}\n\nfunction isCameraUnderground(scene) {\n  var camera = scene.camera;\n  var mode = scene._mode;\n  var globe = scene.globe;\n  var cameraController = scene._screenSpaceCameraController;\n  var cartographic = camera.positionCartographic;\n\n  if (!defined(cartographic)) {\n    return false;\n  }\n\n  if (!cameraController.onMap() && cartographic.height < 0.0) {\n    // The camera can go off the map while in Columbus View.\n    // Make a best guess as to whether it's underground by checking if its height is less than zero.\n    return true;\n  }\n\n  if (!defined(globe) || !globe.show || mode === SceneMode.SCENE2D || mode === SceneMode.MORPHING) {\n    return false;\n  }\n\n  var globeHeight = scene._globeHeight;\n  return defined(globeHeight) && cartographic.height < globeHeight;\n}\n/**\n * @private\n */\n\n\nScene.prototype.initializeFrame = function () {\n  // Destroy released shaders and textures once every 120 frames to avoid thrashing the cache\n  if (this._shaderFrameCount++ === 120) {\n    this._shaderFrameCount = 0;\n\n    this._context.shaderCache.destroyReleasedShaderPrograms();\n\n    this._context.textureCache.destroyReleasedTextures();\n  }\n\n  this._tweens.update();\n\n  this._globeHeight = getGlobeHeight(this);\n  this._cameraUnderground = isCameraUnderground(this);\n\n  this._globeTranslucencyState.update(this);\n\n  this._screenSpaceCameraController.update();\n\n  if (defined(this._deviceOrientationCameraController)) {\n    this._deviceOrientationCameraController.update();\n  }\n\n  this.camera.update(this._mode);\n\n  this.camera._updateCameraChanged();\n};\n\nfunction updateDebugShowFramesPerSecond(scene, renderedThisFrame) {\n  if (scene.debugShowFramesPerSecond) {\n    if (!defined(scene._performanceDisplay)) {\n      var performanceContainer = document.createElement(\"div\");\n      performanceContainer.className = \"cesium-performanceDisplay-defaultContainer\";\n      var container = scene._canvas.parentNode;\n      container.appendChild(performanceContainer);\n      var performanceDisplay = new PerformanceDisplay({\n        container: performanceContainer\n      });\n      scene._performanceDisplay = performanceDisplay;\n      scene._performanceContainer = performanceContainer;\n    }\n\n    scene._performanceDisplay.throttled = scene.requestRenderMode;\n\n    scene._performanceDisplay.update(renderedThisFrame);\n  } else if (defined(scene._performanceDisplay)) {\n    scene._performanceDisplay = scene._performanceDisplay && scene._performanceDisplay.destroy();\n\n    scene._performanceContainer.parentNode.removeChild(scene._performanceContainer);\n  }\n}\n\nfunction prePassesUpdate(scene) {\n  scene._jobScheduler.resetBudgets();\n\n  var frameState = scene._frameState;\n  var primitives = scene.primitives;\n  primitives.prePassesUpdate(frameState);\n\n  if (defined(scene.globe)) {\n    scene.globe.update(frameState);\n  }\n\n  scene._picking.update();\n\n  frameState.creditDisplay.update();\n}\n\nfunction postPassesUpdate(scene) {\n  var frameState = scene._frameState;\n  var primitives = scene.primitives;\n  primitives.postPassesUpdate(frameState);\n  RequestScheduler.update();\n}\n\nvar scratchBackgroundColor = new Color();\n\nfunction render(scene) {\n  var frameState = scene._frameState;\n  var context = scene.context;\n  var us = context.uniformState;\n  var view = scene._defaultView;\n  scene._view = view;\n  scene.updateFrameState();\n  frameState.passes.render = true;\n  frameState.passes.postProcess = scene.postProcessStages.hasSelected;\n  frameState.tilesetPassState = renderTilesetPassState;\n  var backgroundColor = defaultValue(scene.backgroundColor, Color.BLACK);\n\n  if (scene._hdr) {\n    backgroundColor = Color.clone(backgroundColor, scratchBackgroundColor);\n    backgroundColor.red = Math.pow(backgroundColor.red, scene.gamma);\n    backgroundColor.green = Math.pow(backgroundColor.green, scene.gamma);\n    backgroundColor.blue = Math.pow(backgroundColor.blue, scene.gamma);\n  }\n\n  frameState.backgroundColor = backgroundColor;\n  scene.fog.update(frameState);\n  us.update(frameState);\n  var shadowMap = scene.shadowMap;\n\n  if (defined(shadowMap) && shadowMap.enabled) {\n    if (!defined(scene.light) || scene.light instanceof SunLight) {\n      // Negate the sun direction so that it is from the Sun, not to the Sun\n      Cartesian3.negate(us.sunDirectionWC, scene._shadowMapCamera.direction);\n    } else {\n      Cartesian3.clone(scene.light.direction, scene._shadowMapCamera.direction);\n    }\n\n    frameState.shadowMaps.push(shadowMap);\n  }\n\n  scene._computeCommandList.length = 0;\n  scene._overlayCommandList.length = 0;\n  var viewport = view.viewport;\n  viewport.x = 0;\n  viewport.y = 0;\n  viewport.width = context.drawingBufferWidth;\n  viewport.height = context.drawingBufferHeight;\n  var passState = view.passState;\n  passState.framebuffer = undefined;\n  passState.blendingEnabled = undefined;\n  passState.scissorTest = undefined;\n  passState.viewport = BoundingRectangle.clone(viewport, passState.viewport);\n\n  if (defined(scene.globe)) {\n    scene.globe.beginFrame(frameState);\n  }\n\n  scene.updateEnvironment();\n  scene.updateAndExecuteCommands(passState, backgroundColor);\n  scene.resolveFramebuffers(passState);\n  passState.framebuffer = undefined;\n  executeOverlayCommands(scene, passState);\n\n  if (defined(scene.globe)) {\n    scene.globe.endFrame(frameState);\n\n    if (!scene.globe.tilesLoaded) {\n      scene._renderRequested = true;\n    }\n  }\n\n  context.endFrame();\n}\n\nfunction tryAndCatchError(scene, functionToExecute) {\n  try {\n    functionToExecute(scene);\n  } catch (error) {\n    scene._renderError.raiseEvent(scene, error);\n\n    if (scene.rethrowRenderErrors) {\n      throw error;\n    }\n  }\n}\n\nfunction updateMostDetailedRayPicks(scene) {\n  return scene._picking.updateMostDetailedRayPicks(scene);\n}\n/**\n * Update and render the scene. It is usually not necessary to call this function\n * directly because {@link CesiumWidget} or {@link Viewer} do it automatically.\n * @param {JulianDate} [time] The simulation time at which to render.\n */\n\n\nScene.prototype.render = function (time) {\n  /**\n   *\n   * Pre passes update. Execute any pass invariant code that should run before the passes here.\n   *\n   */\n  this._preUpdate.raiseEvent(this, time);\n\n  var frameState = this._frameState;\n  frameState.newFrame = false;\n\n  if (!defined(time)) {\n    time = JulianDate.now();\n  } // Determine if shouldRender\n\n\n  var cameraChanged = this._view.checkForCameraUpdates(this);\n\n  var shouldRender = !this.requestRenderMode || this._renderRequested || cameraChanged || this._logDepthBufferDirty || this._hdrDirty || this.mode === SceneMode.MORPHING;\n\n  if (!shouldRender && defined(this.maximumRenderTimeChange) && defined(this._lastRenderTime)) {\n    var difference = Math.abs(JulianDate.secondsDifference(this._lastRenderTime, time));\n    shouldRender = shouldRender || difference > this.maximumRenderTimeChange;\n  }\n\n  if (shouldRender) {\n    this._lastRenderTime = JulianDate.clone(time, this._lastRenderTime);\n    this._renderRequested = false;\n    this._logDepthBufferDirty = false;\n    this._hdrDirty = false;\n    var frameNumber = CesiumMath.incrementWrap(frameState.frameNumber, 15000000.0, 1.0);\n    updateFrameNumber(this, frameNumber, time);\n    frameState.newFrame = true;\n  }\n\n  tryAndCatchError(this, prePassesUpdate);\n  /**\n   *\n   * Passes update. Add any passes here\n   *\n   */\n\n  if (this.primitives.show) {\n    tryAndCatchError(this, updateMostDetailedRayPicks);\n    tryAndCatchError(this, updatePreloadPass);\n    tryAndCatchError(this, updatePreloadFlightPass);\n\n    if (!shouldRender) {\n      tryAndCatchError(this, updateRequestRenderModeDeferCheckPass);\n    }\n  }\n\n  this._postUpdate.raiseEvent(this, time);\n\n  if (shouldRender) {\n    this._preRender.raiseEvent(this, time);\n\n    frameState.creditDisplay.beginFrame();\n    tryAndCatchError(this, render);\n  }\n  /**\n   *\n   * Post passes update. Execute any pass invariant code that should run after the passes here.\n   *\n   */\n\n\n  updateDebugShowFramesPerSecond(this, shouldRender);\n  tryAndCatchError(this, postPassesUpdate); // Often used to trigger events (so don't want in trycatch) that the user might be subscribed to. Things like the tile load events, ready promises, etc.\n  // We don't want those events to resolve during the render loop because the events might add new primitives\n\n  callAfterRenderFunctions(this);\n\n  if (shouldRender) {\n    this._postRender.raiseEvent(this, time);\n\n    frameState.creditDisplay.endFrame();\n  }\n};\n/**\n * Update and render the scene. Always forces a new render frame regardless of whether a render was\n * previously requested.\n * @param {JulianDate} [time] The simulation time at which to render.\n *\n * @private\n */\n\n\nScene.prototype.forceRender = function (time) {\n  this._renderRequested = true;\n  this.render(time);\n};\n/**\n * Requests a new rendered frame when {@link Scene#requestRenderMode} is set to <code>true</code>.\n * The render rate will not exceed the {@link CesiumWidget#targetFrameRate}.\n *\n * @see Scene#requestRenderMode\n */\n\n\nScene.prototype.requestRender = function () {\n  this._renderRequested = true;\n};\n/**\n * @private\n */\n\n\nScene.prototype.clampLineWidth = function (width) {\n  return Math.max(ContextLimits.minimumAliasedLineWidth, Math.min(width, ContextLimits.maximumAliasedLineWidth));\n};\n/**\n * Returns an object with a `primitive` property that contains the first (top) primitive in the scene\n * at a particular window coordinate or undefined if nothing is at the location. Other properties may\n * potentially be set depending on the type of primitive and may be used to further identify the picked object.\n * <p>\n * When a feature of a 3D Tiles tileset is picked, <code>pick</code> returns a {@link Cesium3DTileFeature} object.\n * </p>\n *\n * @example\n * // On mouse over, color the feature yellow.\n * handler.setInputAction(function(movement) {\n *     var feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTileFeature) {\n *         feature.color = Cesium.Color.YELLOW;\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Number} [width=3] Width of the pick rectangle.\n * @param {Number} [height=3] Height of the pick rectangle.\n * @returns {Object} Object containing the picked primitive.\n */\n\n\nScene.prototype.pick = function (windowPosition, width, height) {\n  return this._picking.pick(this, windowPosition, width, height);\n};\n/**\n * Returns the cartesian position reconstructed from the depth buffer and window position.\n * The returned position is in world coordinates. Used internally by camera functions to\n * prevent conversion to projected 2D coordinates and then back.\n * <p>\n * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n * translucent primitives; otherwise, this essentially picks through translucent primitives.\n * </p>\n *\n * @private\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Cartesian3} [result] The object on which to restore the result.\n * @returns {Cartesian3} The cartesian position in world coordinates.\n *\n * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n */\n\n\nScene.prototype.pickPositionWorldCoordinates = function (windowPosition, result) {\n  return this._picking.pickPositionWorldCoordinates(this, windowPosition, result);\n};\n/**\n * Returns the cartesian position reconstructed from the depth buffer and window position.\n * <p>\n * The position reconstructed from the depth buffer in 2D may be slightly different from those\n * reconstructed in 3D and Columbus view. This is caused by the difference in the distribution\n * of depth values of perspective and orthographic projection.\n * </p>\n * <p>\n * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n * translucent primitives; otherwise, this essentially picks through translucent primitives.\n * </p>\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Cartesian3} [result] The object on which to restore the result.\n * @returns {Cartesian3} The cartesian position.\n *\n * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n */\n\n\nScene.prototype.pickPosition = function (windowPosition, result) {\n  return this._picking.pickPosition(this, windowPosition, result);\n};\n/**\n * Returns a list of objects, each containing a `primitive` property, for all primitives at\n * a particular window coordinate position. Other properties may also be set depending on the\n * type of primitive and may be used to further identify the picked object. The primitives in\n * the list are ordered by their visual order in the scene (front to back).\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Number} [limit] If supplied, stop drilling after collecting this many picks.\n * @param {Number} [width=3] Width of the pick rectangle.\n * @param {Number} [height=3] Height of the pick rectangle.\n * @returns {Array.<*>} Array of objects, each containing 1 picked primitives.\n *\n * @exception {DeveloperError} windowPosition is undefined.\n *\n * @example\n * var pickedObjects = scene.drillPick(new Cesium.Cartesian2(100.0, 200.0));\n *\n * @see Scene#pick\n */\n\n\nScene.prototype.drillPick = function (windowPosition, limit, width, height) {\n  return this._picking.drillPick(this, windowPosition, limit, width, height);\n};\n\nfunction updatePreloadPass(scene) {\n  var frameState = scene._frameState;\n  preloadTilesetPassState.camera = frameState.camera;\n  preloadTilesetPassState.cullingVolume = frameState.cullingVolume;\n  var primitives = scene.primitives;\n  primitives.updateForPass(frameState, preloadTilesetPassState);\n}\n\nfunction updatePreloadFlightPass(scene) {\n  var frameState = scene._frameState;\n  var camera = frameState.camera;\n\n  if (!camera.canPreloadFlight()) {\n    return;\n  }\n\n  preloadFlightTilesetPassState.camera = scene.preloadFlightCamera;\n  preloadFlightTilesetPassState.cullingVolume = scene.preloadFlightCullingVolume;\n  var primitives = scene.primitives;\n  primitives.updateForPass(frameState, preloadFlightTilesetPassState);\n}\n\nfunction updateRequestRenderModeDeferCheckPass(scene) {\n  // Check if any ignored requests are ready to go (to wake rendering up again)\n  scene.primitives.updateForPass(scene._frameState, requestRenderModeDeferCheckPassState);\n}\n/**\n * Returns an object containing the first object intersected by the ray and the position of intersection,\n * or <code>undefined</code> if there were no intersections. The intersected object has a <code>primitive</code>\n * property that contains the intersected primitive. Other properties may be set depending on the type of primitive\n * and may be used to further identify the picked object. The ray must be given in world coordinates.\n * <p>\n * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n * primitives regardless of their visibility.\n * </p>\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Object} An object containing the object and position of the first intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\n\n\nScene.prototype.pickFromRay = function (ray, objectsToExclude, width) {\n  return this._picking.pickFromRay(this, ray, objectsToExclude, width);\n};\n/**\n * Returns a list of objects, each containing the object intersected by the ray and the position of intersection.\n * The intersected object has a <code>primitive</code> property that contains the intersected primitive. Other\n * properties may also be set depending on the type of primitive and may be used to further identify the picked object.\n * The primitives in the list are ordered by first intersection to last intersection. The ray must be given in\n * world coordinates.\n * <p>\n * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n * primitives regardless of their visibility.\n * </p>\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Object[]} List of objects containing the object and position of each intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\n\n\nScene.prototype.drillPickFromRay = function (ray, limit, objectsToExclude, width) {\n  return this._picking.drillPickFromRay(this, ray, limit, objectsToExclude, width);\n};\n/**\n * Initiates an asynchronous {@link Scene#pickFromRay} request using the maximum level of detail for 3D Tilesets\n * regardless of visibility.\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Object>} A promise that resolves to an object containing the object and position of the first intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\n\n\nScene.prototype.pickFromRayMostDetailed = function (ray, objectsToExclude, width) {\n  return this._picking.pickFromRayMostDetailed(this, ray, objectsToExclude, width);\n};\n/**\n * Initiates an asynchronous {@link Scene#drillPickFromRay} request using the maximum level of detail for 3D Tilesets\n * regardless of visibility.\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Object[]>} A promise that resolves to a list of objects containing the object and position of each intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\n\n\nScene.prototype.drillPickFromRayMostDetailed = function (ray, limit, objectsToExclude, width) {\n  return this._picking.drillPickFromRayMostDetailed(this, ray, limit, objectsToExclude, width);\n};\n/**\n * Returns the height of scene geometry at the given cartographic position or <code>undefined</code> if there was no\n * scene geometry to sample height from. The height of the input position is ignored. May be used to clamp objects to\n * the globe, 3D Tiles, or primitives in the scene.\n * <p>\n * This function only samples height from globe tiles and 3D Tiles that are rendered in the current view. Samples height\n * from all other primitives regardless of their visibility.\n * </p>\n *\n * @param {Cartographic} position The cartographic position to sample height from.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Number} The height. This may be <code>undefined</code> if there was no scene geometry to sample height from.\n *\n * @example\n * var position = new Cesium.Cartographic(-1.31968, 0.698874);\n * var height = viewer.scene.sampleHeight(position);\n * console.log(height);\n *\n * @see Scene#clampToHeight\n * @see Scene#clampToHeightMostDetailed\n * @see Scene#sampleHeightMostDetailed\n *\n * @exception {DeveloperError} sampleHeight is only supported in 3D mode.\n * @exception {DeveloperError} sampleHeight requires depth texture support. Check sampleHeightSupported.\n */\n\n\nScene.prototype.sampleHeight = function (position, objectsToExclude, width) {\n  return this._picking.sampleHeight(this, position, objectsToExclude, width);\n};\n/**\n * Clamps the given cartesian position to the scene geometry along the geodetic surface normal. Returns the\n * clamped position or <code>undefined</code> if there was no scene geometry to clamp to. May be used to clamp\n * objects to the globe, 3D Tiles, or primitives in the scene.\n * <p>\n * This function only clamps to globe tiles and 3D Tiles that are rendered in the current view. Clamps to\n * all other primitives regardless of their visibility.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian position.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @param {Cartesian3} [result] An optional object to return the clamped position.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided. This may be <code>undefined</code> if there was no scene geometry to clamp to.\n *\n * @example\n * // Clamp an entity to the underlying scene geometry\n * var position = entity.position.getValue(Cesium.JulianDate.now());\n * entity.position = viewer.scene.clampToHeight(position);\n *\n * @see Scene#sampleHeight\n * @see Scene#sampleHeightMostDetailed\n * @see Scene#clampToHeightMostDetailed\n *\n * @exception {DeveloperError} clampToHeight is only supported in 3D mode.\n * @exception {DeveloperError} clampToHeight requires depth texture support. Check clampToHeightSupported.\n */\n\n\nScene.prototype.clampToHeight = function (cartesian, objectsToExclude, width, result) {\n  return this._picking.clampToHeight(this, cartesian, objectsToExclude, width, result);\n};\n/**\n * Initiates an asynchronous {@link Scene#sampleHeight} query for an array of {@link Cartographic} positions\n * using the maximum level of detail for 3D Tilesets in the scene. The height of the input positions is ignored.\n * Returns a promise that is resolved when the query completes. Each point height is modified in place.\n * If a height cannot be determined because no geometry can be sampled at that location, or another error occurs,\n * the height is set to undefined.\n *\n * @param {Cartographic[]} positions The cartographic positions to update with sampled heights.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Cartographic[]>} A promise that resolves to the provided list of positions when the query has completed.\n *\n * @example\n * var positions = [\n *     new Cesium.Cartographic(-1.31968, 0.69887),\n *     new Cesium.Cartographic(-1.10489, 0.83923)\n * ];\n * var promise = viewer.scene.sampleHeightMostDetailed(positions);\n * promise.then(function(updatedPosition) {\n *     // positions[0].height and positions[1].height have been updated.\n *     // updatedPositions is just a reference to positions.\n * }\n *\n * @see Scene#sampleHeight\n *\n * @exception {DeveloperError} sampleHeightMostDetailed is only supported in 3D mode.\n * @exception {DeveloperError} sampleHeightMostDetailed requires depth texture support. Check sampleHeightSupported.\n */\n\n\nScene.prototype.sampleHeightMostDetailed = function (positions, objectsToExclude, width) {\n  return this._picking.sampleHeightMostDetailed(this, positions, objectsToExclude, width);\n};\n/**\n * Initiates an asynchronous {@link Scene#clampToHeight} query for an array of {@link Cartesian3} positions\n * using the maximum level of detail for 3D Tilesets in the scene. Returns a promise that is resolved when\n * the query completes. Each position is modified in place. If a position cannot be clamped because no geometry\n * can be sampled at that location, or another error occurs, the element in the array is set to undefined.\n *\n * @param {Cartesian3[]} cartesians The cartesian positions to update with clamped positions.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Cartesian3[]>} A promise that resolves to the provided list of positions when the query has completed.\n *\n * @example\n * var cartesians = [\n *     entities[0].position.getValue(Cesium.JulianDate.now()),\n *     entities[1].position.getValue(Cesium.JulianDate.now())\n * ];\n * var promise = viewer.scene.clampToHeightMostDetailed(cartesians);\n * promise.then(function(updatedCartesians) {\n *     entities[0].position = updatedCartesians[0];\n *     entities[1].position = updatedCartesians[1];\n * }\n *\n * @see Scene#clampToHeight\n *\n * @exception {DeveloperError} clampToHeightMostDetailed is only supported in 3D mode.\n * @exception {DeveloperError} clampToHeightMostDetailed requires depth texture support. Check clampToHeightSupported.\n */\n\n\nScene.prototype.clampToHeightMostDetailed = function (cartesians, objectsToExclude, width) {\n  return this._picking.clampToHeightMostDetailed(this, cartesians, objectsToExclude, width);\n};\n/**\n * Transforms a position in cartesian coordinates to canvas coordinates.  This is commonly used to place an\n * HTML element at the same screen position as an object in the scene.\n *\n * @param {Cartesian3} position The position in cartesian coordinates.\n * @param {Cartesian2} [result] An optional object to return the input position transformed to canvas coordinates.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.  This may be <code>undefined</code> if the input position is near the center of the ellipsoid.\n *\n * @example\n * // Output the canvas position of longitude/latitude (0, 0) every time the mouse moves.\n * var scene = widget.scene;\n * var ellipsoid = scene.globe.ellipsoid;\n * var position = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * var handler = new Cesium.ScreenSpaceEventHandler(scene.canvas);\n * handler.setInputAction(function(movement) {\n *     console.log(scene.cartesianToCanvasCoordinates(position));\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\n\n\nScene.prototype.cartesianToCanvasCoordinates = function (position, result) {\n  return SceneTransforms.wgs84ToWindowCoordinates(this, position, result);\n};\n/**\n * Instantly completes an active transition.\n */\n\n\nScene.prototype.completeMorph = function () {\n  this._transitioner.completeMorph();\n};\n/**\n * Asynchronously transitions the scene to 2D.\n * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\n\n\nScene.prototype.morphTo2D = function (duration) {\n  var ellipsoid;\n  var globe = this.globe;\n\n  if (defined(globe)) {\n    ellipsoid = globe.ellipsoid;\n  } else {\n    ellipsoid = this.mapProjection.ellipsoid;\n  }\n\n  duration = defaultValue(duration, 2.0);\n\n  this._transitioner.morphTo2D(duration, ellipsoid);\n};\n/**\n * Asynchronously transitions the scene to Columbus View.\n * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\n\n\nScene.prototype.morphToColumbusView = function (duration) {\n  var ellipsoid;\n  var globe = this.globe;\n\n  if (defined(globe)) {\n    ellipsoid = globe.ellipsoid;\n  } else {\n    ellipsoid = this.mapProjection.ellipsoid;\n  }\n\n  duration = defaultValue(duration, 2.0);\n\n  this._transitioner.morphToColumbusView(duration, ellipsoid);\n};\n/**\n * Asynchronously transitions the scene to 3D.\n * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\n\n\nScene.prototype.morphTo3D = function (duration) {\n  var ellipsoid;\n  var globe = this.globe;\n\n  if (defined(globe)) {\n    ellipsoid = globe.ellipsoid;\n  } else {\n    ellipsoid = this.mapProjection.ellipsoid;\n  }\n\n  duration = defaultValue(duration, 2.0);\n\n  this._transitioner.morphTo3D(duration, ellipsoid);\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Scene#destroy\n */\n\n\nScene.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * scene = scene && scene.destroy();\n *\n * @see Scene#isDestroyed\n */\n\n\nScene.prototype.destroy = function () {\n  this._tweens.removeAll();\n\n  this._computeEngine = this._computeEngine && this._computeEngine.destroy();\n  this._screenSpaceCameraController = this._screenSpaceCameraController && this._screenSpaceCameraController.destroy();\n  this._deviceOrientationCameraController = this._deviceOrientationCameraController && !this._deviceOrientationCameraController.isDestroyed() && this._deviceOrientationCameraController.destroy();\n  this._primitives = this._primitives && this._primitives.destroy();\n  this._groundPrimitives = this._groundPrimitives && this._groundPrimitives.destroy();\n  this._globe = this._globe && this._globe.destroy();\n  this.skyBox = this.skyBox && this.skyBox.destroy();\n  this.skyAtmosphere = this.skyAtmosphere && this.skyAtmosphere.destroy();\n  this._debugSphere = this._debugSphere && this._debugSphere.destroy();\n  this.sun = this.sun && this.sun.destroy();\n  this._sunPostProcess = this._sunPostProcess && this._sunPostProcess.destroy();\n  this._depthPlane = this._depthPlane && this._depthPlane.destroy();\n  this._transitioner = this._transitioner && this._transitioner.destroy();\n  this._debugFrustumPlanes = this._debugFrustumPlanes && this._debugFrustumPlanes.destroy();\n  this._brdfLutGenerator = this._brdfLutGenerator && this._brdfLutGenerator.destroy();\n  this._picking = this._picking && this._picking.destroy();\n  this._defaultView = this._defaultView && this._defaultView.destroy();\n  this._view = undefined;\n\n  if (this._removeCreditContainer) {\n    this._canvas.parentNode.removeChild(this._creditContainer);\n  }\n\n  this.postProcessStages = this.postProcessStages && this.postProcessStages.destroy();\n  this._context = this._context && this._context.destroy();\n  this._frameState.creditDisplay = this._frameState.creditDisplay && this._frameState.creditDisplay.destroy();\n\n  if (defined(this._performanceDisplay)) {\n    this._performanceDisplay = this._performanceDisplay && this._performanceDisplay.destroy();\n\n    this._performanceContainer.parentNode.removeChild(this._performanceContainer);\n  }\n\n  this._removeRequestListenerCallback();\n\n  this._removeTaskProcessorListenerCallback();\n\n  for (var i = 0; i < this._removeGlobeCallbacks.length; ++i) {\n    this._removeGlobeCallbacks[i]();\n  }\n\n  this._removeGlobeCallbacks.length = 0;\n  return destroyObject(this);\n};\n\nexport default Scene;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Scene/Scene.js"],"names":["BoundingRectangle","BoundingSphere","BoxGeometry","Cartesian3","Cartographic","clone","Color","ColorGeometryInstanceAttribute","createGuid","CullingVolume","defaultValue","defined","destroyObject","DeveloperError","EllipsoidGeometry","Event","GeographicProjection","GeometryInstance","GeometryPipeline","Intersect","JulianDate","CesiumMath","Matrix4","mergeSort","Occluder","OrthographicFrustum","OrthographicOffCenterFrustum","PerspectiveFrustum","PerspectiveOffCenterFrustum","RequestScheduler","TaskProcessor","Transforms","ClearCommand","ComputeEngine","Context","ContextLimits","Pass","RenderState","BrdfLutGenerator","Camera","Cesium3DTilePass","Cesium3DTilePassState","CreditDisplay","DebugCameraPrimitive","DepthPlane","DerivedCommand","DeviceOrientationCameraController","Fog","FrameState","GlobeDepth","GlobeTranslucencyState","InvertClassification","JobScheduler","MapMode2D","OctahedralProjectedCubeMap","PerformanceDisplay","PerInstanceColorAppearance","Picking","PostProcessStageCollection","Primitive","PrimitiveCollection","SceneMode","SceneTransforms","SceneTransitioner","ScreenSpaceCameraController","ShadowMap","StencilConstants","SunLight","SunPostProcess","TweenCollection","View","DebugInspector","requestRenderAfterFrame","scene","frameState","afterRender","push","requestRender","Scene","options","EMPTY_OBJECT","canvas","creditContainer","creditViewport","contextOptions","webgl","powerPreference","hasCreditContainer","context","document","createElement","style","position","bottom","color","parentNode","appendChild","_id","_jobScheduler","_frameState","scene3DOnly","_removeCreditContainer","_creditContainer","_canvas","_context","_computeEngine","_globe","undefined","_globeTranslucencyState","_primitives","_groundPrimitives","_globeHeight","_cameraUnderground","_logDepthBuffer","fragmentDepth","_logDepthBufferDirty","_tweens","_shaderFrameCount","_sunPostProcess","_computeCommandList","_overlayCommandList","_useOIT","orderIndependentTranslucency","_executeOITFunction","_depthPlane","_clearColorCommand","stencil","owner","_depthClearCommand","depth","_stencilClearCommand","_classificationStencilClearCommand","renderState","fromCache","stencilMask","CLASSIFICATION_MASK","_depthOnlyRenderStateCache","_transitioner","_preUpdate","_postUpdate","_renderError","_preRender","_postRender","_minimumDisableDepthTestDistance","_debugInspector","rethrowRenderErrors","completeMorphOnUserInput","morphStart","morphComplete","skyBox","skyAtmosphere","sun","sunBloom","_sunBloom","moon","backgroundColor","BLACK","_mode","SCENE3D","_mapProjection","mapProjection","morphTime","farToNearRatio","logarithmicDepthFarToNearRatio","nearToFarDistance2D","debugCommandFilter","debugShowCommands","debugShowFrustums","debugShowFramesPerSecond","debugShowGlobeDepth","debugShowDepthFrustum","debugShowFrustumPlanes","_debugShowFrustumPlanes","_debugFrustumPlanes","useDepthPicking","pickTranslucentDepth","cameraEventWaitTime","fog","_shadowMapCamera","shadowMap","lightCamera","enabled","shadows","invertClassification","invertClassificationColor","WHITE","_actualInvertClassificationColor","_invertClassificationColor","_invertClassification","focalLength","eyeSeparation","postProcessStages","_brdfLutGenerator","_terrainExaggeration","terrainExaggeration","_performanceDisplay","_debugVolume","_screenSpaceCameraController","_mapMode2D","mapMode2D","INFINITE_SCROLL","_environmentState","skyBoxCommand","skyAtmosphereCommand","sunDrawCommand","sunComputeCommand","moonCommand","isSunVisible","isMoonVisible","isReadyForAtmosphere","isSkyAtmosphereVisible","clearGlobeDepth","useDepthPlane","renderTranslucentDepthForPick","originalFramebuffer","useGlobeDepthFramebuffer","separatePrimitiveFramebuffer","useOIT","useInvertClassification","usePostProcess","usePostProcessSelected","useWebVR","_useWebVR","_cameraVR","_aspectRatioVR","requestRenderMode","_renderRequested","maximumRenderTimeChange","_lastRenderTime","_frameRateMonitor","_removeRequestListenerCallback","requestCompletedEvent","addEventListener","_removeTaskProcessorListenerCallback","taskCompletedEvent","_removeGlobeCallbacks","viewport","drawingBufferWidth","drawingBufferHeight","camera","frustum","near","far","preloadFlightCamera","preloadFlightCullingVolume","_picking","_defaultView","_view","_hdr","_hdrDirty","highDynamicRange","gamma","sphericalHarmonicCoefficients","specularEnvironmentMaps","_specularEnvironmentMapAtlas","light","updateFrameNumber","now","updateFrameState","initializeFrame","updateGlobeListeners","globe","i","length","removeGlobeCallbacks","imageryLayersUpdatedEvent","terrainProviderChanged","Object","defineProperties","prototype","get","maximumAliasedLineWidth","maximumCubeMapSize","pickPositionSupported","depthTexture","sampleHeightSupported","clampToHeightSupported","invertClassificationSupported","specularEnvironmentMapsSupported","isSupported","set","destroy","primitives","groundPrimitives","view","defaultView","picking","screenSpaceCameraController","jobScheduler","environmentState","tweens","imageryLayers","terrainProvider","preUpdate","postUpdate","renderError","preRender","postRender","lastRenderTime","debugFrustumStatistics","id","mode","value","SCENE2D","morphTo2D","morphTo3D","COLUMBUS_VIEW","morphToColumbusView","frustumCommandsList","numberOfFrustums","creditDisplay","container","visibility","_deviceOrientationCameraController","aspectRatio","isDestroyed","xOffset","imagerySplitPosition","minimumDisableDepthTestDistance","logarithmicDepthBuffer","uniformState","hdr","colorBufferFloat","colorBufferHalfFloat","highDynamicRangeSupported","cameraUnderground","pixelRatio","opaqueFrustumNearOffset","globeHeight","getCompressedTextureFormatSupported","format","s3tc","pvrtc","etc1","updateDerivedCommands","command","shadowsDirty","oit","lightShadowMaps","shadowState","lightShadowsEnabled","derivedCommands","pickId","createPickDerivedCommand","pickOnly","createDepthOnlyDerivedCommand","originalCommand","createHdrCommand","receiveShadows","createReceiveDerivedCommand","pass","TRANSLUCENT","createDerivedCommands","receiveCommand","lastDirtyTime","dirty","useLogDepth","useHdr","hasLogDepthDerivedCommands","logDepth","hasHdrCommands","hasDerivedCommands","needsLogDepthDerivedCommands","needsHdrCommands","needsDerivedCommands","shadowMaps","shadowsEnabled","castShadows","createCastDerivedCommand","createLogDepthCommand","renderTilesetPassState","RENDER","preloadTilesetPassState","PRELOAD","preloadFlightTilesetPassState","PRELOAD_FLIGHT","requestRenderModeDeferCheckPassState","REQUEST_RENDER_MODE_DEFER_CHECK","scratchOccluderBoundingSphere","scratchOccluder","getOccluder","show","translucent","ellipsoid","minimumTerrainHeight","radius","minimumRadius","fromBoundingSphere","positionWC","clearPasses","passes","render","pick","postProcess","offscreen","frameNumber","time","commandList","brdfLutGenerator","environmentMap","_cubeMap","cullingVolume","computeCullingVolume","directionWC","upWC","occluder","globeTranslucencyState","ready","texture","specularEnvironmentMapsMaximumLOD","maximumMipmapLevel","isTranslucencySupported","alpha","maximumScreenSpaceError","tilesetPassState","isVisible","boundingVolume","cull","computeVisibility","OUTSIDE","occlude","isOccluded","transformFrom2D","inverseTransformation","debugShowBoundingVolume","passState","debugFramebuffer","geometry","center","multiplyByPoint","projection","centerCartographic","unproject","cartographicToCartesian","toWireframe","createGeometry","radii","vertexFormat","FLAT_VERTEX_FORMAT","geometryInstances","modelMatrix","fromTranslation","attributes","appearance","flat","asynchronous","halfAxes","fromDimensions","dimensions","fromRotationTranslation","savedCommandList","update","framebuffer","execute","executeCommand","pickCommand","depthOnlyCommand","executeDebugShowFrustumsCommand","executeIdCommand","backToFront","a","b","distanceSquaredTo","frontToBack","EPSILON12","executeTranslucentCommandsBackToFront","executeFunction","commands","unclassifiedCommand","executeTranslucentCommandsFrontToBack","getDebugGlobeDepth","index","globeDepths","debugGlobeDepths","globeDepth","scratchPerspectiveFrustum","scratchPerspectiveOffCenterFrustum","scratchOrthographicFrustum","scratchOrthographicOffCenterFrustum","executeCommands","us","updateCamera","fov","infiniteProjectionMatrix","width","updateFrustum","updatePass","ENVIRONMENT","sceneFramebuffer","getFramebuffer","copy","executeTranslucentCommands","numFrustums","globeTranslucent","globeTranslucencyFramebuffer","clearDepth","clearStencil","clearClassificationStencil","depthPlane","height2D","z","j","frustumCommands","Math","max","fb","clear","stencilBuffer","GLOBE","indices","executeGlobeCommands","executeCopyDepth","TERRAIN_CLASSIFICATION","executeGlobeClassificationCommands","primitiveFramebuffer","CESIUM_3D_TILE","executeUpdateDepth","CESIUM_3D_TILE_CLASSIFICATION","opaqueClassificationFramebuffer","_fbo","CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW","executeClassified","executeUnclassified","OPAQUE","depthStencilTexture","pickDepth","getPickDepth","getIdFramebuffer","executeComputeCommands","COMPUTE","executeOverlayCommands","OVERLAY","insertShadowCastCommands","shadowVolume","shadowMapCullingVolume","isPointLight","numberOfPasses","k","wasVisible","cascadeVolume","executeShadowMapCastCommands","shadowMapLength","outOfView","sceneCommands","numberOfCommands","castCommands","scratchEyeTranslation","updateAndExecuteCommands","executeWebVRCommands","ROTATE","executeCommandsInViewport","updateAndClearFramebuffers","execute2DViewportCommands","updateAndRenderPrimitives","createPotentiallyVisibleSet","x","y","savedCamera","fo","eyeTranslation","multiplyByScalar","right","height","offset","add","subtract","scratch2DViewportCartographic","PI","PI_OVER_TWO","scratch2DViewportMaxCoord","scratch2DViewportSavedPosition","scratch2DViewportTransform","scratch2DViewportCameraTransform","scratch2DViewportEyePoint","scratch2DViewportWindowCoords","scratch2DViewport","originalViewport","maxCartographic","maxCoord","project","transform","_setTransform","IDENTITY","viewportTransformation","computeViewportTransformation","projectionMatrix","eyePoint","fromElements","sign","windowCoordinates","pointToGLWindowCoordinates","floor","viewportX","viewportWidth","abs","left","firstViewport","scratchCullingVolume","updateEnvironment","renderPass","offscreenPass","environmentVisible","setDynamicAtmosphereColor","enableLighting","dynamicAtmosphereLighting","dynamicAtmosphereLightingFromSun","_surface","_tilesToRender","sunCommands","drawCommand","computeCommand","depthTestAgainstTerrain","sunVisibleThroughGlobe","planes","envMaps","envMapAtlas","url","updateDebugFrustumPlanes","updateOnChange","frustumSplits","updateShadowMaps","fromLightSource","clearColor","ambientOcclusion","fxaa","bloom","hasSelected","depthFramebuffer","previousFramebuffer","updateAndClear","resolveFramebuffers","defaultFramebuffer","globeFramebuffer","idFramebuffer","executeMergeColor","inputFramebuffer","colorTexture","getColorTexture","idTexture","executeCopyColor","gd","executeDebugGlobeDepth","debugShowPickDepth","pd","executeDebugPickDepth","callAfterRenderFunctions","functions","getGlobeHeight","cartographic","positionCartographic","getHeight","isCameraUnderground","cameraController","onMap","MORPHING","shaderCache","destroyReleasedShaderPrograms","textureCache","destroyReleasedTextures","_updateCameraChanged","updateDebugShowFramesPerSecond","renderedThisFrame","performanceContainer","className","performanceDisplay","_performanceContainer","throttled","removeChild","prePassesUpdate","resetBudgets","postPassesUpdate","scratchBackgroundColor","red","pow","green","blue","negate","sunDirectionWC","direction","blendingEnabled","scissorTest","beginFrame","endFrame","tilesLoaded","tryAndCatchError","functionToExecute","error","raiseEvent","updateMostDetailedRayPicks","newFrame","cameraChanged","checkForCameraUpdates","shouldRender","difference","secondsDifference","incrementWrap","updatePreloadPass","updatePreloadFlightPass","updateRequestRenderModeDeferCheckPass","forceRender","clampLineWidth","minimumAliasedLineWidth","min","windowPosition","pickPositionWorldCoordinates","result","pickPosition","drillPick","limit","updateForPass","canPreloadFlight","pickFromRay","ray","objectsToExclude","drillPickFromRay","pickFromRayMostDetailed","drillPickFromRayMostDetailed","sampleHeight","clampToHeight","cartesian","sampleHeightMostDetailed","positions","clampToHeightMostDetailed","cartesians","cartesianToCanvasCoordinates","wgs84ToWindowCoordinates","completeMorph","duration","removeAll","_debugSphere"],"mappings":"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AACA;AACA;AACA;AACA;;AACE,OAAK0E,mBAAL,GAA2B,KAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,wBAAL,GAAgC,IAAhC;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkB,IAAIpI,KAAJ,EAAlB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKqI,aAAL,GAAqB,IAAIrI,KAAJ,EAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKsI,MAAL,GAAc1C,SAAd;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAK2C,aAAL,GAAqB3C,SAArB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAK4C,GAAL,GAAW5C,SAAX;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAK6C,QAAL,GAAgB,IAAhB;AACA,OAAKC,SAAL,GAAiB9C,SAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAK+C,IAAL,GAAY/C,SAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKgD,eAAL,GAAuBrJ,KAAK,CAACD,KAAN,CAAYC,KAAK,CAACsJ,KAAlB,CAAvB;AAEA,OAAKC,KAAL,GAAahG,SAAS,CAACiG,OAAvB;AAEA,OAAKC,cAAL,GAAsBpJ,OAAO,CAACoE,OAAO,CAACiF,aAAT,CAAP,GAClBjF,OAAO,CAACiF,aADU,GAElB,IAAIhJ,oBAAJ,EAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKiJ,SAAL,GAAiB,GAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,cAAL,GAAsB,MAAtB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,8BAAL,GAAsC,GAAtC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,MAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,kBAAL,GAA0B1D,SAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAK2D,iBAAL,GAAyB,KAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,iBAAL,GAAyB,KAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,wBAAL,GAAgC,KAAhC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,KAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,qBAAL,GAA6B,CAA7B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,sBAAL,GAA8B,KAA9B;AACA,OAAKC,uBAAL,GAA+B,KAA/B;AACA,OAAKC,mBAAL,GAA2BlE,SAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKmE,eAAL,GAAuB,IAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,oBAAL,GAA4B,KAA5B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,mBAAL,GAA2B,KAA3B;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,GAAL,GAAW,IAAIlI,GAAJ,EAAX;AAEA,OAAKmI,gBAAL,GAAwB,IAAI3I,MAAJ,CAAW,IAAX,CAAxB;AAEA;AACF;AACA;AACA;;AACE,OAAK4I,SAAL,GAAiB,IAAIlH,SAAJ,CAAc;AAC7BuB,IAAAA,OAAO,EAAEA,OADoB;AAE7B4F,IAAAA,WAAW,EAAE,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ACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE2B,EAAAA,SAAS,EAAE;AACTvB,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKpI,UAAZ;AACD;AAHQ,GAla4B;;AAwavC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE4J,EAAAA,UAAU,EAAE;AACVxB,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKnI,WAAZ;AACD;AAHS,GAtb2B;;AA4bvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE4J,EAAAA,WAAW,EAAE;AACXzB,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKlI,YAAZ;AACD;AAHU,GAtc0B;;AA4cvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE4J,EAAAA,SAAS,EAAE;AACT1B,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKjI,UAAZ;AACD;AAHQ,GA1d4B;;AAgevC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE4J,EAAAA,UAAU,EAAE;AACV3B,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKhI,WAAZ;AACD;AAHS,GA7e2B;;AAmfvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE4J,EAAAA,cAAc,EAAE;AACd5B,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAK1C,eAAZ;AACD;AAHa,GA3fuB;;AAigBvC;AACF;AACA;AACA;AACA;AACE5I,EAAAA,OAAO,EAAE;AACPsL,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKtK,QAAZ;AACD;AAHM,GAtgB8B;;AA4gBvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEmM,EAAAA,sBAAsB,EAAE;AACtB7B,IAAAA,GAAG,EAAE,YAAY;AACf,aAAO,KAAKvB,KAAL,C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","sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport BoxGeometry from \"../Core/BoxGeometry.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport clone from \"../Core/clone.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport CullingVolume from \"../Core/CullingVolume.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport EllipsoidGeometry from \"../Core/EllipsoidGeometry.js\";\nimport Event from \"../Core/Event.js\";\nimport GeographicProjection from \"../Core/GeographicProjection.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryPipeline from \"../Core/GeometryPipeline.js\";\nimport Intersect from \"../Core/Intersect.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport mergeSort from \"../Core/mergeSort.js\";\nimport Occluder from \"../Core/Occluder.js\";\nimport OrthographicFrustum from \"../Core/OrthographicFrustum.js\";\nimport OrthographicOffCenterFrustum from \"../Core/OrthographicOffCenterFrustum.js\";\nimport PerspectiveFrustum from \"../Core/PerspectiveFrustum.js\";\nimport PerspectiveOffCenterFrustum from \"../Core/PerspectiveOffCenterFrustum.js\";\nimport RequestScheduler from \"../Core/RequestScheduler.js\";\nimport TaskProcessor from \"../Core/TaskProcessor.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport ComputeEngine from \"../Renderer/ComputeEngine.js\";\nimport Context from \"../Renderer/Context.js\";\nimport ContextLimits from \"../Renderer/ContextLimits.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport BrdfLutGenerator from \"./BrdfLutGenerator.js\";\nimport Camera from \"./Camera.js\";\nimport Cesium3DTilePass from \"./Cesium3DTilePass.js\";\nimport Cesium3DTilePassState from \"./Cesium3DTilePassState.js\";\nimport CreditDisplay from \"./CreditDisplay.js\";\nimport DebugCameraPrimitive from \"./DebugCameraPrimitive.js\";\nimport DepthPlane from \"./DepthPlane.js\";\nimport DerivedCommand from \"./DerivedCommand.js\";\nimport DeviceOrientationCameraController from \"./DeviceOrientationCameraController.js\";\nimport Fog from \"./Fog.js\";\nimport FrameState from \"./FrameState.js\";\nimport GlobeDepth from \"./GlobeDepth.js\";\nimport GlobeTranslucencyState from \"./GlobeTranslucencyState.js\";\nimport InvertClassification from \"./InvertClassification.js\";\nimport JobScheduler from \"./JobScheduler.js\";\nimport MapMode2D from \"./MapMode2D.js\";\nimport OctahedralProjectedCubeMap from \"./OctahedralProjectedCubeMap.js\";\nimport PerformanceDisplay from \"./PerformanceDisplay.js\";\nimport PerInstanceColorAppearance from \"./PerInstanceColorAppearance.js\";\nimport Picking from \"./Picking.js\";\nimport PostProcessStageCollection from \"./PostProcessStageCollection.js\";\nimport Primitive from \"./Primitive.js\";\nimport PrimitiveCollection from \"./PrimitiveCollection.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SceneTransforms from \"./SceneTransforms.js\";\nimport SceneTransitioner from \"./SceneTransitioner.js\";\nimport ScreenSpaceCameraController from \"./ScreenSpaceCameraController.js\";\nimport ShadowMap from \"./ShadowMap.js\";\nimport StencilConstants from \"./StencilConstants.js\";\nimport SunLight from \"./SunLight.js\";\nimport SunPostProcess from \"./SunPostProcess.js\";\nimport TweenCollection from \"./TweenCollection.js\";\nimport View from \"./View.js\";\nimport DebugInspector from \"./DebugInspector.js\";\n\nvar requestRenderAfterFrame = function (scene) {\n  return function () {\n    scene.frameState.afterRender.push(function () {\n      scene.requestRender();\n    });\n  };\n};\n\n/**\n * The container for all 3D graphical objects and state in a Cesium virtual scene.  Generally,\n * a scene is not created directly; instead, it is implicitly created by {@link CesiumWidget}.\n * <p>\n * <em><code>contextOptions</code> parameter details:</em>\n * </p>\n * <p>\n * The default values are:\n * <code>\n * {\n *   webgl : {\n *     alpha : false,\n *     depth : true,\n *     stencil : false,\n *     antialias : true,\n *     powerPreference: 'high-performance',\n *     premultipliedAlpha : true,\n *     preserveDrawingBuffer : false,\n *     failIfMajorPerformanceCaveat : false\n *   },\n *   allowTextureFilterAnisotropic : true\n * }\n * </code>\n * </p>\n * <p>\n * The <code>webgl</code> property corresponds to the {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}\n * object used to create the WebGL context.\n * </p>\n * <p>\n * <code>webgl.alpha</code> defaults to false, which can improve performance compared to the standard WebGL default\n * of true.  If an application needs to composite Cesium above other HTML elements using alpha-blending, set\n * <code>webgl.alpha</code> to true.\n * </p>\n * <p>\n * The other <code>webgl</code> properties match the WebGL defaults for {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}.\n * </p>\n * <p>\n * <code>allowTextureFilterAnisotropic</code> defaults to true, which enables anisotropic texture filtering when the\n * WebGL extension is supported.  Setting this to false will improve performance, but hurt visual quality, especially for horizon views.\n * </p>\n *\n * @alias Scene\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {HTMLCanvasElement} options.canvas The HTML canvas element to create the scene for.\n * @param {Object} [options.contextOptions] Context and WebGL creation properties.  See details above.\n * @param {Element} [options.creditContainer] The HTML element in which the credits will be displayed.\n * @param {Element} [options.creditViewport] The HTML element in which to display the credit popup.  If not specified, the viewport will be a added as a sibling of the canvas.\n * @param {MapProjection} [options.mapProjection=new GeographicProjection()] The map projection to use in 2D and Columbus View modes.\n * @param {Boolean} [options.orderIndependentTranslucency=true] If true and the configuration supports it, use order independent translucency.\n * @param {Boolean} [options.scene3DOnly=false] If true, optimizes memory use and performance for 3D mode but disables the ability to use 2D or Columbus View.\n * @param {Number} [options.terrainExaggeration=1.0] A scalar used to exaggerate the terrain. Note that terrain exaggeration will not modify any other primitive as they are positioned relative to the ellipsoid.\n * @param {Boolean} [options.shadows=false] Determines if shadows are cast by light sources.\n * @param {MapMode2D} [options.mapMode2D=MapMode2D.INFINITE_SCROLL] Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n * @param {Boolean} [options.requestRenderMode=false] If true, rendering a frame will only occur when needed as determined by changes within the scene. Enabling improves performance of the application, but requires using {@link Scene#requestRender} to render a new frame explicitly in this mode. This will be necessary in many cases after making changes to the scene in other parts of the API. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n * @param {Number} [options.maximumRenderTimeChange=0.0] If requestRenderMode is true, this value defines the maximum change in simulation time allowed before a render is requested. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n *\n * @see CesiumWidget\n * @see {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}\n *\n * @exception {DeveloperError} options and options.canvas are required.\n *\n * @example\n * // Create scene without anisotropic texture filtering\n * var scene = new Cesium.Scene({\n *   canvas : canvas,\n *   contextOptions : {\n *     allowTextureFilterAnisotropic : false\n *   }\n * });\n */\nfunction Scene(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var canvas = options.canvas;\n  var creditContainer = options.creditContainer;\n  var creditViewport = options.creditViewport;\n\n  var contextOptions = clone(options.contextOptions);\n  if (!defined(contextOptions)) {\n    contextOptions = {};\n  }\n  if (!defined(contextOptions.webgl)) {\n    contextOptions.webgl = {};\n  }\n  contextOptions.webgl.powerPreference = defaultValue(\n    contextOptions.webgl.powerPreference,\n    \"high-performance\"\n  );\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(canvas)) {\n    throw new DeveloperError(\"options and options.canvas are required.\");\n  }\n  //>>includeEnd('debug');\n  var hasCreditContainer = defined(creditContainer);\n  var context = new Context(canvas, contextOptions);\n  if (!hasCreditContainer) {\n    creditContainer = document.createElement(\"div\");\n    creditContainer.style.position = \"absolute\";\n    creditContainer.style.bottom = \"0\";\n    creditContainer.style[\"text-shadow\"] = \"0 0 2px #000000\";\n    creditContainer.style.color = \"#ffffff\";\n    creditContainer.style[\"font-size\"] = \"10px\";\n    creditContainer.style[\"padding-right\"] = \"5px\";\n    canvas.parentNode.appendChild(creditContainer);\n  }\n  if (!defined(creditViewport)) {\n    creditViewport = canvas.parentNode;\n  }\n\n  this._id = createGuid();\n  this._jobScheduler = new JobScheduler();\n  this._frameState = new FrameState(\n    context,\n    new CreditDisplay(creditContainer, \" • \", creditViewport),\n    this._jobScheduler\n  );\n  this._frameState.scene3DOnly = defaultValue(options.scene3DOnly, false);\n  this._removeCreditContainer = !hasCreditContainer;\n  this._creditContainer = creditContainer;\n\n  this._canvas = canvas;\n  this._context = context;\n  this._computeEngine = new ComputeEngine(context);\n  this._globe = undefined;\n  this._globeTranslucencyState = new GlobeTranslucencyState();\n  this._primitives = new PrimitiveCollection();\n  this._groundPrimitives = new PrimitiveCollection();\n\n  this._globeHeight = undefined;\n  this._cameraUnderground = false;\n\n  this._logDepthBuffer = context.fragmentDepth;\n  this._logDepthBufferDirty = true;\n\n  this._tweens = new TweenCollection();\n\n  this._shaderFrameCount = 0;\n\n  this._sunPostProcess = undefined;\n\n  this._computeCommandList = [];\n  this._overlayCommandList = [];\n\n  this._useOIT = defaultValue(options.orderIndependentTranslucency, true);\n  this._executeOITFunction = undefined;\n\n  this._depthPlane = new DepthPlane();\n\n  this._clearColorCommand = new ClearCommand({\n    color: new Color(),\n    stencil: 0,\n    owner: this,\n  });\n  this._depthClearCommand = new ClearCommand({\n    depth: 1.0,\n    owner: this,\n  });\n  this._stencilClearCommand = new ClearCommand({\n    stencil: 0,\n  });\n  this._classificationStencilClearCommand = new ClearCommand({\n    stencil: 0,\n    renderState: RenderState.fromCache({\n      stencilMask: StencilConstants.CLASSIFICATION_MASK,\n    }),\n  });\n\n  this._depthOnlyRenderStateCache = {};\n\n  this._transitioner = new SceneTransitioner(this);\n\n  this._preUpdate = new Event();\n  this._postUpdate = new Event();\n\n  this._renderError = new Event();\n  this._preRender = new Event();\n  this._postRender = new Event();\n\n  this._minimumDisableDepthTestDistance = 0.0;\n  this._debugInspector = new DebugInspector();\n\n  /**\n   * Exceptions occurring in <code>render</code> are always caught in order to raise the\n   * <code>renderError</code> event.  If this property is true, the error is rethrown\n   * after the event is raised.  If this property is false, the <code>render</code> function\n   * returns normally after raising the event.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.rethrowRenderErrors = false;\n\n  /**\n   * Determines whether or not to instantly complete the\n   * scene transition animation on user input.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.completeMorphOnUserInput = true;\n\n  /**\n   * The event fired at the beginning of a scene transition.\n   * @type {Event}\n   * @default Event()\n   */\n  this.morphStart = new Event();\n\n  /**\n   * The event fired at the completion of a scene transition.\n   * @type {Event}\n   * @default Event()\n   */\n  this.morphComplete = new Event();\n\n  /**\n   * The {@link SkyBox} used to draw the stars.\n   *\n   * @type {SkyBox}\n   * @default undefined\n   *\n   * @see Scene#backgroundColor\n   */\n  this.skyBox = undefined;\n\n  /**\n   * The sky atmosphere drawn around the globe.\n   *\n   * @type {SkyAtmosphere}\n   * @default undefined\n   */\n  this.skyAtmosphere = undefined;\n\n  /**\n   * The {@link Sun}.\n   *\n   * @type {Sun}\n   * @default undefined\n   */\n  this.sun = undefined;\n\n  /**\n   * Uses a bloom filter on the sun when enabled.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.sunBloom = true;\n  this._sunBloom = undefined;\n\n  /**\n   * The {@link Moon}\n   *\n   * @type Moon\n   * @default undefined\n   */\n  this.moon = undefined;\n\n  /**\n   * The background color, which is only visible if there is no sky box, i.e., {@link Scene#skyBox} is undefined.\n   *\n   * @type {Color}\n   * @default {@link Color.BLACK}\n   *\n   * @see Scene#skyBox\n   */\n  this.backgroundColor = Color.clone(Color.BLACK);\n\n  this._mode = SceneMode.SCENE3D;\n\n  this._mapProjection = defined(options.mapProjection)\n    ? options.mapProjection\n    : new GeographicProjection();\n\n  /**\n   * The current morph transition time between 2D/Columbus View and 3D,\n   * with 0.0 being 2D or Columbus View and 1.0 being 3D.\n   *\n   * @type {Number}\n   * @default 1.0\n   */\n  this.morphTime = 1.0;\n\n  /**\n   * The far-to-near ratio of the multi-frustum when using a normal depth buffer.\n   * <p>\n   * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n   * when {@link Scene#logarithmicDepthBuffer} is <code>false</code>. When <code>logarithmicDepthBuffer</code> is\n   * <code>true</code>, use {@link Scene#logarithmicDepthFarToNearRatio}.\n   * </p>\n   *\n   * @type {Number}\n   * @default 1000.0\n   */\n  this.farToNearRatio = 1000.0;\n\n  /**\n   * The far-to-near ratio of the multi-frustum when using a logarithmic depth buffer.\n   * <p>\n   * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n   * when {@link Scene#logarithmicDepthBuffer} is <code>true</code>. When <code>logarithmicDepthBuffer</code> is\n   * <code>false</code>, use {@link Scene#farToNearRatio}.\n   * </p>\n   *\n   * @type {Number}\n   * @default 1e9\n   */\n  this.logarithmicDepthFarToNearRatio = 1e9;\n\n  /**\n   * Determines the uniform depth size in meters of each frustum of the multifrustum in 2D. If a primitive or model close\n   * to the surface shows z-fighting, decreasing this will eliminate the artifact, but decrease performance. On the\n   * other hand, increasing this will increase performance but may cause z-fighting among primitives close to the surface.\n   *\n   * @type {Number}\n   * @default 1.75e6\n   */\n  this.nearToFarDistance2D = 1.75e6;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * A function that determines what commands are executed.  As shown in the examples below,\n   * the function receives the command's <code>owner</code> as an argument, and returns a boolean indicating if the\n   * command should be executed.\n   * </p>\n   * <p>\n   * The default is <code>undefined</code>, indicating that all commands are executed.\n   * </p>\n   *\n   * @type Function\n   *\n   * @default undefined\n   *\n   * @example\n   * // Do not execute any commands.\n   * scene.debugCommandFilter = function(command) {\n   *     return false;\n   * };\n   *\n   * // Execute only the billboard's commands.  That is, only draw the billboard.\n   * var billboards = new Cesium.BillboardCollection();\n   * scene.debugCommandFilter = function(command) {\n   *     return command.owner === billboards;\n   * };\n   */\n  this.debugCommandFilter = undefined;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, commands are randomly shaded.  This is useful\n   * for performance analysis to see what parts of a scene or model are\n   * command-dense and could benefit from batching.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.debugShowCommands = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, commands are shaded based on the frustums they\n   * overlap.  Commands in the closest frustum are tinted red, commands in\n   * the next closest are green, and commands in the farthest frustum are\n   * blue.  If a command overlaps more than one frustum, the color components\n   * are combined, e.g., a command overlapping the first two frustums is tinted\n   * yellow.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.debugShowFrustums = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Displays frames per second and time between frames.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.debugShowFramesPerSecond = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Displays depth information for the indicated frustum.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.debugShowGlobeDepth = false;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * Indicates which frustum will have depth information displayed.\n   * </p>\n   *\n   * @type Number\n   *\n   * @default 1\n   */\n  this.debugShowDepthFrustum = 1;\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When <code>true</code>, draws outlines to show the boundaries of the camera frustums\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   */\n  this.debugShowFrustumPlanes = false;\n  this._debugShowFrustumPlanes = false;\n  this._debugFrustumPlanes = undefined;\n\n  /**\n   * When <code>true</code>, enables picking using the depth buffer.\n   *\n   * @type Boolean\n   * @default true\n   */\n  this.useDepthPicking = true;\n\n  /**\n   * When <code>true</code>, enables picking translucent geometry using the depth buffer. Note that {@link Scene#useDepthPicking} must also be true for enabling this to work.\n   *\n   * <p>\n   * Render must be called between picks.\n   * <br>There is a decrease in performance when enabled. There are extra draw calls to write depth for\n   * translucent geometry.\n   * </p>\n   *\n   * @example\n   * // picking the position of a translucent primitive\n   * viewer.screenSpaceEventHandler.setInputAction(function onLeftClick(movement) {\n   *      var pickedFeature = viewer.scene.pick(movement.position);\n   *      if (!Cesium.defined(pickedFeature)) {\n   *          // nothing picked\n   *          return;\n   *      }\n   *      viewer.scene.render();\n   *      var worldPosition = viewer.scene.pickPosition(movement.position);\n   * }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.pickTranslucentDepth = false;\n\n  /**\n   * The time in milliseconds to wait before checking if the camera has not moved and fire the cameraMoveEnd event.\n   * @type {Number}\n   * @default 500.0\n   * @private\n   */\n  this.cameraEventWaitTime = 500.0;\n\n  /**\n   * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n   * performance improvements by rendering less geometry and dispatching less terrain requests.\n   * @type {Fog}\n   */\n  this.fog = new Fog();\n\n  this._shadowMapCamera = new Camera(this);\n\n  /**\n   * The shadow map for the scene's light source. When enabled, models, primitives, and the globe may cast and receive shadows.\n   * @type {ShadowMap}\n   */\n  this.shadowMap = new ShadowMap({\n    context: context,\n    lightCamera: this._shadowMapCamera,\n    enabled: defaultValue(options.shadows, false),\n  });\n\n  /**\n   * When <code>false</code>, 3D Tiles will render normally. When <code>true</code>, classified 3D Tile geometry will render normally and\n   * unclassified 3D Tile geometry will render with the color multiplied by {@link Scene#invertClassificationColor}.\n   * @type {Boolean}\n   * @default false\n   */\n  this.invertClassification = false;\n\n  /**\n   * The highlight color of unclassified 3D Tile geometry when {@link Scene#invertClassification} is <code>true</code>.\n   * <p>When the color's alpha is less than 1.0, the unclassified portions of the 3D Tiles will not blend correctly with the classified positions of the 3D Tiles.</p>\n   * <p>Also, when the color's alpha is less than 1.0, the WEBGL_depth_texture and EXT_frag_depth WebGL extensions must be supported.</p>\n   * @type {Color}\n   * @default Color.WHITE\n   */\n  this.invertClassificationColor = Color.clone(Color.WHITE);\n\n  this._actualInvertClassificationColor = Color.clone(\n    this._invertClassificationColor\n  );\n  this._invertClassification = new InvertClassification();\n\n  /**\n   * The focal length for use when with cardboard or WebVR.\n   * @type {Number}\n   */\n  this.focalLength = undefined;\n\n  /**\n   * The eye separation distance in meters for use with cardboard or WebVR.\n   * @type {Number}\n   */\n  this.eyeSeparation = undefined;\n\n  /**\n   * Post processing effects applied to the final render.\n   * @type {PostProcessStageCollection}\n   */\n  this.postProcessStages = new PostProcessStageCollection();\n\n  this._brdfLutGenerator = new BrdfLutGenerator();\n\n  this._terrainExaggeration = defaultValue(options.terrainExaggeration, 1.0);\n\n  this._performanceDisplay = undefined;\n  this._debugVolume = undefined;\n\n  this._screenSpaceCameraController = new ScreenSpaceCameraController(this);\n  this._cameraUnderground = false;\n  this._mapMode2D = defaultValue(options.mapMode2D, MapMode2D.INFINITE_SCROLL);\n\n  // Keeps track of the state of a frame. FrameState is the state across\n  // the primitives of the scene. This state is for internally keeping track\n  // of celestial and environment effects that need to be updated/rendered in\n  // a certain order as well as updating/tracking framebuffer usage.\n  this._environmentState = {\n    skyBoxCommand: undefined,\n    skyAtmosphereCommand: undefined,\n    sunDrawCommand: undefined,\n    sunComputeCommand: undefined,\n    moonCommand: undefined,\n\n    isSunVisible: false,\n    isMoonVisible: false,\n    isReadyForAtmosphere: false,\n    isSkyAtmosphereVisible: false,\n\n    clearGlobeDepth: false,\n    useDepthPlane: false,\n    renderTranslucentDepthForPick: false,\n\n    originalFramebuffer: undefined,\n    useGlobeDepthFramebuffer: false,\n    separatePrimitiveFramebuffer: false,\n    useOIT: false,\n    useInvertClassification: false,\n    usePostProcess: false,\n    usePostProcessSelected: false,\n    useWebVR: false,\n  };\n\n  this._useWebVR = false;\n  this._cameraVR = undefined;\n  this._aspectRatioVR = undefined;\n\n  /**\n   * When <code>true</code>, rendering a frame will only occur when needed as determined by changes within the scene.\n   * Enabling improves performance of the application, but requires using {@link Scene#requestRender}\n   * to render a new frame explicitly in this mode. This will be necessary in many cases after making changes\n   * to the scene in other parts of the API.\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#maximumRenderTimeChange\n   * @see Scene#requestRender\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.requestRenderMode = defaultValue(options.requestRenderMode, false);\n  this._renderRequested = true;\n\n  /**\n   * If {@link Scene#requestRenderMode} is <code>true</code>, this value defines the maximum change in\n   * simulation time allowed before a render is requested. Lower values increase the number of frames rendered\n   * and higher values decrease the number of frames rendered. If <code>undefined</code>, changes to\n   * the simulation time will never request a render.\n   * This value impacts the rate of rendering for changes in the scene like lighting, entity property updates,\n   * and animations.\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#requestRenderMode\n   *\n   * @type {Number}\n   * @default 0.0\n   */\n  this.maximumRenderTimeChange = defaultValue(\n    options.maximumRenderTimeChange,\n    0.0\n  );\n  this._lastRenderTime = undefined;\n  this._frameRateMonitor = undefined;\n\n  this._removeRequestListenerCallback = RequestScheduler.requestCompletedEvent.addEventListener(\n    requestRenderAfterFrame(this)\n  );\n  this._removeTaskProcessorListenerCallback = TaskProcessor.taskCompletedEvent.addEventListener(\n    requestRenderAfterFrame(this)\n  );\n  this._removeGlobeCallbacks = [];\n\n  var viewport = new BoundingRectangle(\n    0,\n    0,\n    context.drawingBufferWidth,\n    context.drawingBufferHeight\n  );\n  var camera = new Camera(this);\n\n  if (this._logDepthBuffer) {\n    camera.frustum.near = 0.1;\n    camera.frustum.far = 10000000000.0;\n  }\n\n  /**\n   * The camera view for the scene camera flight destination. Used for preloading flight destination tiles.\n   * @type {Camera}\n   * @private\n   */\n  this.preloadFlightCamera = new Camera(this);\n\n  /**\n   * The culling volume for the scene camera flight destination. Used for preloading flight destination tiles.\n   * @type {CullingVolume}\n   * @private\n   */\n  this.preloadFlightCullingVolume = undefined;\n\n  this._picking = new Picking(this);\n  this._defaultView = new View(this, camera, viewport);\n  this._view = this._defaultView;\n\n  this._hdr = undefined;\n  this._hdrDirty = undefined;\n  this.highDynamicRange = false;\n  this.gamma = 2.2;\n\n  /**\n   * The spherical harmonic coefficients for image-based lighting of PBR models.\n   * @type {Cartesian3[]}\n   */\n  this.sphericalHarmonicCoefficients = undefined;\n\n  /**\n   * The url to the KTX file containing the specular environment map and convoluted mipmaps for image-based lighting of PBR models.\n   * @type {String}\n   */\n  this.specularEnvironmentMaps = undefined;\n  this._specularEnvironmentMapAtlas = undefined;\n\n  /**\n   * The light source for shading. Defaults to a directional light from the Sun.\n   * @type {Light}\n   */\n  this.light = new SunLight();\n\n  // Give frameState, camera, and screen space camera controller initial state before rendering\n  updateFrameNumber(this, 0.0, JulianDate.now());\n  this.updateFrameState();\n  this.initializeFrame();\n}\n\nfunction updateGlobeListeners(scene, globe) {\n  for (var i = 0; i < scene._removeGlobeCallbacks.length; ++i) {\n    scene._removeGlobeCallbacks[i]();\n  }\n  scene._removeGlobeCallbacks.length = 0;\n\n  var removeGlobeCallbacks = [];\n  if (defined(globe)) {\n    removeGlobeCallbacks.push(\n      globe.imageryLayersUpdatedEvent.addEventListener(\n        requestRenderAfterFrame(scene)\n      )\n    );\n    removeGlobeCallbacks.push(\n      globe.terrainProviderChanged.addEventListener(\n        requestRenderAfterFrame(scene)\n      )\n    );\n  }\n  scene._removeGlobeCallbacks = removeGlobeCallbacks;\n}\n\nObject.defineProperties(Scene.prototype, {\n  /**\n   * Gets the canvas element to which this scene is bound.\n   * @memberof Scene.prototype\n   *\n   * @type {HTMLCanvasElement}\n   * @readonly\n   */\n  canvas: {\n    get: function () {\n      return this._canvas;\n    },\n  },\n\n  /**\n   * The drawingBufferHeight of the underlying GL context.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n   */\n  drawingBufferHeight: {\n    get: function () {\n      return this._context.drawingBufferHeight;\n    },\n  },\n\n  /**\n   * The drawingBufferHeight of the underlying GL context.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n   */\n  drawingBufferWidth: {\n    get: function () {\n      return this._context.drawingBufferWidth;\n    },\n  },\n\n  /**\n   * The maximum aliased line width, in pixels, supported by this WebGL implementation.  It will be at least one.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n   */\n  maximumAliasedLineWidth: {\n    get: function () {\n      return ContextLimits.maximumAliasedLineWidth;\n    },\n  },\n\n  /**\n   * The maximum length in pixels of one edge of a cube map, supported by this WebGL implementation.  It will be at least 16.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>GL_MAX_CUBE_MAP_TEXTURE_SIZE</code>.\n   */\n  maximumCubeMapSize: {\n    get: function () {\n      return ContextLimits.maximumCubeMapSize;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#pickPosition} function is supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#pickPosition\n   */\n  pickPositionSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#sampleHeight} and {@link Scene#sampleHeightMostDetailed} functions are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#sampleHeight\n   * @see Scene#sampleHeightMostDetailed\n   */\n  sampleHeightSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#clampToHeight} and {@link Scene#clampToHeightMostDetailed} functions are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#clampToHeight\n   * @see Scene#clampToHeightMostDetailed\n   */\n  clampToHeightSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if the {@link Scene#invertClassification} is supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#invertClassification\n   */\n  invertClassificationSupported: {\n    get: function () {\n      return this._context.depthTexture;\n    },\n  },\n\n  /**\n   * Returns <code>true</code> if specular environment maps are supported.\n   * @memberof Scene.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @see Scene#specularEnvironmentMaps\n   */\n  specularEnvironmentMapsSupported: {\n    get: function () {\n      return OctahedralProjectedCubeMap.isSupported(this._context);\n    },\n  },\n\n  /**\n   * Gets or sets the depth-test ellipsoid.\n   * @memberof Scene.prototype\n   *\n   * @type {Globe}\n   */\n  globe: {\n    get: function () {\n      return this._globe;\n    },\n\n    set: function (globe) {\n      this._globe = this._globe && this._globe.destroy();\n      this._globe = globe;\n\n      updateGlobeListeners(this, globe);\n    },\n  },\n\n  /**\n   * Gets the collection of primitives.\n   * @memberof Scene.prototype\n   *\n   * @type {PrimitiveCollection}\n   * @readonly\n   */\n  primitives: {\n    get: function () {\n      return this._primitives;\n    },\n  },\n\n  /**\n   * Gets the collection of ground primitives.\n   * @memberof Scene.prototype\n   *\n   * @type {PrimitiveCollection}\n   * @readonly\n   */\n  groundPrimitives: {\n    get: function () {\n      return this._groundPrimitives;\n    },\n  },\n\n  /**\n   * Gets or sets the camera.\n   * @memberof Scene.prototype\n   *\n   * @type {Camera}\n   * @readonly\n   */\n  camera: {\n    get: function () {\n      return this._view.camera;\n    },\n    set: function (camera) {\n      // For internal use only. Documentation is still @readonly.\n      this._view.camera = camera;\n    },\n  },\n\n  /**\n   * Gets or sets the view.\n   * @memberof Scene.prototype\n   *\n   * @type {View}\n   * @readonly\n   *\n   * @private\n   */\n  view: {\n    get: function () {\n      return this._view;\n    },\n    set: function (view) {\n      // For internal use only. Documentation is still @readonly.\n      this._view = view;\n    },\n  },\n\n  /**\n   * Gets the default view.\n   * @memberof Scene.prototype\n   *\n   * @type {View}\n   * @readonly\n   *\n   * @private\n   */\n  defaultView: {\n    get: function () {\n      return this._defaultView;\n    },\n  },\n\n  /**\n   * Gets picking functions and state\n   * @memberof Scene.prototype\n   *\n   * @type {Picking}\n   * @readonly\n   *\n   * @private\n   */\n  picking: {\n    get: function () {\n      return this._picking;\n    },\n  },\n\n  /**\n   * Gets the controller for camera input handling.\n   * @memberof Scene.prototype\n   *\n   * @type {ScreenSpaceCameraController}\n   * @readonly\n   */\n  screenSpaceCameraController: {\n    get: function () {\n      return this._screenSpaceCameraController;\n    },\n  },\n\n  /**\n   * Get the map projection to use in 2D and Columbus View modes.\n   * @memberof Scene.prototype\n   *\n   * @type {MapProjection}\n   * @readonly\n   *\n   * @default new GeographicProjection()\n   */\n  mapProjection: {\n    get: function () {\n      return this._mapProjection;\n    },\n  },\n\n  /**\n   * Gets the job scheduler\n   * @memberof Scene.prototype\n   * @type {JobScheduler}\n   * @readonly\n   *\n   * @private\n   */\n  jobScheduler: {\n    get: function () {\n      return this._jobScheduler;\n    },\n  },\n\n  /**\n   * Gets state information about the current scene. If called outside of a primitive's <code>update</code>\n   * function, the previous frame's state is returned.\n   * @memberof Scene.prototype\n   *\n   * @type {FrameState}\n   * @readonly\n   *\n   * @private\n   */\n  frameState: {\n    get: function () {\n      return this._frameState;\n    },\n  },\n\n  /**\n   * Gets the environment state.\n   * @memberof Scene.prototype\n   *\n   * @type {EnvironmentState}\n   * @readonly\n   *\n   * @private\n   */\n  environmentState: {\n    get: function () {\n      return this._environmentState;\n    },\n  },\n\n  /**\n   * Gets the collection of tweens taking place in the scene.\n   * @memberof Scene.prototype\n   *\n   * @type {TweenCollection}\n   * @readonly\n   *\n   * @private\n   */\n  tweens: {\n    get: function () {\n      return this._tweens;\n    },\n  },\n\n  /**\n   * Gets the collection of image layers that will be rendered on the globe.\n   * @memberof Scene.prototype\n   *\n   * @type {ImageryLayerCollection}\n   * @readonly\n   */\n  imageryLayers: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.imageryLayers;\n    },\n  },\n\n  /**\n   * The terrain provider providing surface geometry for the globe.\n   * @memberof Scene.prototype\n   *\n   * @type {TerrainProvider}\n   */\n  terrainProvider: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.terrainProvider;\n    },\n    set: function (terrainProvider) {\n      if (defined(this.globe)) {\n        this.globe.terrainProvider = terrainProvider;\n      }\n    },\n  },\n\n  /**\n   * Gets an event that's raised when the terrain provider is changed\n   * @memberof Scene.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  terrainProviderChanged: {\n    get: function () {\n      if (!defined(this.globe)) {\n        return undefined;\n      }\n\n      return this.globe.terrainProviderChanged;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised before the scene is updated or rendered.  Subscribers to the event\n   * receive the Scene instance as the first parameter and the current time as the second parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#postUpdate\n   * @see Scene#preRender\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  preUpdate: {\n    get: function () {\n      return this._preUpdate;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised immediately after the scene is updated and before the scene is rendered.\n   * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n   * parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#preRender\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  postUpdate: {\n    get: function () {\n      return this._postUpdate;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised when an error is thrown inside the <code>render</code> function.\n   * The Scene instance and the thrown error are the only two parameters passed to the event handler.\n   * By default, errors are not rethrown after this event is raised, but that can be changed by setting\n   * the <code>rethrowRenderErrors</code> property.\n   * @memberof Scene.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  renderError: {\n    get: function () {\n      return this._renderError;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised after the scene is updated and immediately before the scene is rendered.\n   * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n   * parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#postUpdate\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  preRender: {\n    get: function () {\n      return this._preRender;\n    },\n  },\n\n  /**\n   * Gets the event that will be raised immediately after the scene is rendered.  Subscribers to the event\n   * receive the Scene instance as the first parameter and the current time as the second parameter.\n   * @memberof Scene.prototype\n   *\n   * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n   * @see Scene#preUpdate\n   * @see Scene#postUpdate\n   * @see Scene#postRender\n   *\n   * @type {Event}\n   * @readonly\n   */\n  postRender: {\n    get: function () {\n      return this._postRender;\n    },\n  },\n\n  /**\n   * Gets the simulation time when the scene was last rendered. Returns undefined if the scene has not yet been\n   * rendered.\n   * @memberof Scene.prototype\n   *\n   * @type {JulianDate}\n   * @readonly\n   */\n  lastRenderTime: {\n    get: function () {\n      return this._lastRenderTime;\n    },\n  },\n\n  /**\n   * @memberof Scene.prototype\n   * @private\n   * @readonly\n   */\n  context: {\n    get: function () {\n      return this._context;\n    },\n  },\n\n  /**\n   * This property is for debugging only; it is not for production use.\n   * <p>\n   * When {@link Scene.debugShowFrustums} is <code>true</code>, this contains\n   * properties with statistics about the number of command execute per frustum.\n   * <code>totalCommands</code> is the total number of commands executed, ignoring\n   * overlap. <code>commandsInFrustums</code> is an array with the number of times\n   * commands are executed redundantly, e.g., how many commands overlap two or\n   * three frustums.\n   * </p>\n   *\n   * @memberof Scene.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  debugFrustumStatistics: {\n    get: function () {\n      return this._view.debugFrustumStatistics;\n    },\n  },\n\n  /**\n   * Gets whether or not the scene is optimized for 3D only viewing.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  scene3DOnly: {\n    get: function () {\n      return this._frameState.scene3DOnly;\n    },\n  },\n\n  /**\n   * Gets whether or not the scene has order independent translucency enabled.\n   * Note that this only reflects the original construction option, and there are\n   * other factors that could prevent OIT from functioning on a given system configuration.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  orderIndependentTranslucency: {\n    get: function () {\n      return this._useOIT;\n    },\n  },\n\n  /**\n   * Gets the unique identifier for this scene.\n   * @memberof Scene.prototype\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n\n  /**\n   * Gets or sets the current mode of the scene.\n   * @memberof Scene.prototype\n   * @type {SceneMode}\n   * @default {@link SceneMode.SCENE3D}\n   */\n  mode: {\n    get: function () {\n      return this._mode;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (this.scene3DOnly && value !== SceneMode.SCENE3D) {\n        throw new DeveloperError(\n          \"Only SceneMode.SCENE3D is valid when scene3DOnly is true.\"\n        );\n      }\n      //>>includeEnd('debug');\n      if (value === SceneMode.SCENE2D) {\n        this.morphTo2D(0);\n      } else if (value === SceneMode.SCENE3D) {\n        this.morphTo3D(0);\n      } else if (value === SceneMode.COLUMBUS_VIEW) {\n        this.morphToColumbusView(0);\n        //>>includeStart('debug', pragmas.debug);\n      } else {\n        throw new DeveloperError(\n          \"value must be a valid SceneMode enumeration.\"\n        );\n        //>>includeEnd('debug');\n      }\n      this._mode = value;\n    },\n  },\n\n  /**\n   * Gets the number of frustums used in the last frame.\n   * @memberof Scene.prototype\n   * @type {FrustumCommands[]}\n   *\n   * @private\n   */\n  frustumCommandsList: {\n    get: function () {\n      return this._view.frustumCommandsList;\n    },\n  },\n\n  /**\n   * Gets the number of frustums used in the last frame.\n   * @memberof Scene.prototype\n   * @type {Number}\n   *\n   * @private\n   */\n  numberOfFrustums: {\n    get: function () {\n      return this._view.frustumCommandsList.length;\n    },\n  },\n\n  /**\n   * Gets the scalar used to exaggerate the terrain.\n   * @memberof Scene.prototype\n   * @type {Number}\n   * @readonly\n   */\n  terrainExaggeration: {\n    get: function () {\n      return this._terrainExaggeration;\n    },\n  },\n\n  /**\n   * When <code>true</code>, splits the scene into two viewports with steroscopic views for the left and right eyes.\n   * Used for cardboard and WebVR.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  useWebVR: {\n    get: function () {\n      return this._useWebVR;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (this.camera.frustum instanceof OrthographicFrustum) {\n        throw new DeveloperError(\n          \"VR is unsupported with an orthographic projection.\"\n        );\n      }\n      //>>includeEnd('debug');\n      this._useWebVR = value;\n      if (this._useWebVR) {\n        this._frameState.creditDisplay.container.style.visibility = \"hidden\";\n        this._cameraVR = new Camera(this);\n        if (!defined(this._deviceOrientationCameraController)) {\n          this._deviceOrientationCameraController = new DeviceOrientationCameraController(\n            this\n          );\n        }\n\n        this._aspectRatioVR = this.camera.frustum.aspectRatio;\n      } else {\n        this._frameState.creditDisplay.container.style.visibility = \"visible\";\n        this._cameraVR = undefined;\n        this._deviceOrientationCameraController =\n          this._deviceOrientationCameraController &&\n          !this._deviceOrientationCameraController.isDestroyed() &&\n          this._deviceOrientationCameraController.destroy();\n\n        this.camera.frustum.aspectRatio = this._aspectRatioVR;\n        this.camera.frustum.xOffset = 0.0;\n      }\n    },\n  },\n\n  /**\n   * Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n   * @memberof Scene.prototype\n   * @type {MapMode2D}\n   * @readonly\n   */\n  mapMode2D: {\n    get: function () {\n      return this._mapMode2D;\n    },\n  },\n\n  /**\n   * Gets or sets the position of the Imagery splitter within the viewport.  Valid values are between 0.0 and 1.0.\n   * @memberof Scene.prototype\n   *\n   * @type {Number}\n   */\n  imagerySplitPosition: {\n    get: function () {\n      return this._frameState.imagerySplitPosition;\n    },\n    set: function (value) {\n      this._frameState.imagerySplitPosition = value;\n    },\n  },\n\n  /**\n   * The distance from the camera at which to disable the depth test of billboards, labels and points\n   * to, for example, prevent clipping against terrain. When set to zero, the depth test should always\n   * be applied. When less than zero, the depth test should never be applied. Setting the disableDepthTestDistance\n   * property of a billboard, label or point will override this value.\n   * @memberof Scene.prototype\n   * @type {Number}\n   * @default 0.0\n   */\n  minimumDisableDepthTestDistance: {\n    get: function () {\n      return this._minimumDisableDepthTestDistance;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value) || value < 0.0) {\n        throw new DeveloperError(\n          \"minimumDisableDepthTestDistance must be greater than or equal to 0.0.\"\n        );\n      }\n      //>>includeEnd('debug');\n      this._minimumDisableDepthTestDistance = value;\n    },\n  },\n\n  /**\n   * Whether or not to use a logarithmic depth buffer. Enabling this option will allow for less frustums in the multi-frustum,\n   * increasing performance. This property relies on fragmentDepth being supported.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   */\n  logarithmicDepthBuffer: {\n    get: function () {\n      return this._logDepthBuffer;\n    },\n    set: function (value) {\n      value = this._context.fragmentDepth && value;\n      if (this._logDepthBuffer !== value) {\n        this._logDepthBuffer = value;\n        this._logDepthBufferDirty = true;\n      }\n    },\n  },\n\n  /**\n   * The value used for gamma correction. This is only used when rendering with high dynamic range.\n   * @memberof Scene.prototype\n   * @type {Number}\n   * @default 2.2\n   */\n  gamma: {\n    get: function () {\n      return this._context.uniformState.gamma;\n    },\n    set: function (value) {\n      this._context.uniformState.gamma = value;\n    },\n  },\n\n  /**\n   * Whether or not to use high dynamic range rendering.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  highDynamicRange: {\n    get: function () {\n      return this._hdr;\n    },\n    set: function (value) {\n      var context = this._context;\n      var hdr =\n        value &&\n        context.depthTexture &&\n        (context.colorBufferFloat || context.colorBufferHalfFloat);\n      this._hdrDirty = hdr !== this._hdr;\n      this._hdr = hdr;\n    },\n  },\n\n  /**\n   * Whether or not high dynamic range rendering is supported.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   * @default true\n   */\n  highDynamicRangeSupported: {\n    get: function () {\n      var context = this._context;\n      return (\n        context.depthTexture &&\n        (context.colorBufferFloat || context.colorBufferHalfFloat)\n      );\n    },\n  },\n\n  /**\n   * Whether or not the camera is underneath the globe.\n   * @memberof Scene.prototype\n   * @type {Boolean}\n   * @readonly\n   * @default false\n   */\n  cameraUnderground: {\n    get: function () {\n      return this._cameraUnderground;\n    },\n  },\n\n  /**\n   * Ratio between a pixel and a density-independent pixel. Provides a standard unit of\n   * measure for real pixel measurements appropriate to a particular device.\n   *\n   * @memberof Scene.prototype\n   * @type {Number}\n   * @default 1.0\n   * @private\n   */\n  pixelRatio: {\n    get: function () {\n      return this._frameState.pixelRatio;\n    },\n    set: function (value) {\n      this._frameState.pixelRatio = value;\n    },\n  },\n\n  /**\n   * @private\n   */\n  opaqueFrustumNearOffset: {\n    get: function () {\n      return 0.9999;\n    },\n  },\n\n  /**\n   * @private\n   */\n  globeHeight: {\n    get: function () {\n      return this._globeHeight;\n    },\n  },\n});\n\n/**\n * Determines if a compressed texture format is supported.\n * @param {String} format The texture format. May be the name of the format or the WebGL extension name, e.g. s3tc or WEBGL_compressed_texture_s3tc.\n * @return {boolean} Whether or not the format is supported.\n */\nScene.prototype.getCompressedTextureFormatSupported = function (format) {\n  var context = this.context;\n  return (\n    ((format === \"WEBGL_compressed_texture_s3tc\" || format === \"s3tc\") &&\n      context.s3tc) ||\n    ((format === \"WEBGL_compressed_texture_pvrtc\" || format === \"pvrtc\") &&\n      context.pvrtc) ||\n    ((format === \"WEBGL_compressed_texture_etc1\" || format === \"etc1\") &&\n      context.etc1)\n  );\n};\n\nfunction updateDerivedCommands(scene, command, shadowsDirty) {\n  var frameState = scene._frameState;\n  var context = scene._context;\n  var oit = scene._view.oit;\n  var lightShadowMaps = frameState.shadowState.lightShadowMaps;\n  var lightShadowsEnabled = frameState.shadowState.lightShadowsEnabled;\n\n  var derivedCommands = command.derivedCommands;\n\n  if (defined(command.pickId)) {\n    derivedCommands.picking = DerivedCommand.createPickDerivedCommand(\n      scene,\n      command,\n      context,\n      derivedCommands.picking\n    );\n  }\n\n  if (!command.pickOnly) {\n    derivedCommands.depth = DerivedCommand.createDepthOnlyDerivedCommand(\n      scene,\n      command,\n      context,\n      derivedCommands.depth\n    );\n  }\n\n  derivedCommands.originalCommand = command;\n\n  if (scene._hdr) {\n    derivedCommands.hdr = DerivedCommand.createHdrCommand(\n      command,\n      context,\n      derivedCommands.hdr\n    );\n    command = derivedCommands.hdr.command;\n    derivedCommands = command.derivedCommands;\n  }\n\n  if (lightShadowsEnabled && command.receiveShadows) {\n    derivedCommands.shadows = ShadowMap.createReceiveDerivedCommand(\n      lightShadowMaps,\n      command,\n      shadowsDirty,\n      context,\n      derivedCommands.shadows\n    );\n  }\n\n  if (command.pass === Pass.TRANSLUCENT && defined(oit) && oit.isSupported()) {\n    if (lightShadowsEnabled && command.receiveShadows) {\n      derivedCommands.oit = defined(derivedCommands.oit)\n        ? derivedCommands.oit\n        : {};\n      derivedCommands.oit.shadows = oit.createDerivedCommands(\n        derivedCommands.shadows.receiveCommand,\n        context,\n        derivedCommands.oit.shadows\n      );\n    } else {\n      derivedCommands.oit = oit.createDerivedCommands(\n        command,\n        context,\n        derivedCommands.oit\n      );\n    }\n  }\n}\n\n/**\n * @private\n */\nScene.prototype.updateDerivedCommands = function (command) {\n  if (!defined(command.derivedCommands)) {\n    // Is not a DrawCommand\n    return;\n  }\n\n  var frameState = this._frameState;\n  var context = this._context;\n\n  // Update derived commands when any shadow maps become dirty\n  var shadowsDirty = false;\n  var lastDirtyTime = frameState.shadowState.lastDirtyTime;\n  if (command.lastDirtyTime !== lastDirtyTime) {\n    command.lastDirtyTime = lastDirtyTime;\n    command.dirty = true;\n    shadowsDirty = true;\n  }\n\n  var useLogDepth = frameState.useLogDepth;\n  var useHdr = this._hdr;\n  var derivedCommands = command.derivedCommands;\n  var hasLogDepthDerivedCommands = defined(derivedCommands.logDepth);\n  var hasHdrCommands = defined(derivedCommands.hdr);\n  var hasDerivedCommands = defined(derivedCommands.originalCommand);\n  var needsLogDepthDerivedCommands = useLogDepth && !hasLogDepthDerivedCommands;\n  var needsHdrCommands = useHdr && !hasHdrCommands;\n  var needsDerivedCommands = (!useLogDepth || !useHdr) && !hasDerivedCommands;\n  command.dirty =\n    command.dirty ||\n    needsLogDepthDerivedCommands ||\n    needsHdrCommands ||\n    needsDerivedCommands;\n\n  if (command.dirty) {\n    command.dirty = false;\n\n    var shadowMaps = frameState.shadowState.shadowMaps;\n    var shadowsEnabled = frameState.shadowState.shadowsEnabled;\n    if (shadowsEnabled && command.castShadows) {\n      derivedCommands.shadows = ShadowMap.createCastDerivedCommand(\n        shadowMaps,\n        command,\n        shadowsDirty,\n        context,\n        derivedCommands.shadows\n      );\n    }\n\n    if (hasLogDepthDerivedCommands || needsLogDepthDerivedCommands) {\n      derivedCommands.logDepth = DerivedCommand.createLogDepthCommand(\n        command,\n        context,\n        derivedCommands.logDepth\n      );\n      updateDerivedCommands(\n        this,\n        derivedCommands.logDepth.command,\n        shadowsDirty\n      );\n    }\n    if (hasDerivedCommands || needsDerivedCommands) {\n      updateDerivedCommands(this, command, shadowsDirty);\n    }\n  }\n};\n\nvar renderTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.RENDER,\n});\n\nvar preloadTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.PRELOAD,\n});\n\nvar preloadFlightTilesetPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.PRELOAD_FLIGHT,\n});\n\nvar requestRenderModeDeferCheckPassState = new Cesium3DTilePassState({\n  pass: Cesium3DTilePass.REQUEST_RENDER_MODE_DEFER_CHECK,\n});\n\nvar scratchOccluderBoundingSphere = new BoundingSphere();\nvar scratchOccluder;\n\nfunction getOccluder(scene) {\n  // TODO: The occluder is the top-level globe. When we add\n  //       support for multiple central bodies, this should be the closest one.\n  var globe = scene.globe;\n  if (\n    scene._mode === SceneMode.SCENE3D &&\n    defined(globe) &&\n    globe.show &&\n    !scene._cameraUnderground &&\n    !scene._globeTranslucencyState.translucent\n  ) {\n    var ellipsoid = globe.ellipsoid;\n    var minimumTerrainHeight = scene.frameState.minimumTerrainHeight;\n    scratchOccluderBoundingSphere.radius =\n      ellipsoid.minimumRadius + minimumTerrainHeight;\n    scratchOccluder = Occluder.fromBoundingSphere(\n      scratchOccluderBoundingSphere,\n      scene.camera.positionWC,\n      scratchOccluder\n    );\n    return scratchOccluder;\n  }\n\n  return undefined;\n}\n\n/**\n * @private\n */\nScene.prototype.clearPasses = function (passes) {\n  passes.render = false;\n  passes.pick = false;\n  passes.depth = false;\n  passes.postProcess = false;\n  passes.offscreen = false;\n};\n\nfunction updateFrameNumber(scene, frameNumber, time) {\n  var frameState = scene._frameState;\n  frameState.frameNumber = frameNumber;\n  frameState.time = JulianDate.clone(time, frameState.time);\n}\n\n/**\n * @private\n */\nScene.prototype.updateFrameState = function () {\n  var camera = this.camera;\n\n  var frameState = this._frameState;\n  frameState.commandList.length = 0;\n  frameState.shadowMaps.length = 0;\n  frameState.brdfLutGenerator = this._brdfLutGenerator;\n  frameState.environmentMap = this.skyBox && this.skyBox._cubeMap;\n  frameState.mode = this._mode;\n  frameState.morphTime = this.morphTime;\n  frameState.mapProjection = this.mapProjection;\n  frameState.camera = camera;\n  frameState.cullingVolume = camera.frustum.computeCullingVolume(\n    camera.positionWC,\n    camera.directionWC,\n    camera.upWC\n  );\n  frameState.occluder = getOccluder(this);\n  frameState.terrainExaggeration = this._terrainExaggeration;\n  frameState.minimumTerrainHeight = 0.0;\n  frameState.minimumDisableDepthTestDistance = this._minimumDisableDepthTestDistance;\n  frameState.invertClassification = this.invertClassification;\n  frameState.useLogDepth =\n    this._logDepthBuffer &&\n    !(\n      this.camera.frustum instanceof OrthographicFrustum ||\n      this.camera.frustum instanceof OrthographicOffCenterFrustum\n    );\n  frameState.light = this.light;\n  frameState.cameraUnderground = this._cameraUnderground;\n  frameState.globeTranslucencyState = this._globeTranslucencyState;\n\n  if (\n    defined(this._specularEnvironmentMapAtlas) &&\n    this._specularEnvironmentMapAtlas.ready\n  ) {\n    frameState.specularEnvironmentMaps = this._specularEnvironmentMapAtlas.texture;\n    frameState.specularEnvironmentMapsMaximumLOD = this._specularEnvironmentMapAtlas.maximumMipmapLevel;\n  } else {\n    frameState.specularEnvironmentMaps = undefined;\n    frameState.specularEnvironmentMapsMaximumLOD = undefined;\n  }\n\n  frameState.sphericalHarmonicCoefficients = this.sphericalHarmonicCoefficients;\n\n  this._actualInvertClassificationColor = Color.clone(\n    this.invertClassificationColor,\n    this._actualInvertClassificationColor\n  );\n  if (!InvertClassification.isTranslucencySupported(this._context)) {\n    this._actualInvertClassificationColor.alpha = 1.0;\n  }\n\n  frameState.invertClassificationColor = this._actualInvertClassificationColor;\n\n  if (defined(this.globe)) {\n    frameState.maximumScreenSpaceError = this.globe.maximumScreenSpaceError;\n  } else {\n    frameState.maximumScreenSpaceError = 2;\n  }\n\n  this.clearPasses(frameState.passes);\n\n  frameState.tilesetPassState = undefined;\n};\n\n/**\n * @private\n */\nScene.prototype.isVisible = function (command, cullingVolume, occluder) {\n  return (\n    defined(command) &&\n    (!defined(command.boundingVolume) ||\n      !command.cull ||\n      (cullingVolume.computeVisibility(command.boundingVolume) !==\n        Intersect.OUTSIDE &&\n        (!defined(occluder) ||\n          !command.occlude ||\n          !command.boundingVolume.isOccluded(occluder))))\n  );\n};\n\nvar transformFrom2D = new Matrix4(\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  1.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  0.0,\n  1.0\n);\ntransformFrom2D = Matrix4.inverseTransformation(\n  transformFrom2D,\n  transformFrom2D\n);\n\nfunction debugShowBoundingVolume(command, scene, passState, debugFramebuffer) {\n  // Debug code to draw bounding volume for command.  Not optimized!\n  // Assumes bounding volume is a bounding sphere or box\n  var frameState = scene._frameState;\n  var context = frameState.context;\n  var boundingVolume = command.boundingVolume;\n\n  if (defined(scene._debugVolume)) {\n    scene._debugVolume.destroy();\n  }\n\n  var geometry;\n\n  var center = Cartesian3.clone(boundingVolume.center);\n  if (frameState.mode !== SceneMode.SCENE3D) {\n    center = Matrix4.multiplyByPoint(transformFrom2D, center, center);\n    var projection = frameState.mapProjection;\n    var centerCartographic = projection.unproject(center);\n    center = projection.ellipsoid.cartographicToCartesian(centerCartographic);\n  }\n\n  if (defined(boundingVolume.radius)) {\n    var radius = boundingVolume.radius;\n\n    geometry = GeometryPipeline.toWireframe(\n      EllipsoidGeometry.createGeometry(\n        new EllipsoidGeometry({\n          radii: new Cartesian3(radius, radius, radius),\n          vertexFormat: PerInstanceColorAppearance.FLAT_VERTEX_FORMAT,\n        })\n      )\n    );\n\n    scene._debugVolume = new Primitive({\n      geometryInstances: new GeometryInstance({\n        geometry: geometry,\n        modelMatrix: Matrix4.fromTranslation(center),\n        attributes: {\n          color: new ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 1.0),\n        },\n      }),\n      appearance: new PerInstanceColorAppearance({\n        flat: true,\n        translucent: false,\n      }),\n      asynchronous: false,\n    });\n  } else {\n    var halfAxes = boundingVolume.halfAxes;\n\n    geometry = GeometryPipeline.toWireframe(\n      BoxGeometry.createGeometry(\n        BoxGeometry.fromDimensions({\n          dimensions: new Cartesian3(2.0, 2.0, 2.0),\n          vertexFormat: PerInstanceColorAppearance.FLAT_VERTEX_FORMAT,\n        })\n      )\n    );\n\n    scene._debugVolume = new Primitive({\n      geometryInstances: new GeometryInstance({\n        geometry: geometry,\n        modelMatrix: Matrix4.fromRotationTranslation(\n          halfAxes,\n          center,\n          new Matrix4()\n        ),\n        attributes: {\n          color: new ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 1.0),\n        },\n      }),\n      appearance: new PerInstanceColorAppearance({\n        flat: true,\n        translucent: false,\n      }),\n      asynchronous: false,\n    });\n  }\n\n  var savedCommandList = frameState.commandList;\n  var commandList = (frameState.commandList = []);\n  scene._debugVolume.update(frameState);\n\n  command = commandList[0];\n\n  if (frameState.useLogDepth) {\n    var logDepth = DerivedCommand.createLogDepthCommand(command, context);\n    command = logDepth.command;\n  }\n\n  var framebuffer;\n  if (defined(debugFramebuffer)) {\n    framebuffer = passState.framebuffer;\n    passState.framebuffer = debugFramebuffer;\n  }\n\n  command.execute(context, passState);\n\n  if (defined(framebuffer)) {\n    passState.framebuffer = framebuffer;\n  }\n\n  frameState.commandList = savedCommandList;\n}\n\nfunction executeCommand(command, scene, context, passState, debugFramebuffer) {\n  var frameState = scene._frameState;\n\n  if (defined(scene.debugCommandFilter) && !scene.debugCommandFilter(command)) {\n    return;\n  }\n\n  if (command instanceof ClearCommand) {\n    command.execute(context, passState);\n    return;\n  }\n\n  if (command.debugShowBoundingVolume && defined(command.boundingVolume)) {\n    debugShowBoundingVolume(command, scene, passState, debugFramebuffer);\n  }\n\n  if (frameState.useLogDepth && defined(command.derivedCommands.logDepth)) {\n    command = command.derivedCommands.logDepth.command;\n  }\n\n  var passes = frameState.passes;\n  if (\n    !passes.pick &&\n    !passes.depth &&\n    scene._hdr &&\n    defined(command.derivedCommands) &&\n    defined(command.derivedCommands.hdr)\n  ) {\n    command = command.derivedCommands.hdr.command;\n  }\n\n  if (passes.pick || passes.depth) {\n    if (\n      passes.pick &&\n      !passes.depth &&\n      defined(command.derivedCommands.picking)\n    ) {\n      command = command.derivedCommands.picking.pickCommand;\n      command.execute(context, passState);\n      return;\n    } else if (defined(command.derivedCommands.depth)) {\n      command = command.derivedCommands.depth.depthOnlyCommand;\n      command.execute(context, passState);\n      return;\n    }\n  }\n\n  if (scene.debugShowCommands || scene.debugShowFrustums) {\n    scene._debugInspector.executeDebugShowFrustumsCommand(\n      scene,\n      command,\n      passState\n    );\n    return;\n  }\n\n  if (\n    frameState.shadowState.lightShadowsEnabled &&\n    command.receiveShadows &&\n    defined(command.derivedCommands.shadows)\n  ) {\n    // If the command receives shadows, execute the derived shadows command.\n    // Some commands, such as OIT derived commands, do not have derived shadow commands themselves\n    // and instead shadowing is built-in. In this case execute the command regularly below.\n    command.derivedCommands.shadows.receiveCommand.execute(context, passState);\n  } else {\n    command.execute(context, passState);\n  }\n}\n\nfunction executeIdCommand(command, scene, context, passState) {\n  var frameState = scene._frameState;\n  var derivedCommands = command.derivedCommands;\n  if (!defined(derivedCommands)) {\n    return;\n  }\n\n  if (frameState.useLogDepth && defined(derivedCommands.logDepth)) {\n    command = derivedCommands.logDepth.command;\n  }\n\n  derivedCommands = command.derivedCommands;\n  if (defined(derivedCommands.picking)) {\n    command = derivedCommands.picking.pickCommand;\n    command.execute(context, passState);\n  } else if (defined(derivedCommands.depth)) {\n    command = derivedCommands.depth.depthOnlyCommand;\n    command.execute(context, passState);\n  }\n}\n\nfunction backToFront(a, b, position) {\n  return (\n    b.boundingVolume.distanceSquaredTo(position) -\n    a.boundingVolume.distanceSquaredTo(position)\n  );\n}\n\nfunction frontToBack(a, b, position) {\n  // When distances are equal equal favor sorting b before a. This gives render priority to commands later in the list.\n  return (\n    a.boundingVolume.distanceSquaredTo(position) -\n    b.boundingVolume.distanceSquaredTo(position) +\n    CesiumMath.EPSILON12\n  );\n}\n\nfunction executeTranslucentCommandsBackToFront(\n  scene,\n  executeFunction,\n  passState,\n  commands,\n  invertClassification\n) {\n  var context = scene.context;\n\n  mergeSort(commands, backToFront, scene.camera.positionWC);\n\n  if (defined(invertClassification)) {\n    executeFunction(\n      invertClassification.unclassifiedCommand,\n      scene,\n      context,\n      passState\n    );\n  }\n\n  var length = commands.length;\n  for (var i = 0; i < length; ++i) {\n    executeFunction(commands[i], scene, context, passState);\n  }\n}\n\nfunction executeTranslucentCommandsFrontToBack(\n  scene,\n  executeFunction,\n  passState,\n  commands,\n  invertClassification\n) {\n  var context = scene.context;\n\n  mergeSort(commands, frontToBack, scene.camera.positionWC);\n\n  if (defined(invertClassification)) {\n    executeFunction(\n      invertClassification.unclassifiedCommand,\n      scene,\n      context,\n      passState\n    );\n  }\n\n  var length = commands.length;\n  for (var i = 0; i < length; ++i) {\n    executeFunction(commands[i], scene, context, passState);\n  }\n}\n\nfunction getDebugGlobeDepth(scene, index) {\n  var globeDepths = scene._view.debugGlobeDepths;\n  var globeDepth = globeDepths[index];\n  if (!defined(globeDepth) && scene.context.depthTexture) {\n    globeDepth = new GlobeDepth();\n    globeDepths[index] = globeDepth;\n  }\n  return globeDepth;\n}\n\nvar scratchPerspectiveFrustum = new PerspectiveFrustum();\nvar scratchPerspectiveOffCenterFrustum = new PerspectiveOffCenterFrustum();\nvar scratchOrthographicFrustum = new OrthographicFrustum();\nvar scratchOrthographicOffCenterFrustum = new OrthographicOffCenterFrustum();\n\nfunction executeCommands(scene, passState) {\n  var camera = scene.camera;\n  var context = scene.context;\n  var frameState = scene.frameState;\n  var us = context.uniformState;\n\n  us.updateCamera(camera);\n\n  // Create a working frustum from the original camera frustum.\n  var frustum;\n  if (defined(camera.frustum.fov)) {\n    frustum = camera.frustum.clone(scratchPerspectiveFrustum);\n  } else if (defined(camera.frustum.infiniteProjectionMatrix)) {\n    frustum = camera.frustum.clone(scratchPerspectiveOffCenterFrustum);\n  } else if (defined(camera.frustum.width)) {\n    frustum = camera.frustum.clone(scratchOrthographicFrustum);\n  } else {\n    frustum = camera.frustum.clone(scratchOrthographicOffCenterFrustum);\n  }\n\n  // Ideally, we would render the sky box and atmosphere last for\n  // early-z, but we would have to draw it in each frustum\n  frustum.near = camera.frustum.near;\n  frustum.far = camera.frustum.far;\n  us.updateFrustum(frustum);\n  us.updatePass(Pass.ENVIRONMENT);\n\n  var passes = frameState.passes;\n  var picking = passes.pick;\n  var environmentState = scene._environmentState;\n  var view = scene._view;\n  var renderTranslucentDepthForPick =\n    environmentState.renderTranslucentDepthForPick;\n  var useWebVR = environmentState.useWebVR;\n\n  // Do not render environment primitives during a pick pass since they do not generate picking commands.\n  if (!picking) {\n    var skyBoxCommand = environmentState.skyBoxCommand;\n    if (defined(skyBoxCommand)) {\n      executeCommand(skyBoxCommand, scene, context, passState);\n    }\n\n    if (environmentState.isSkyAtmosphereVisible) {\n      executeCommand(\n        environmentState.skyAtmosphereCommand,\n        scene,\n        context,\n        passState\n      );\n    }\n\n    if (environmentState.isSunVisible) {\n      environmentState.sunDrawCommand.execute(context, passState);\n      if (scene.sunBloom && !useWebVR) {\n        var framebuffer;\n        if (environmentState.useGlobeDepthFramebuffer) {\n          framebuffer = view.globeDepth.framebuffer;\n        } else if (environmentState.usePostProcess) {\n          framebuffer = view.sceneFramebuffer.getFramebuffer();\n        } else {\n          framebuffer = environmentState.originalFramebuffer;\n        }\n        scene._sunPostProcess.execute(context);\n        scene._sunPostProcess.copy(context, framebuffer);\n        passState.framebuffer = framebuffer;\n      }\n    }\n\n    // Moon can be seen through the atmosphere, since the sun is rendered after the atmosphere.\n    if (environmentState.isMoonVisible) {\n      environmentState.moonCommand.execute(context, passState);\n    }\n  }\n\n  // Determine how translucent surfaces will be handled.\n  var executeTranslucentCommands;\n  if (environmentState.useOIT) {\n    if (!defined(scene._executeOITFunction)) {\n      scene._executeOITFunction = function (\n        scene,\n        executeFunction,\n        passState,\n        commands,\n        invertClassification\n      ) {\n        view.oit.executeCommands(\n          scene,\n          executeFunction,\n          passState,\n          commands,\n          invertClassification\n        );\n      };\n    }\n    executeTranslucentCommands = scene._executeOITFunction;\n  } else if (passes.render) {\n    executeTranslucentCommands = executeTranslucentCommandsBackToFront;\n  } else {\n    executeTranslucentCommands = executeTranslucentCommandsFrontToBack;\n  }\n\n  var frustumCommandsList = view.frustumCommandsList;\n  var numFrustums = frustumCommandsList.length;\n\n  var clearGlobeDepth = environmentState.clearGlobeDepth;\n  var useDepthPlane = environmentState.useDepthPlane;\n  var globeTranslucencyState = scene._globeTranslucencyState;\n  var globeTranslucent = globeTranslucencyState.translucent;\n  var globeTranslucencyFramebuffer = scene._view.globeTranslucencyFramebuffer;\n  var separatePrimitiveFramebuffer = (environmentState.separatePrimitiveFramebuffer = false);\n  var clearDepth = scene._depthClearCommand;\n  var clearStencil = scene._stencilClearCommand;\n  var clearClassificationStencil = scene._classificationStencilClearCommand;\n  var depthPlane = scene._depthPlane;\n  var usePostProcessSelected = environmentState.usePostProcessSelected;\n\n  var height2D = camera.position.z;\n\n  // Execute commands in each frustum in back to front order\n  var j;\n  for (var i = 0; i < numFrustums; ++i) {\n    var index = numFrustums - i - 1;\n    var frustumCommands = frustumCommandsList[index];\n\n    if (scene.mode === SceneMode.SCENE2D) {\n      // To avoid z-fighting in 2D, move the camera to just before the frustum\n      // and scale the frustum depth to be in [1.0, nearToFarDistance2D].\n      camera.position.z = height2D - frustumCommands.near + 1.0;\n      frustum.far = Math.max(1.0, frustumCommands.far - frustumCommands.near);\n      frustum.near = 1.0;\n      us.update(frameState);\n      us.updateFrustum(frustum);\n    } else {\n      // Avoid tearing artifacts between adjacent frustums in the opaque passes\n      frustum.near =\n        index !== 0\n          ? frustumCommands.near * scene.opaqueFrustumNearOffset\n          : frustumCommands.near;\n      frustum.far = frustumCommands.far;\n      us.updateFrustum(frustum);\n    }\n\n    var globeDepth = scene.debugShowGlobeDepth\n      ? getDebugGlobeDepth(scene, index)\n      : view.globeDepth;\n\n    if (separatePrimitiveFramebuffer) {\n      // Render to globe framebuffer in GLOBE pass\n      passState.framebuffer = globeDepth.framebuffer;\n    }\n\n    var fb;\n    if (\n      scene.debugShowGlobeDepth &&\n      defined(globeDepth) &&\n      environmentState.useGlobeDepthFramebuffer\n    ) {\n      globeDepth.update(\n        context,\n        passState,\n        view.viewport,\n        scene._hdr,\n        clearGlobeDepth\n      );\n      globeDepth.clear(context, passState, scene._clearColorCommand.color);\n      fb = passState.framebuffer;\n      passState.framebuffer = globeDepth.framebuffer;\n    }\n\n    clearDepth.execute(context, passState);\n\n    if (context.stencilBuffer) {\n      clearStencil.execute(context, passState);\n    }\n\n    us.updatePass(Pass.GLOBE);\n    var commands = frustumCommands.commands[Pass.GLOBE];\n    var length = frustumCommands.indices[Pass.GLOBE];\n\n    if (globeTranslucent) {\n      globeTranslucencyState.executeGlobeCommands(\n        frustumCommands,\n        executeCommand,\n        globeTranslucencyFramebuffer,\n        scene,\n        passState\n      );\n    } else {\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n    }\n\n    if (defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n      globeDepth.executeCopyDepth(context, passState);\n    }\n\n    if (\n      scene.debugShowGlobeDepth &&\n      defined(globeDepth) &&\n      environmentState.useGlobeDepthFramebuffer\n    ) {\n      passState.framebuffer = fb;\n    }\n\n    // Draw terrain classification\n    if (!environmentState.renderTranslucentDepthForPick) {\n      us.updatePass(Pass.TERRAIN_CLASSIFICATION);\n      commands = frustumCommands.commands[Pass.TERRAIN_CLASSIFICATION];\n      length = frustumCommands.indices[Pass.TERRAIN_CLASSIFICATION];\n\n      if (globeTranslucent) {\n        globeTranslucencyState.executeGlobeClassificationCommands(\n          frustumCommands,\n          executeCommand,\n          globeTranslucencyFramebuffer,\n          scene,\n          passState\n        );\n      } else {\n        for (j = 0; j < length; ++j) {\n          executeCommand(commands[j], scene, context, passState);\n        }\n      }\n    }\n\n    if (clearGlobeDepth) {\n      clearDepth.execute(context, passState);\n      if (useDepthPlane) {\n        depthPlane.execute(context, passState);\n      }\n    }\n\n    if (separatePrimitiveFramebuffer) {\n      // Render to primitive framebuffer in all other passes\n      passState.framebuffer = globeDepth.primitiveFramebuffer;\n    }\n\n    if (\n      !environmentState.useInvertClassification ||\n      picking ||\n      environmentState.renderTranslucentDepthForPick\n    ) {\n      // Common/fastest path. Draw 3D Tiles and classification normally.\n\n      // Draw 3D Tiles\n      us.updatePass(Pass.CESIUM_3D_TILE);\n      commands = frustumCommands.commands[Pass.CESIUM_3D_TILE];\n      length = frustumCommands.indices[Pass.CESIUM_3D_TILE];\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n\n      if (length > 0) {\n        if (defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n          globeDepth.executeUpdateDepth(context, passState, clearGlobeDepth);\n        }\n\n        // Draw classifications. Modifies 3D Tiles color.\n        if (!environmentState.renderTranslucentDepthForPick) {\n          us.updatePass(Pass.CESIUM_3D_TILE_CLASSIFICATION);\n          commands =\n            frustumCommands.commands[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n          length = frustumCommands.indices[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n          for (j = 0; j < length; ++j) {\n            executeCommand(commands[j], scene, context, passState);\n          }\n        }\n      }\n    } else {\n      // When the invert classification color is opaque:\n      //    Main FBO (FBO1):                   Main_Color   + Main_DepthStencil\n      //    Invert classification FBO (FBO2) : Invert_Color + Main_DepthStencil\n      //\n      //    1. Clear FBO2 color to vec4(0.0) for each frustum\n      //    2. Draw 3D Tiles to FBO2\n      //    3. Draw classification to FBO2\n      //    4. Fullscreen pass to FBO1, draw Invert_Color when:\n      //           * Main_DepthStencil has the stencil bit set > 0 (classified)\n      //    5. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n      //           * Main_DepthStencil has stencil bit set to 0 (unclassified) and\n      //           * Invert_Color !== vec4(0.0)\n      //\n      // When the invert classification color is translucent:\n      //    Main FBO (FBO1):                  Main_Color         + Main_DepthStencil\n      //    Invert classification FBO (FBO2): Invert_Color       + Invert_DepthStencil\n      //    IsClassified FBO (FBO3):          IsClassified_Color + Invert_DepthStencil\n      //\n      //    1. Clear FBO2 and FBO3 color to vec4(0.0), stencil to 0, and depth to 1.0\n      //    2. Draw 3D Tiles to FBO2\n      //    3. Draw classification to FBO2\n      //    4. Fullscreen pass to FBO3, draw any color when\n      //           * Invert_DepthStencil has the stencil bit set > 0 (classified)\n      //    5. Fullscreen pass to FBO1, draw Invert_Color when:\n      //           * Invert_Color !== vec4(0.0) and\n      //           * IsClassified_Color !== vec4(0.0)\n      //    6. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n      //           * Invert_Color !== vec4(0.0) and\n      //           * IsClassified_Color === vec4(0.0)\n      //\n      // NOTE: Step six when translucent invert color occurs after the TRANSLUCENT pass\n      //\n      scene._invertClassification.clear(context, passState);\n\n      var opaqueClassificationFramebuffer = passState.framebuffer;\n      passState.framebuffer = scene._invertClassification._fbo;\n\n      // Draw normally\n      us.updatePass(Pass.CESIUM_3D_TILE);\n      commands = frustumCommands.commands[Pass.CESIUM_3D_TILE];\n      length = frustumCommands.indices[Pass.CESIUM_3D_TILE];\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n\n      if (defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n        globeDepth.executeUpdateDepth(context, passState, clearGlobeDepth);\n      }\n\n      // Set stencil\n      us.updatePass(Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW);\n      commands =\n        frustumCommands.commands[\n          Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW\n        ];\n      length =\n        frustumCommands.indices[Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW];\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n\n      passState.framebuffer = opaqueClassificationFramebuffer;\n\n      // Fullscreen pass to copy classified fragments\n      scene._invertClassification.executeClassified(context, passState);\n      if (frameState.invertClassificationColor.alpha === 1.0) {\n        // Fullscreen pass to copy unclassified fragments when alpha == 1.0\n        scene._invertClassification.executeUnclassified(context, passState);\n      }\n\n      // Clear stencil set by the classification for the next classification pass\n      if (length > 0 && context.stencilBuffer) {\n        clearClassificationStencil.execute(context, passState);\n      }\n\n      // Draw style over classification.\n      us.updatePass(Pass.CESIUM_3D_TILE_CLASSIFICATION);\n      commands = frustumCommands.commands[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n      length = frustumCommands.indices[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n      for (j = 0; j < length; ++j) {\n        executeCommand(commands[j], scene, context, passState);\n      }\n    }\n\n    if (length > 0 && context.stencilBuffer) {\n      clearStencil.execute(context, passState);\n    }\n\n    us.updatePass(Pass.OPAQUE);\n    commands = frustumCommands.commands[Pass.OPAQUE];\n    length = frustumCommands.indices[Pass.OPAQUE];\n    for (j = 0; j < length; ++j) {\n      executeCommand(commands[j], scene, context, passState);\n    }\n\n    if (index !== 0 && scene.mode !== SceneMode.SCENE2D) {\n      // Do not overlap frustums in the translucent pass to avoid blending artifacts\n      frustum.near = frustumCommands.near;\n      us.updateFrustum(frustum);\n    }\n\n    var invertClassification;\n    if (\n      !picking &&\n      environmentState.useInvertClassification &&\n      frameState.invertClassificationColor.alpha < 1.0\n    ) {\n      // Fullscreen pass to copy unclassified fragments when alpha < 1.0.\n      // Not executed when undefined.\n      invertClassification = scene._invertClassification;\n    }\n\n    us.updatePass(Pass.TRANSLUCENT);\n    commands = frustumCommands.commands[Pass.TRANSLUCENT];\n    commands.length = frustumCommands.indices[Pass.TRANSLUCENT];\n    executeTranslucentCommands(\n      scene,\n      executeCommand,\n      passState,\n      commands,\n      invertClassification\n    );\n\n    if (\n      context.depthTexture &&\n      scene.useDepthPicking &&\n      (environmentState.useGlobeDepthFramebuffer ||\n        renderTranslucentDepthForPick)\n    ) {\n      // PERFORMANCE_IDEA: Use MRT to avoid the extra copy.\n      var depthStencilTexture = renderTranslucentDepthForPick\n        ? passState.framebuffer.depthStencilTexture\n        : globeDepth.framebuffer.depthStencilTexture;\n      var pickDepth = scene._picking.getPickDepth(scene, index);\n      pickDepth.update(context, depthStencilTexture);\n      pickDepth.executeCopyDepth(context, passState);\n    }\n\n    if (separatePrimitiveFramebuffer) {\n      // Reset framebuffer\n      passState.framebuffer = globeDepth.framebuffer;\n    }\n\n    if (picking || !usePostProcessSelected) {\n      continue;\n    }\n\n    var originalFramebuffer = passState.framebuffer;\n    passState.framebuffer = view.sceneFramebuffer.getIdFramebuffer();\n\n    // reset frustum\n    frustum.near =\n      index !== 0\n        ? frustumCommands.near * scene.opaqueFrustumNearOffset\n        : frustumCommands.near;\n    frustum.far = frustumCommands.far;\n    us.updateFrustum(frustum);\n\n    us.updatePass(Pass.GLOBE);\n    commands = frustumCommands.commands[Pass.GLOBE];\n    length = frustumCommands.indices[Pass.GLOBE];\n\n    if (globeTranslucent) {\n      globeTranslucencyState.executeGlobeCommands(\n        frustumCommands,\n        executeIdCommand,\n        globeTranslucencyFramebuffer,\n        scene,\n        passState\n      );\n    } else {\n      for (j = 0; j < length; ++j) {\n        executeIdCommand(commands[j], scene, context, passState);\n      }\n    }\n\n    if (clearGlobeDepth) {\n      clearDepth.framebuffer = passState.framebuffer;\n      clearDepth.execute(context, passState);\n      clearDepth.framebuffer = undefined;\n    }\n\n    if (clearGlobeDepth && useDepthPlane) {\n      depthPlane.execute(context, passState);\n    }\n\n    us.updatePass(Pass.CESIUM_3D_TILE);\n    commands = frustumCommands.commands[Pass.CESIUM_3D_TILE];\n    length = frustumCommands.indices[Pass.CESIUM_3D_TILE];\n    for (j = 0; j < length; ++j) {\n      executeIdCommand(commands[j], scene, context, passState);\n    }\n\n    us.updatePass(Pass.OPAQUE);\n    commands = frustumCommands.commands[Pass.OPAQUE];\n    length = frustumCommands.indices[Pass.OPAQUE];\n    for (j = 0; j < length; ++j) {\n      executeIdCommand(commands[j], scene, context, passState);\n    }\n\n    us.updatePass(Pass.TRANSLUCENT);\n    commands = frustumCommands.commands[Pass.TRANSLUCENT];\n    length = frustumCommands.indices[Pass.TRANSLUCENT];\n    for (j = 0; j < length; ++j) {\n      executeIdCommand(commands[j], scene, context, passState);\n    }\n\n    passState.framebuffer = originalFramebuffer;\n  }\n}\n\nfunction executeComputeCommands(scene) {\n  var us = scene.context.uniformState;\n  us.updatePass(Pass.COMPUTE);\n\n  var sunComputeCommand = scene._environmentState.sunComputeCommand;\n  if (defined(sunComputeCommand)) {\n    sunComputeCommand.execute(scene._computeEngine);\n  }\n\n  var commandList = scene._computeCommandList;\n  var length = commandList.length;\n  for (var i = 0; i < length; ++i) {\n    commandList[i].execute(scene._computeEngine);\n  }\n}\n\nfunction executeOverlayCommands(scene, passState) {\n  var us = scene.context.uniformState;\n  us.updatePass(Pass.OVERLAY);\n\n  var context = scene.context;\n  var commandList = scene._overlayCommandList;\n  var length = commandList.length;\n  for (var i = 0; i < length; ++i) {\n    commandList[i].execute(context, passState);\n  }\n}\n\nfunction insertShadowCastCommands(scene, commandList, shadowMap) {\n  var shadowVolume = shadowMap.shadowMapCullingVolume;\n  var isPointLight = shadowMap.isPointLight;\n  var passes = shadowMap.passes;\n  var numberOfPasses = passes.length;\n\n  var length = commandList.length;\n  for (var i = 0; i < length; ++i) {\n    var command = commandList[i];\n    scene.updateDerivedCommands(command);\n\n    if (\n      command.castShadows &&\n      (command.pass === Pass.GLOBE ||\n        command.pass === Pass.CESIUM_3D_TILE ||\n        command.pass === Pass.OPAQUE ||\n        command.pass === Pass.TRANSLUCENT)\n    ) {\n      if (scene.isVisible(command, shadowVolume)) {\n        if (isPointLight) {\n          for (var k = 0; k < numberOfPasses; ++k) {\n            passes[k].commandList.push(command);\n          }\n        } else if (numberOfPasses === 1) {\n          passes[0].commandList.push(command);\n        } else {\n          var wasVisible = false;\n          // Loop over cascades from largest to smallest\n          for (var j = numberOfPasses - 1; j >= 0; --j) {\n            var cascadeVolume = passes[j].cullingVolume;\n            if (scene.isVisible(command, cascadeVolume)) {\n              passes[j].commandList.push(command);\n              wasVisible = true;\n            } else if (wasVisible) {\n              // If it was visible in the previous cascade but now isn't\n              // then there is no need to check any more cascades\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction executeShadowMapCastCommands(scene) {\n  var frameState = scene.frameState;\n  var shadowMaps = frameState.shadowState.shadowMaps;\n  var shadowMapLength = shadowMaps.length;\n\n  if (!frameState.shadowState.shadowsEnabled) {\n    return;\n  }\n\n  var context = scene.context;\n  var uniformState = context.uniformState;\n\n  for (var i = 0; i < shadowMapLength; ++i) {\n    var shadowMap = shadowMaps[i];\n    if (shadowMap.outOfView) {\n      continue;\n    }\n\n    // Reset the command lists\n    var j;\n    var passes = shadowMap.passes;\n    var numberOfPasses = passes.length;\n    for (j = 0; j < numberOfPasses; ++j) {\n      passes[j].commandList.length = 0;\n    }\n\n    // Insert the primitive/model commands into the command lists\n    var sceneCommands = scene.frameState.commandList;\n    insertShadowCastCommands(scene, sceneCommands, shadowMap);\n\n    for (j = 0; j < numberOfPasses; ++j) {\n      var pass = shadowMap.passes[j];\n      uniformState.updateCamera(pass.camera);\n      shadowMap.updatePass(context, j);\n      var numberOfCommands = pass.commandList.length;\n      for (var k = 0; k < numberOfCommands; ++k) {\n        var command = pass.commandList[k];\n        // Set the correct pass before rendering into the shadow map because some shaders\n        // conditionally render based on whether the pass is translucent or opaque.\n        uniformState.updatePass(command.pass);\n        executeCommand(\n          command.derivedCommands.shadows.castCommands[i],\n          scene,\n          context,\n          pass.passState\n        );\n      }\n    }\n  }\n}\n\nvar scratchEyeTranslation = new Cartesian3();\n\n/**\n * @private\n */\nScene.prototype.updateAndExecuteCommands = function (\n  passState,\n  backgroundColor\n) {\n  var frameState = this._frameState;\n  var mode = frameState.mode;\n  var useWebVR = this._environmentState.useWebVR;\n\n  if (useWebVR) {\n    executeWebVRCommands(this, passState, backgroundColor);\n  } else if (\n    mode !== SceneMode.SCENE2D ||\n    this._mapMode2D === MapMode2D.ROTATE\n  ) {\n    executeCommandsInViewport(true, this, passState, backgroundColor);\n  } else {\n    updateAndClearFramebuffers(this, passState, backgroundColor);\n    execute2DViewportCommands(this, passState);\n  }\n};\n\nfunction executeWebVRCommands(scene, passState, backgroundColor) {\n  var view = scene._view;\n  var camera = view.camera;\n  var environmentState = scene._environmentState;\n  var renderTranslucentDepthForPick =\n    environmentState.renderTranslucentDepthForPick;\n\n  updateAndClearFramebuffers(scene, passState, backgroundColor);\n\n  if (!renderTranslucentDepthForPick) {\n    updateAndRenderPrimitives(scene);\n  }\n\n  view.createPotentiallyVisibleSet(scene);\n\n  if (!renderTranslucentDepthForPick) {\n    executeComputeCommands(scene);\n    executeShadowMapCastCommands(scene);\n  }\n\n  // Based on Calculating Stereo pairs by Paul Bourke\n  // http://paulbourke.net/stereographics/stereorender/\n  var viewport = passState.viewport;\n  viewport.x = 0;\n  viewport.y = 0;\n  viewport.width = viewport.width * 0.5;\n\n  var savedCamera = Camera.clone(camera, scene._cameraVR);\n  savedCamera.frustum = camera.frustum;\n\n  var near = camera.frustum.near;\n  var fo = near * defaultValue(scene.focalLength, 5.0);\n  var eyeSeparation = defaultValue(scene.eyeSeparation, fo / 30.0);\n  var eyeTranslation = Cartesian3.multiplyByScalar(\n    savedCamera.right,\n    eyeSeparation * 0.5,\n    scratchEyeTranslation\n  );\n\n  camera.frustum.aspectRatio = viewport.width / viewport.height;\n\n  var offset = (0.5 * eyeSeparation * near) / fo;\n\n  Cartesian3.add(savedCamera.position, eyeTranslation, camera.position);\n  camera.frustum.xOffset = offset;\n\n  executeCommands(scene, passState);\n\n  viewport.x = viewport.width;\n\n  Cartesian3.subtract(savedCamera.position, eyeTranslation, camera.position);\n  camera.frustum.xOffset = -offset;\n\n  executeCommands(scene, passState);\n\n  Camera.clone(savedCamera, camera);\n}\n\nvar scratch2DViewportCartographic = new Cartographic(\n  Math.PI,\n  CesiumMath.PI_OVER_TWO\n);\nvar scratch2DViewportMaxCoord = new Cartesian3();\nvar scratch2DViewportSavedPosition = new Cartesian3();\nvar scratch2DViewportTransform = new Matrix4();\nvar scratch2DViewportCameraTransform = new Matrix4();\nvar scratch2DViewportEyePoint = new Cartesian3();\nvar scratch2DViewportWindowCoords = new Cartesian3();\nvar scratch2DViewport = new BoundingRectangle();\n\nfunction execute2DViewportCommands(scene, passState) {\n  var context = scene.context;\n  var frameState = scene.frameState;\n  var camera = scene.camera;\n\n  var originalViewport = passState.viewport;\n  var viewport = BoundingRectangle.clone(originalViewport, scratch2DViewport);\n  passState.viewport = viewport;\n\n  var maxCartographic = scratch2DViewportCartographic;\n  var maxCoord = scratch2DViewportMaxCoord;\n\n  var projection = scene.mapProjection;\n  projection.project(maxCartographic, maxCoord);\n\n  var position = Cartesian3.clone(\n    camera.position,\n    scratch2DViewportSavedPosition\n  );\n  var transform = Matrix4.clone(\n    camera.transform,\n    scratch2DViewportCameraTransform\n  );\n  var frustum = camera.frustum.clone();\n\n  camera._setTransform(Matrix4.IDENTITY);\n\n  var viewportTransformation = Matrix4.computeViewportTransformation(\n    viewport,\n    0.0,\n    1.0,\n    scratch2DViewportTransform\n  );\n  var projectionMatrix = camera.frustum.projectionMatrix;\n\n  var x = camera.positionWC.y;\n  var eyePoint = Cartesian3.fromElements(\n    CesiumMath.sign(x) * maxCoord.x - x,\n    0.0,\n    -camera.positionWC.x,\n    scratch2DViewportEyePoint\n  );\n  var windowCoordinates = Transforms.pointToGLWindowCoordinates(\n    projectionMatrix,\n    viewportTransformation,\n    eyePoint,\n    scratch2DViewportWindowCoords\n  );\n\n  windowCoordinates.x = Math.floor(windowCoordinates.x);\n\n  var viewportX = viewport.x;\n  var viewportWidth = viewport.width;\n\n  if (\n    x === 0.0 ||\n    windowCoordinates.x <= viewportX ||\n    windowCoordinates.x >= viewportX + viewportWidth\n  ) {\n    executeCommandsInViewport(true, scene, passState);\n  } else if (\n    Math.abs(viewportX + viewportWidth * 0.5 - windowCoordinates.x) < 1.0\n  ) {\n    viewport.width = windowCoordinates.x - viewport.x;\n\n    camera.position.x *= CesiumMath.sign(camera.position.x);\n\n    camera.frustum.right = 0.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(true, scene, passState);\n\n    viewport.x = windowCoordinates.x;\n\n    camera.position.x = -camera.position.x;\n\n    camera.frustum.right = -camera.frustum.left;\n    camera.frustum.left = 0.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(false, scene, passState);\n  } else if (windowCoordinates.x > viewportX + viewportWidth * 0.5) {\n    viewport.width = windowCoordinates.x - viewportX;\n\n    var right = camera.frustum.right;\n    camera.frustum.right = maxCoord.x - x;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(true, scene, passState);\n\n    viewport.x = windowCoordinates.x;\n    viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n\n    camera.position.x = -camera.position.x;\n\n    camera.frustum.left = -camera.frustum.right;\n    camera.frustum.right = right - camera.frustum.right * 2.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(false, scene, passState);\n  } else {\n    viewport.x = windowCoordinates.x;\n    viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n\n    var left = camera.frustum.left;\n    camera.frustum.left = -maxCoord.x - x;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(true, scene, passState);\n\n    viewport.x = viewportX;\n    viewport.width = windowCoordinates.x - viewportX;\n\n    camera.position.x = -camera.position.x;\n\n    camera.frustum.right = -camera.frustum.left;\n    camera.frustum.left = left - camera.frustum.left * 2.0;\n\n    frameState.cullingVolume = camera.frustum.computeCullingVolume(\n      camera.positionWC,\n      camera.directionWC,\n      camera.upWC\n    );\n    context.uniformState.update(frameState);\n\n    executeCommandsInViewport(false, scene, passState);\n  }\n\n  camera._setTransform(transform);\n  Cartesian3.clone(position, camera.position);\n  camera.frustum = frustum.clone();\n  passState.viewport = originalViewport;\n}\n\nfunction executeCommandsInViewport(\n  firstViewport,\n  scene,\n  passState,\n  backgroundColor\n) {\n  var environmentState = scene._environmentState;\n  var view = scene._view;\n  var renderTranslucentDepthForPick =\n    environmentState.renderTranslucentDepthForPick;\n\n  if (!firstViewport && !renderTranslucentDepthForPick) {\n    scene.frameState.commandList.length = 0;\n  }\n\n  if (!renderTranslucentDepthForPick) {\n    updateAndRenderPrimitives(scene);\n  }\n\n  view.createPotentiallyVisibleSet(scene);\n\n  if (firstViewport) {\n    if (defined(backgroundColor)) {\n      updateAndClearFramebuffers(scene, passState, backgroundColor);\n    }\n    if (!renderTranslucentDepthForPick) {\n      executeComputeCommands(scene);\n      executeShadowMapCastCommands(scene);\n    }\n  }\n\n  executeCommands(scene, passState);\n}\n\nvar scratchCullingVolume = new CullingVolume();\n\n/**\n * @private\n */\nScene.prototype.updateEnvironment = function () {\n  var frameState = this._frameState;\n  var view = this._view;\n\n  // Update celestial and terrestrial environment effects.\n  var environmentState = this._environmentState;\n  var renderPass = frameState.passes.render;\n  var offscreenPass = frameState.passes.offscreen;\n  var skyAtmosphere = this.skyAtmosphere;\n  var globe = this.globe;\n  var globeTranslucencyState = this._globeTranslucencyState;\n\n  if (\n    !renderPass ||\n    (this._mode !== SceneMode.SCENE2D &&\n      view.camera.frustum instanceof OrthographicFrustum) ||\n    !globeTranslucencyState.environmentVisible\n  ) {\n    environmentState.skyAtmosphereCommand = undefined;\n    environmentState.skyBoxCommand = undefined;\n    environmentState.sunDrawCommand = undefined;\n    environmentState.sunComputeCommand = undefined;\n    environmentState.moonCommand = undefined;\n  } else {\n    if (defined(skyAtmosphere)) {\n      if (defined(globe)) {\n        skyAtmosphere.setDynamicAtmosphereColor(\n          globe.enableLighting && globe.dynamicAtmosphereLighting,\n          globe.dynamicAtmosphereLightingFromSun\n        );\n        environmentState.isReadyForAtmosphere =\n          environmentState.isReadyForAtmosphere ||\n          globe._surface._tilesToRender.length > 0;\n      }\n      environmentState.skyAtmosphereCommand = skyAtmosphere.update(\n        frameState,\n        globe\n      );\n      if (defined(environmentState.skyAtmosphereCommand)) {\n        this.updateDerivedCommands(environmentState.skyAtmosphereCommand);\n      }\n    } else {\n      environmentState.skyAtmosphereCommand = undefined;\n    }\n\n    environmentState.skyBoxCommand = defined(this.skyBox)\n      ? this.skyBox.update(frameState, this._hdr)\n      : undefined;\n    var sunCommands = defined(this.sun)\n      ? this.sun.update(frameState, view.passState, this._hdr)\n      : undefined;\n    environmentState.sunDrawCommand = defined(sunCommands)\n      ? sunCommands.drawCommand\n      : undefined;\n    environmentState.sunComputeCommand = defined(sunCommands)\n      ? sunCommands.computeCommand\n      : undefined;\n    environmentState.moonCommand = defined(this.moon)\n      ? this.moon.update(frameState)\n      : undefined;\n  }\n\n  var clearGlobeDepth = (environmentState.clearGlobeDepth =\n    defined(globe) &&\n    globe.show &&\n    (!globe.depthTestAgainstTerrain || this.mode === SceneMode.SCENE2D));\n  var useDepthPlane = (environmentState.useDepthPlane =\n    clearGlobeDepth &&\n    this.mode === SceneMode.SCENE3D &&\n    globeTranslucencyState.useDepthPlane);\n  if (useDepthPlane) {\n    // Update the depth plane that is rendered in 3D when the primitives are\n    // not depth tested against terrain so primitives on the backface\n    // of the globe are not picked.\n    this._depthPlane.update(frameState);\n  }\n\n  environmentState.renderTranslucentDepthForPick = false;\n  environmentState.useWebVR =\n    this._useWebVR && this.mode !== SceneMode.SCENE2D && !offscreenPass;\n\n  var occluder =\n    frameState.mode === SceneMode.SCENE3D &&\n    !globeTranslucencyState.sunVisibleThroughGlobe\n      ? frameState.occluder\n      : undefined;\n  var cullingVolume = frameState.cullingVolume;\n\n  // get user culling volume minus the far plane.\n  var planes = scratchCullingVolume.planes;\n  for (var k = 0; k < 5; ++k) {\n    planes[k] = cullingVolume.planes[k];\n  }\n  cullingVolume = scratchCullingVolume;\n\n  // Determine visibility of celestial and terrestrial environment effects.\n  environmentState.isSkyAtmosphereVisible =\n    defined(environmentState.skyAtmosphereCommand) &&\n    environmentState.isReadyForAtmosphere;\n  environmentState.isSunVisible = this.isVisible(\n    environmentState.sunDrawCommand,\n    cullingVolume,\n    occluder\n  );\n  environmentState.isMoonVisible = this.isVisible(\n    environmentState.moonCommand,\n    cullingVolume,\n    occluder\n  );\n\n  var envMaps = this.specularEnvironmentMaps;\n  var envMapAtlas = this._specularEnvironmentMapAtlas;\n  if (\n    defined(envMaps) &&\n    (!defined(envMapAtlas) || envMapAtlas.url !== envMaps)\n  ) {\n    envMapAtlas = envMapAtlas && envMapAtlas.destroy();\n    this._specularEnvironmentMapAtlas = new OctahedralProjectedCubeMap(envMaps);\n  } else if (!defined(envMaps) && defined(envMapAtlas)) {\n    envMapAtlas.destroy();\n    this._specularEnvironmentMapAtlas = undefined;\n  }\n\n  if (defined(this._specularEnvironmentMapAtlas)) {\n    this._specularEnvironmentMapAtlas.update(frameState);\n  }\n};\n\nfunction updateDebugFrustumPlanes(scene) {\n  var frameState = scene._frameState;\n  if (scene.debugShowFrustumPlanes !== scene._debugShowFrustumPlanes) {\n    if (scene.debugShowFrustumPlanes) {\n      scene._debugFrustumPlanes = new DebugCameraPrimitive({\n        camera: scene.camera,\n        updateOnChange: false,\n        frustumSplits: frameState.frustumSplits,\n      });\n    } else {\n      scene._debugFrustumPlanes =\n        scene._debugFrustumPlanes && scene._debugFrustumPlanes.destroy();\n    }\n    scene._debugShowFrustumPlanes = scene.debugShowFrustumPlanes;\n  }\n\n  if (defined(scene._debugFrustumPlanes)) {\n    scene._debugFrustumPlanes.update(frameState);\n  }\n}\n\nfunction updateShadowMaps(scene) {\n  var frameState = scene._frameState;\n  var shadowMaps = frameState.shadowMaps;\n  var length = shadowMaps.length;\n\n  var shadowsEnabled =\n    length > 0 && !frameState.passes.pick && scene.mode === SceneMode.SCENE3D;\n  if (shadowsEnabled !== frameState.shadowState.shadowsEnabled) {\n    // Update derived commands when shadowsEnabled changes\n    ++frameState.shadowState.lastDirtyTime;\n    frameState.shadowState.shadowsEnabled = shadowsEnabled;\n  }\n\n  frameState.shadowState.lightShadowsEnabled = false;\n\n  if (!shadowsEnabled) {\n    return;\n  }\n\n  // Check if the shadow maps are different than the shadow maps last frame.\n  // If so, the derived commands need to be updated.\n  for (var j = 0; j < length; ++j) {\n    if (shadowMaps[j] !== frameState.shadowState.shadowMaps[j]) {\n      ++frameState.shadowState.lastDirtyTime;\n      break;\n    }\n  }\n\n  frameState.shadowState.shadowMaps.length = 0;\n  frameState.shadowState.lightShadowMaps.length = 0;\n\n  for (var i = 0; i < length; ++i) {\n    var shadowMap = shadowMaps[i];\n    shadowMap.update(frameState);\n\n    frameState.shadowState.shadowMaps.push(shadowMap);\n\n    if (shadowMap.fromLightSource) {\n      frameState.shadowState.lightShadowMaps.push(shadowMap);\n      frameState.shadowState.lightShadowsEnabled = true;\n    }\n\n    if (shadowMap.dirty) {\n      ++frameState.shadowState.lastDirtyTime;\n      shadowMap.dirty = false;\n    }\n  }\n}\n\nfunction updateAndRenderPrimitives(scene) {\n  var frameState = scene._frameState;\n\n  scene._groundPrimitives.update(frameState);\n  scene._primitives.update(frameState);\n\n  updateDebugFrustumPlanes(scene);\n  updateShadowMaps(scene);\n\n  if (scene._globe) {\n    scene._globe.render(frameState);\n  }\n}\n\nfunction updateAndClearFramebuffers(scene, passState, clearColor) {\n  var context = scene._context;\n  var frameState = scene._frameState;\n  var environmentState = scene._environmentState;\n  var view = scene._view;\n\n  var passes = scene._frameState.passes;\n  var picking = passes.pick;\n  var useWebVR = environmentState.useWebVR;\n\n  // Preserve the reference to the original framebuffer.\n  environmentState.originalFramebuffer = passState.framebuffer;\n\n  // Manage sun bloom post-processing effect.\n  if (defined(scene.sun) && scene.sunBloom !== scene._sunBloom) {\n    if (scene.sunBloom && !useWebVR) {\n      scene._sunPostProcess = new SunPostProcess();\n    } else if (defined(scene._sunPostProcess)) {\n      scene._sunPostProcess = scene._sunPostProcess.destroy();\n    }\n\n    scene._sunBloom = scene.sunBloom;\n  } else if (!defined(scene.sun) && defined(scene._sunPostProcess)) {\n    scene._sunPostProcess = scene._sunPostProcess.destroy();\n    scene._sunBloom = false;\n  }\n\n  // Clear the pass state framebuffer.\n  var clear = scene._clearColorCommand;\n  Color.clone(clearColor, clear.color);\n  clear.execute(context, passState);\n\n  // Update globe depth rendering based on the current context and clear the globe depth framebuffer.\n  // Globe depth is copied for the pick pass to support picking batched geometries in GroundPrimitives.\n  var useGlobeDepthFramebuffer = (environmentState.useGlobeDepthFramebuffer = defined(\n    view.globeDepth\n  ));\n  if (useGlobeDepthFramebuffer) {\n    view.globeDepth.update(\n      context,\n      passState,\n      view.viewport,\n      scene._hdr,\n      environmentState.clearGlobeDepth\n    );\n    view.globeDepth.clear(context, passState, clearColor);\n  }\n\n  // If supported, configure OIT to use the globe depth framebuffer and clear the OIT framebuffer.\n  var oit = view.oit;\n  var useOIT = (environmentState.useOIT =\n    !picking && defined(oit) && oit.isSupported());\n  if (useOIT) {\n    oit.update(context, passState, view.globeDepth.framebuffer, scene._hdr);\n    oit.clear(context, passState, clearColor);\n    environmentState.useOIT = oit.isSupported();\n  }\n\n  var postProcess = scene.postProcessStages;\n  var usePostProcess = (environmentState.usePostProcess =\n    !picking &&\n    (scene._hdr ||\n      postProcess.length > 0 ||\n      postProcess.ambientOcclusion.enabled ||\n      postProcess.fxaa.enabled ||\n      postProcess.bloom.enabled));\n  environmentState.usePostProcessSelected = false;\n  if (usePostProcess) {\n    view.sceneFramebuffer.update(context, view.viewport, scene._hdr);\n    view.sceneFramebuffer.clear(context, passState, clearColor);\n\n    postProcess.update(context, frameState.useLogDepth, scene._hdr);\n    postProcess.clear(context);\n\n    usePostProcess = environmentState.usePostProcess = postProcess.ready;\n    environmentState.usePostProcessSelected =\n      usePostProcess && postProcess.hasSelected;\n  }\n\n  if (environmentState.isSunVisible && scene.sunBloom && !useWebVR) {\n    passState.framebuffer = scene._sunPostProcess.update(passState);\n    scene._sunPostProcess.clear(context, passState, clearColor);\n  } else if (useGlobeDepthFramebuffer) {\n    passState.framebuffer = view.globeDepth.framebuffer;\n  } else if (usePostProcess) {\n    passState.framebuffer = view.sceneFramebuffer.getFramebuffer();\n  }\n\n  if (defined(passState.framebuffer)) {\n    clear.execute(context, passState);\n  }\n\n  var useInvertClassification = (environmentState.useInvertClassification =\n    !picking && defined(passState.framebuffer) && scene.invertClassification);\n  if (useInvertClassification) {\n    var depthFramebuffer;\n    if (scene.frameState.invertClassificationColor.alpha === 1.0) {\n      if (environmentState.useGlobeDepthFramebuffer) {\n        depthFramebuffer = view.globeDepth.framebuffer;\n      }\n    }\n\n    if (defined(depthFramebuffer) || context.depthTexture) {\n      scene._invertClassification.previousFramebuffer = depthFramebuffer;\n      scene._invertClassification.update(context);\n      scene._invertClassification.clear(context, passState);\n\n      if (scene.frameState.invertClassificationColor.alpha < 1.0 && useOIT) {\n        var command = scene._invertClassification.unclassifiedCommand;\n        var derivedCommands = command.derivedCommands;\n        derivedCommands.oit = oit.createDerivedCommands(\n          command,\n          context,\n          derivedCommands.oit\n        );\n      }\n    } else {\n      environmentState.useInvertClassification = false;\n    }\n  }\n\n  if (scene._globeTranslucencyState.translucent) {\n    view.globeTranslucencyFramebuffer.updateAndClear(\n      scene._hdr,\n      view.viewport,\n      context,\n      passState\n    );\n  }\n}\n\n/**\n * @private\n */\nScene.prototype.resolveFramebuffers = function (passState) {\n  var context = this._context;\n  var frameState = this._frameState;\n  var environmentState = this._environmentState;\n  var view = this._view;\n  var globeDepth = view.globeDepth;\n\n  var useOIT = environmentState.useOIT;\n  var useGlobeDepthFramebuffer = environmentState.useGlobeDepthFramebuffer;\n  var usePostProcess = environmentState.usePostProcess;\n\n  var defaultFramebuffer = environmentState.originalFramebuffer;\n  var globeFramebuffer = useGlobeDepthFramebuffer\n    ? globeDepth.framebuffer\n    : undefined;\n  var sceneFramebuffer = view.sceneFramebuffer.getFramebuffer();\n  var idFramebuffer = view.sceneFramebuffer.getIdFramebuffer();\n\n  if (environmentState.separatePrimitiveFramebuffer) {\n    // Merge primitive framebuffer into globe framebuffer\n    globeDepth.executeMergeColor(context, passState);\n  }\n\n  if (useOIT) {\n    passState.framebuffer = usePostProcess\n      ? sceneFramebuffer\n      : defaultFramebuffer;\n    view.oit.execute(context, passState);\n  }\n\n  if (usePostProcess) {\n    var inputFramebuffer = sceneFramebuffer;\n    if (useGlobeDepthFramebuffer && !useOIT) {\n      inputFramebuffer = globeFramebuffer;\n    }\n\n    var postProcess = this.postProcessStages;\n    var colorTexture = inputFramebuffer.getColorTexture(0);\n    var idTexture = idFramebuffer.getColorTexture(0);\n    var depthTexture = defaultValue(globeFramebuffer, sceneFramebuffer)\n      .depthStencilTexture;\n    postProcess.execute(context, colorTexture, depthTexture, idTexture);\n    postProcess.copy(context, defaultFramebuffer);\n  }\n\n  if (!useOIT && !usePostProcess && useGlobeDepthFramebuffer) {\n    passState.framebuffer = defaultFramebuffer;\n    globeDepth.executeCopyColor(context, passState);\n  }\n\n  var useLogDepth = frameState.useLogDepth;\n\n  if (this.debugShowGlobeDepth && useGlobeDepthFramebuffer) {\n    var gd = getDebugGlobeDepth(this, this.debugShowDepthFrustum - 1);\n    gd.executeDebugGlobeDepth(context, passState, useLogDepth);\n  }\n\n  if (this.debugShowPickDepth && useGlobeDepthFramebuffer) {\n    var pd = this._picking.getPickDepth(this, this.debugShowDepthFrustum - 1);\n    pd.executeDebugPickDepth(context, passState, useLogDepth);\n  }\n};\n\nfunction callAfterRenderFunctions(scene) {\n  // Functions are queued up during primitive update and executed here in case\n  // the function modifies scene state that should remain constant over the frame.\n  var functions = scene._frameState.afterRender;\n  for (var i = 0, length = functions.length; i < length; ++i) {\n    functions[i]();\n    scene.requestRender();\n  }\n\n  functions.length = 0;\n}\n\nfunction getGlobeHeight(scene) {\n  var globe = scene._globe;\n  var camera = scene.camera;\n  var cartographic = camera.positionCartographic;\n  if (defined(globe) && globe.show && defined(cartographic)) {\n    return globe.getHeight(cartographic);\n  }\n  return undefined;\n}\n\nfunction isCameraUnderground(scene) {\n  var camera = scene.camera;\n  var mode = scene._mode;\n  var globe = scene.globe;\n  var cameraController = scene._screenSpaceCameraController;\n  var cartographic = camera.positionCartographic;\n\n  if (!defined(cartographic)) {\n    return false;\n  }\n\n  if (!cameraController.onMap() && cartographic.height < 0.0) {\n    // The camera can go off the map while in Columbus View.\n    // Make a best guess as to whether it's underground by checking if its height is less than zero.\n    return true;\n  }\n\n  if (\n    !defined(globe) ||\n    !globe.show ||\n    mode === SceneMode.SCENE2D ||\n    mode === SceneMode.MORPHING\n  ) {\n    return false;\n  }\n\n  var globeHeight = scene._globeHeight;\n  return defined(globeHeight) && cartographic.height < globeHeight;\n}\n\n/**\n * @private\n */\nScene.prototype.initializeFrame = function () {\n  // Destroy released shaders and textures once every 120 frames to avoid thrashing the cache\n  if (this._shaderFrameCount++ === 120) {\n    this._shaderFrameCount = 0;\n    this._context.shaderCache.destroyReleasedShaderPrograms();\n    this._context.textureCache.destroyReleasedTextures();\n  }\n\n  this._tweens.update();\n\n  this._globeHeight = getGlobeHeight(this);\n  this._cameraUnderground = isCameraUnderground(this);\n  this._globeTranslucencyState.update(this);\n\n  this._screenSpaceCameraController.update();\n  if (defined(this._deviceOrientationCameraController)) {\n    this._deviceOrientationCameraController.update();\n  }\n\n  this.camera.update(this._mode);\n  this.camera._updateCameraChanged();\n};\n\nfunction updateDebugShowFramesPerSecond(scene, renderedThisFrame) {\n  if (scene.debugShowFramesPerSecond) {\n    if (!defined(scene._performanceDisplay)) {\n      var performanceContainer = document.createElement(\"div\");\n      performanceContainer.className =\n        \"cesium-performanceDisplay-defaultContainer\";\n      var container = scene._canvas.parentNode;\n      container.appendChild(performanceContainer);\n      var performanceDisplay = new PerformanceDisplay({\n        container: performanceContainer,\n      });\n      scene._performanceDisplay = performanceDisplay;\n      scene._performanceContainer = performanceContainer;\n    }\n\n    scene._performanceDisplay.throttled = scene.requestRenderMode;\n    scene._performanceDisplay.update(renderedThisFrame);\n  } else if (defined(scene._performanceDisplay)) {\n    scene._performanceDisplay =\n      scene._performanceDisplay && scene._performanceDisplay.destroy();\n    scene._performanceContainer.parentNode.removeChild(\n      scene._performanceContainer\n    );\n  }\n}\n\nfunction prePassesUpdate(scene) {\n  scene._jobScheduler.resetBudgets();\n\n  var frameState = scene._frameState;\n  var primitives = scene.primitives;\n  primitives.prePassesUpdate(frameState);\n\n  if (defined(scene.globe)) {\n    scene.globe.update(frameState);\n  }\n\n  scene._picking.update();\n  frameState.creditDisplay.update();\n}\n\nfunction postPassesUpdate(scene) {\n  var frameState = scene._frameState;\n  var primitives = scene.primitives;\n  primitives.postPassesUpdate(frameState);\n\n  RequestScheduler.update();\n}\n\nvar scratchBackgroundColor = new Color();\n\nfunction render(scene) {\n  var frameState = scene._frameState;\n\n  var context = scene.context;\n  var us = context.uniformState;\n\n  var view = scene._defaultView;\n  scene._view = view;\n\n  scene.updateFrameState();\n  frameState.passes.render = true;\n  frameState.passes.postProcess = scene.postProcessStages.hasSelected;\n  frameState.tilesetPassState = renderTilesetPassState;\n\n  var backgroundColor = defaultValue(scene.backgroundColor, Color.BLACK);\n  if (scene._hdr) {\n    backgroundColor = Color.clone(backgroundColor, scratchBackgroundColor);\n    backgroundColor.red = Math.pow(backgroundColor.red, scene.gamma);\n    backgroundColor.green = Math.pow(backgroundColor.green, scene.gamma);\n    backgroundColor.blue = Math.pow(backgroundColor.blue, scene.gamma);\n  }\n  frameState.backgroundColor = backgroundColor;\n\n  scene.fog.update(frameState);\n\n  us.update(frameState);\n\n  var shadowMap = scene.shadowMap;\n  if (defined(shadowMap) && shadowMap.enabled) {\n    if (!defined(scene.light) || scene.light instanceof SunLight) {\n      // Negate the sun direction so that it is from the Sun, not to the Sun\n      Cartesian3.negate(us.sunDirectionWC, scene._shadowMapCamera.direction);\n    } else {\n      Cartesian3.clone(scene.light.direction, scene._shadowMapCamera.direction);\n    }\n    frameState.shadowMaps.push(shadowMap);\n  }\n\n  scene._computeCommandList.length = 0;\n  scene._overlayCommandList.length = 0;\n\n  var viewport = view.viewport;\n  viewport.x = 0;\n  viewport.y = 0;\n  viewport.width = context.drawingBufferWidth;\n  viewport.height = context.drawingBufferHeight;\n\n  var passState = view.passState;\n  passState.framebuffer = undefined;\n  passState.blendingEnabled = undefined;\n  passState.scissorTest = undefined;\n  passState.viewport = BoundingRectangle.clone(viewport, passState.viewport);\n\n  if (defined(scene.globe)) {\n    scene.globe.beginFrame(frameState);\n  }\n\n  scene.updateEnvironment();\n  scene.updateAndExecuteCommands(passState, backgroundColor);\n  scene.resolveFramebuffers(passState);\n\n  passState.framebuffer = undefined;\n  executeOverlayCommands(scene, passState);\n\n  if (defined(scene.globe)) {\n    scene.globe.endFrame(frameState);\n\n    if (!scene.globe.tilesLoaded) {\n      scene._renderRequested = true;\n    }\n  }\n\n  context.endFrame();\n}\n\nfunction tryAndCatchError(scene, functionToExecute) {\n  try {\n    functionToExecute(scene);\n  } catch (error) {\n    scene._renderError.raiseEvent(scene, error);\n\n    if (scene.rethrowRenderErrors) {\n      throw error;\n    }\n  }\n}\n\nfunction updateMostDetailedRayPicks(scene) {\n  return scene._picking.updateMostDetailedRayPicks(scene);\n}\n\n/**\n * Update and render the scene. It is usually not necessary to call this function\n * directly because {@link CesiumWidget} or {@link Viewer} do it automatically.\n * @param {JulianDate} [time] The simulation time at which to render.\n */\nScene.prototype.render = function (time) {\n  /**\n   *\n   * Pre passes update. Execute any pass invariant code that should run before the passes here.\n   *\n   */\n  this._preUpdate.raiseEvent(this, time);\n\n  var frameState = this._frameState;\n  frameState.newFrame = false;\n\n  if (!defined(time)) {\n    time = JulianDate.now();\n  }\n\n  // Determine if shouldRender\n  var cameraChanged = this._view.checkForCameraUpdates(this);\n  var shouldRender =\n    !this.requestRenderMode ||\n    this._renderRequested ||\n    cameraChanged ||\n    this._logDepthBufferDirty ||\n    this._hdrDirty ||\n    this.mode === SceneMode.MORPHING;\n  if (\n    !shouldRender &&\n    defined(this.maximumRenderTimeChange) &&\n    defined(this._lastRenderTime)\n  ) {\n    var difference = Math.abs(\n      JulianDate.secondsDifference(this._lastRenderTime, time)\n    );\n    shouldRender = shouldRender || difference > this.maximumRenderTimeChange;\n  }\n\n  if (shouldRender) {\n    this._lastRenderTime = JulianDate.clone(time, this._lastRenderTime);\n    this._renderRequested = false;\n    this._logDepthBufferDirty = false;\n    this._hdrDirty = false;\n\n    var frameNumber = CesiumMath.incrementWrap(\n      frameState.frameNumber,\n      15000000.0,\n      1.0\n    );\n    updateFrameNumber(this, frameNumber, time);\n    frameState.newFrame = true;\n  }\n\n  tryAndCatchError(this, prePassesUpdate);\n\n  /**\n   *\n   * Passes update. Add any passes here\n   *\n   */\n  if (this.primitives.show) {\n    tryAndCatchError(this, updateMostDetailedRayPicks);\n    tryAndCatchError(this, updatePreloadPass);\n    tryAndCatchError(this, updatePreloadFlightPass);\n    if (!shouldRender) {\n      tryAndCatchError(this, updateRequestRenderModeDeferCheckPass);\n    }\n  }\n\n  this._postUpdate.raiseEvent(this, time);\n\n  if (shouldRender) {\n    this._preRender.raiseEvent(this, time);\n    frameState.creditDisplay.beginFrame();\n    tryAndCatchError(this, render);\n  }\n\n  /**\n   *\n   * Post passes update. Execute any pass invariant code that should run after the passes here.\n   *\n   */\n  updateDebugShowFramesPerSecond(this, shouldRender);\n  tryAndCatchError(this, postPassesUpdate);\n\n  // Often used to trigger events (so don't want in trycatch) that the user might be subscribed to. Things like the tile load events, ready promises, etc.\n  // We don't want those events to resolve during the render loop because the events might add new primitives\n  callAfterRenderFunctions(this);\n\n  if (shouldRender) {\n    this._postRender.raiseEvent(this, time);\n    frameState.creditDisplay.endFrame();\n  }\n};\n\n/**\n * Update and render the scene. Always forces a new render frame regardless of whether a render was\n * previously requested.\n * @param {JulianDate} [time] The simulation time at which to render.\n *\n * @private\n */\nScene.prototype.forceRender = function (time) {\n  this._renderRequested = true;\n  this.render(time);\n};\n\n/**\n * Requests a new rendered frame when {@link Scene#requestRenderMode} is set to <code>true</code>.\n * The render rate will not exceed the {@link CesiumWidget#targetFrameRate}.\n *\n * @see Scene#requestRenderMode\n */\nScene.prototype.requestRender = function () {\n  this._renderRequested = true;\n};\n\n/**\n * @private\n */\nScene.prototype.clampLineWidth = function (width) {\n  return Math.max(\n    ContextLimits.minimumAliasedLineWidth,\n    Math.min(width, ContextLimits.maximumAliasedLineWidth)\n  );\n};\n\n/**\n * Returns an object with a `primitive` property that contains the first (top) primitive in the scene\n * at a particular window coordinate or undefined if nothing is at the location. Other properties may\n * potentially be set depending on the type of primitive and may be used to further identify the picked object.\n * <p>\n * When a feature of a 3D Tiles tileset is picked, <code>pick</code> returns a {@link Cesium3DTileFeature} object.\n * </p>\n *\n * @example\n * // On mouse over, color the feature yellow.\n * handler.setInputAction(function(movement) {\n *     var feature = scene.pick(movement.endPosition);\n *     if (feature instanceof Cesium.Cesium3DTileFeature) {\n *         feature.color = Cesium.Color.YELLOW;\n *     }\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Number} [width=3] Width of the pick rectangle.\n * @param {Number} [height=3] Height of the pick rectangle.\n * @returns {Object} Object containing the picked primitive.\n */\nScene.prototype.pick = function (windowPosition, width, height) {\n  return this._picking.pick(this, windowPosition, width, height);\n};\n\n/**\n * Returns the cartesian position reconstructed from the depth buffer and window position.\n * The returned position is in world coordinates. Used internally by camera functions to\n * prevent conversion to projected 2D coordinates and then back.\n * <p>\n * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n * translucent primitives; otherwise, this essentially picks through translucent primitives.\n * </p>\n *\n * @private\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Cartesian3} [result] The object on which to restore the result.\n * @returns {Cartesian3} The cartesian position in world coordinates.\n *\n * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n */\nScene.prototype.pickPositionWorldCoordinates = function (\n  windowPosition,\n  result\n) {\n  return this._picking.pickPositionWorldCoordinates(\n    this,\n    windowPosition,\n    result\n  );\n};\n\n/**\n * Returns the cartesian position reconstructed from the depth buffer and window position.\n * <p>\n * The position reconstructed from the depth buffer in 2D may be slightly different from those\n * reconstructed in 3D and Columbus view. This is caused by the difference in the distribution\n * of depth values of perspective and orthographic projection.\n * </p>\n * <p>\n * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n * translucent primitives; otherwise, this essentially picks through translucent primitives.\n * </p>\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Cartesian3} [result] The object on which to restore the result.\n * @returns {Cartesian3} The cartesian position.\n *\n * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n */\nScene.prototype.pickPosition = function (windowPosition, result) {\n  return this._picking.pickPosition(this, windowPosition, result);\n};\n\n/**\n * Returns a list of objects, each containing a `primitive` property, for all primitives at\n * a particular window coordinate position. Other properties may also be set depending on the\n * type of primitive and may be used to further identify the picked object. The primitives in\n * the list are ordered by their visual order in the scene (front to back).\n *\n * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n * @param {Number} [limit] If supplied, stop drilling after collecting this many picks.\n * @param {Number} [width=3] Width of the pick rectangle.\n * @param {Number} [height=3] Height of the pick rectangle.\n * @returns {Array.<*>} Array of objects, each containing 1 picked primitives.\n *\n * @exception {DeveloperError} windowPosition is undefined.\n *\n * @example\n * var pickedObjects = scene.drillPick(new Cesium.Cartesian2(100.0, 200.0));\n *\n * @see Scene#pick\n */\nScene.prototype.drillPick = function (windowPosition, limit, width, height) {\n  return this._picking.drillPick(this, windowPosition, limit, width, height);\n};\n\nfunction updatePreloadPass(scene) {\n  var frameState = scene._frameState;\n  preloadTilesetPassState.camera = frameState.camera;\n  preloadTilesetPassState.cullingVolume = frameState.cullingVolume;\n\n  var primitives = scene.primitives;\n  primitives.updateForPass(frameState, preloadTilesetPassState);\n}\n\nfunction updatePreloadFlightPass(scene) {\n  var frameState = scene._frameState;\n  var camera = frameState.camera;\n  if (!camera.canPreloadFlight()) {\n    return;\n  }\n\n  preloadFlightTilesetPassState.camera = scene.preloadFlightCamera;\n  preloadFlightTilesetPassState.cullingVolume =\n    scene.preloadFlightCullingVolume;\n\n  var primitives = scene.primitives;\n  primitives.updateForPass(frameState, preloadFlightTilesetPassState);\n}\n\nfunction updateRequestRenderModeDeferCheckPass(scene) {\n  // Check if any ignored requests are ready to go (to wake rendering up again)\n  scene.primitives.updateForPass(\n    scene._frameState,\n    requestRenderModeDeferCheckPassState\n  );\n}\n\n/**\n * Returns an object containing the first object intersected by the ray and the position of intersection,\n * or <code>undefined</code> if there were no intersections. The intersected object has a <code>primitive</code>\n * property that contains the intersected primitive. Other properties may be set depending on the type of primitive\n * and may be used to further identify the picked object. The ray must be given in world coordinates.\n * <p>\n * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n * primitives regardless of their visibility.\n * </p>\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Object} An object containing the object and position of the first intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.pickFromRay = function (ray, objectsToExclude, width) {\n  return this._picking.pickFromRay(this, ray, objectsToExclude, width);\n};\n\n/**\n * Returns a list of objects, each containing the object intersected by the ray and the position of intersection.\n * The intersected object has a <code>primitive</code> property that contains the intersected primitive. Other\n * properties may also be set depending on the type of primitive and may be used to further identify the picked object.\n * The primitives in the list are ordered by first intersection to last intersection. The ray must be given in\n * world coordinates.\n * <p>\n * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n * primitives regardless of their visibility.\n * </p>\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Object[]} List of objects containing the object and position of each intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.drillPickFromRay = function (\n  ray,\n  limit,\n  objectsToExclude,\n  width\n) {\n  return this._picking.drillPickFromRay(\n    this,\n    ray,\n    limit,\n    objectsToExclude,\n    width\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#pickFromRay} request using the maximum level of detail for 3D Tilesets\n * regardless of visibility.\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Object>} A promise that resolves to an object containing the object and position of the first intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.pickFromRayMostDetailed = function (\n  ray,\n  objectsToExclude,\n  width\n) {\n  return this._picking.pickFromRayMostDetailed(\n    this,\n    ray,\n    objectsToExclude,\n    width\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#drillPickFromRay} request using the maximum level of detail for 3D Tilesets\n * regardless of visibility.\n *\n * @private\n *\n * @param {Ray} ray The ray.\n * @param {Number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Object[]>} A promise that resolves to a list of objects containing the object and position of each intersection.\n *\n * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n */\nScene.prototype.drillPickFromRayMostDetailed = function (\n  ray,\n  limit,\n  objectsToExclude,\n  width\n) {\n  return this._picking.drillPickFromRayMostDetailed(\n    this,\n    ray,\n    limit,\n    objectsToExclude,\n    width\n  );\n};\n\n/**\n * Returns the height of scene geometry at the given cartographic position or <code>undefined</code> if there was no\n * scene geometry to sample height from. The height of the input position is ignored. May be used to clamp objects to\n * the globe, 3D Tiles, or primitives in the scene.\n * <p>\n * This function only samples height from globe tiles and 3D Tiles that are rendered in the current view. Samples height\n * from all other primitives regardless of their visibility.\n * </p>\n *\n * @param {Cartographic} position The cartographic position to sample height from.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Number} The height. This may be <code>undefined</code> if there was no scene geometry to sample height from.\n *\n * @example\n * var position = new Cesium.Cartographic(-1.31968, 0.698874);\n * var height = viewer.scene.sampleHeight(position);\n * console.log(height);\n *\n * @see Scene#clampToHeight\n * @see Scene#clampToHeightMostDetailed\n * @see Scene#sampleHeightMostDetailed\n *\n * @exception {DeveloperError} sampleHeight is only supported in 3D mode.\n * @exception {DeveloperError} sampleHeight requires depth texture support. Check sampleHeightSupported.\n */\nScene.prototype.sampleHeight = function (position, objectsToExclude, width) {\n  return this._picking.sampleHeight(this, position, objectsToExclude, width);\n};\n\n/**\n * Clamps the given cartesian position to the scene geometry along the geodetic surface normal. Returns the\n * clamped position or <code>undefined</code> if there was no scene geometry to clamp to. May be used to clamp\n * objects to the globe, 3D Tiles, or primitives in the scene.\n * <p>\n * This function only clamps to globe tiles and 3D Tiles that are rendered in the current view. Clamps to\n * all other primitives regardless of their visibility.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian position.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @param {Cartesian3} [result] An optional object to return the clamped position.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided. This may be <code>undefined</code> if there was no scene geometry to clamp to.\n *\n * @example\n * // Clamp an entity to the underlying scene geometry\n * var position = entity.position.getValue(Cesium.JulianDate.now());\n * entity.position = viewer.scene.clampToHeight(position);\n *\n * @see Scene#sampleHeight\n * @see Scene#sampleHeightMostDetailed\n * @see Scene#clampToHeightMostDetailed\n *\n * @exception {DeveloperError} clampToHeight is only supported in 3D mode.\n * @exception {DeveloperError} clampToHeight requires depth texture support. Check clampToHeightSupported.\n */\nScene.prototype.clampToHeight = function (\n  cartesian,\n  objectsToExclude,\n  width,\n  result\n) {\n  return this._picking.clampToHeight(\n    this,\n    cartesian,\n    objectsToExclude,\n    width,\n    result\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#sampleHeight} query for an array of {@link Cartographic} positions\n * using the maximum level of detail for 3D Tilesets in the scene. The height of the input positions is ignored.\n * Returns a promise that is resolved when the query completes. Each point height is modified in place.\n * If a height cannot be determined because no geometry can be sampled at that location, or another error occurs,\n * the height is set to undefined.\n *\n * @param {Cartographic[]} positions The cartographic positions to update with sampled heights.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Cartographic[]>} A promise that resolves to the provided list of positions when the query has completed.\n *\n * @example\n * var positions = [\n *     new Cesium.Cartographic(-1.31968, 0.69887),\n *     new Cesium.Cartographic(-1.10489, 0.83923)\n * ];\n * var promise = viewer.scene.sampleHeightMostDetailed(positions);\n * promise.then(function(updatedPosition) {\n *     // positions[0].height and positions[1].height have been updated.\n *     // updatedPositions is just a reference to positions.\n * }\n *\n * @see Scene#sampleHeight\n *\n * @exception {DeveloperError} sampleHeightMostDetailed is only supported in 3D mode.\n * @exception {DeveloperError} sampleHeightMostDetailed requires depth texture support. Check sampleHeightSupported.\n */\nScene.prototype.sampleHeightMostDetailed = function (\n  positions,\n  objectsToExclude,\n  width\n) {\n  return this._picking.sampleHeightMostDetailed(\n    this,\n    positions,\n    objectsToExclude,\n    width\n  );\n};\n\n/**\n * Initiates an asynchronous {@link Scene#clampToHeight} query for an array of {@link Cartesian3} positions\n * using the maximum level of detail for 3D Tilesets in the scene. Returns a promise that is resolved when\n * the query completes. Each position is modified in place. If a position cannot be clamped because no geometry\n * can be sampled at that location, or another error occurs, the element in the array is set to undefined.\n *\n * @param {Cartesian3[]} cartesians The cartesian positions to update with clamped positions.\n * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n * @param {Number} [width=0.1] Width of the intersection volume in meters.\n * @returns {Promise.<Cartesian3[]>} A promise that resolves to the provided list of positions when the query has completed.\n *\n * @example\n * var cartesians = [\n *     entities[0].position.getValue(Cesium.JulianDate.now()),\n *     entities[1].position.getValue(Cesium.JulianDate.now())\n * ];\n * var promise = viewer.scene.clampToHeightMostDetailed(cartesians);\n * promise.then(function(updatedCartesians) {\n *     entities[0].position = updatedCartesians[0];\n *     entities[1].position = updatedCartesians[1];\n * }\n *\n * @see Scene#clampToHeight\n *\n * @exception {DeveloperError} clampToHeightMostDetailed is only supported in 3D mode.\n * @exception {DeveloperError} clampToHeightMostDetailed requires depth texture support. Check clampToHeightSupported.\n */\nScene.prototype.clampToHeightMostDetailed = function (\n  cartesians,\n  objectsToExclude,\n  width\n) {\n  return this._picking.clampToHeightMostDetailed(\n    this,\n    cartesians,\n    objectsToExclude,\n    width\n  );\n};\n\n/**\n * Transforms a position in cartesian coordinates to canvas coordinates.  This is commonly used to place an\n * HTML element at the same screen position as an object in the scene.\n *\n * @param {Cartesian3} position The position in cartesian coordinates.\n * @param {Cartesian2} [result] An optional object to return the input position transformed to canvas coordinates.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.  This may be <code>undefined</code> if the input position is near the center of the ellipsoid.\n *\n * @example\n * // Output the canvas position of longitude/latitude (0, 0) every time the mouse moves.\n * var scene = widget.scene;\n * var ellipsoid = scene.globe.ellipsoid;\n * var position = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n * var handler = new Cesium.ScreenSpaceEventHandler(scene.canvas);\n * handler.setInputAction(function(movement) {\n *     console.log(scene.cartesianToCanvasCoordinates(position));\n * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n */\nScene.prototype.cartesianToCanvasCoordinates = function (position, result) {\n  return SceneTransforms.wgs84ToWindowCoordinates(this, position, result);\n};\n\n/**\n * Instantly completes an active transition.\n */\nScene.prototype.completeMorph = function () {\n  this._transitioner.completeMorph();\n};\n\n/**\n * Asynchronously transitions the scene to 2D.\n * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphTo2D = function (duration) {\n  var ellipsoid;\n  var globe = this.globe;\n  if (defined(globe)) {\n    ellipsoid = globe.ellipsoid;\n  } else {\n    ellipsoid = this.mapProjection.ellipsoid;\n  }\n  duration = defaultValue(duration, 2.0);\n  this._transitioner.morphTo2D(duration, ellipsoid);\n};\n\n/**\n * Asynchronously transitions the scene to Columbus View.\n * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphToColumbusView = function (duration) {\n  var ellipsoid;\n  var globe = this.globe;\n  if (defined(globe)) {\n    ellipsoid = globe.ellipsoid;\n  } else {\n    ellipsoid = this.mapProjection.ellipsoid;\n  }\n  duration = defaultValue(duration, 2.0);\n  this._transitioner.morphToColumbusView(duration, ellipsoid);\n};\n\n/**\n * Asynchronously transitions the scene to 3D.\n * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n */\nScene.prototype.morphTo3D = function (duration) {\n  var ellipsoid;\n  var globe = this.globe;\n  if (defined(globe)) {\n    ellipsoid = globe.ellipsoid;\n  } else {\n    ellipsoid = this.mapProjection.ellipsoid;\n  }\n  duration = defaultValue(duration, 2.0);\n  this._transitioner.morphTo3D(duration, ellipsoid);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see Scene#destroy\n */\nScene.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * scene = scene && scene.destroy();\n *\n * @see Scene#isDestroyed\n */\nScene.prototype.destroy = function () {\n  this._tweens.removeAll();\n  this._computeEngine = this._computeEngine && this._computeEngine.destroy();\n  this._screenSpaceCameraController =\n    this._screenSpaceCameraController &&\n    this._screenSpaceCameraController.destroy();\n  this._deviceOrientationCameraController =\n    this._deviceOrientationCameraController &&\n    !this._deviceOrientationCameraController.isDestroyed() &&\n    this._deviceOrientationCameraController.destroy();\n  this._primitives = this._primitives && this._primitives.destroy();\n  this._groundPrimitives =\n    this._groundPrimitives && this._groundPrimitives.destroy();\n  this._globe = this._globe && this._globe.destroy();\n  this.skyBox = this.skyBox && this.skyBox.destroy();\n  this.skyAtmosphere = this.skyAtmosphere && this.skyAtmosphere.destroy();\n  this._debugSphere = this._debugSphere && this._debugSphere.destroy();\n  this.sun = this.sun && this.sun.destroy();\n  this._sunPostProcess = this._sunPostProcess && this._sunPostProcess.destroy();\n  this._depthPlane = this._depthPlane && this._depthPlane.destroy();\n  this._transitioner = this._transitioner && this._transitioner.destroy();\n  this._debugFrustumPlanes =\n    this._debugFrustumPlanes && this._debugFrustumPlanes.destroy();\n  this._brdfLutGenerator =\n    this._brdfLutGenerator && this._brdfLutGenerator.destroy();\n  this._picking = this._picking && this._picking.destroy();\n\n  this._defaultView = this._defaultView && this._defaultView.destroy();\n  this._view = undefined;\n\n  if (this._removeCreditContainer) {\n    this._canvas.parentNode.removeChild(this._creditContainer);\n  }\n\n  this.postProcessStages =\n    this.postProcessStages && this.postProcessStages.destroy();\n\n  this._context = this._context && this._context.destroy();\n  this._frameState.creditDisplay =\n    this._frameState.creditDisplay && this._frameState.creditDisplay.destroy();\n\n  if (defined(this._performanceDisplay)) {\n    this._performanceDisplay =\n      this._performanceDisplay && this._performanceDisplay.destroy();\n    this._performanceContainer.parentNode.removeChild(\n      this._performanceContainer\n    );\n  }\n\n  this._removeRequestListenerCallback();\n  this._removeTaskProcessorListenerCallback();\n  for (var i = 0; i < this._removeGlobeCallbacks.length; ++i) {\n    this._removeGlobeCallbacks[i]();\n  }\n  this._removeGlobeCallbacks.length = 0;\n\n  return destroyObject(this);\n};\nexport default Scene;\n"]},"metadata":{},"sourceType":"module"}