{"ast":null,"code":"import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PlaneGeometry from \"../Core/PlaneGeometry.js\";\nimport PlaneOutlineGeometry from \"../Core/PlaneOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\nvar positionScratch = new Cartesian3();\nvar scratchColor = new Color();\n\nfunction PlaneGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.plane = undefined;\n  this.dimensions = undefined;\n}\n/**\n * A {@link GeometryUpdater} for planes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PlaneGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\n\n\nfunction PlaneGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PlaneGeometryOptions(entity),\n    geometryPropertyName: \"plane\",\n    observedPropertyNames: [\"availability\", \"position\", \"orientation\", \"plane\"]\n  });\n\n  this._onEntityPropertyChanged(entity, \"plane\", entity.plane, undefined);\n}\n\nif (defined(Object.create)) {\n  PlaneGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  PlaneGeometryUpdater.prototype.constructor = PlaneGeometryUpdater;\n}\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\n\n\nPlaneGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\"This instance does not represent a filled geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var attributes;\n  var color;\n  var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n  var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n\n    if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute\n    };\n  }\n\n  var planeGraphics = entity.plane;\n  var options = this._options;\n  var modelMatrix = entity.computeModelMatrix(time);\n  var plane = Property.getValueOrDefault(planeGraphics.plane, time, options.plane);\n  var dimensions = Property.getValueOrUndefined(planeGraphics.dimensions, time, options.dimensions);\n  options.plane = plane;\n  options.dimensions = dimensions;\n  modelMatrix = createPrimitiveMatrix(plane, dimensions, modelMatrix, modelMatrix);\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PlaneGeometry(this._options),\n    modelMatrix: modelMatrix,\n    attributes: attributes\n  });\n};\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\n\n\nPlaneGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\"This instance does not represent an outlined geometry.\");\n  } //>>includeEnd('debug');\n\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n  var planeGraphics = entity.plane;\n  var options = this._options;\n  var modelMatrix = entity.computeModelMatrix(time);\n  var plane = Property.getValueOrDefault(planeGraphics.plane, time, options.plane);\n  var dimensions = Property.getValueOrUndefined(planeGraphics.dimensions, time, options.dimensions);\n  options.plane = plane;\n  options.dimensions = dimensions;\n  modelMatrix = createPrimitiveMatrix(plane, dimensions, modelMatrix, modelMatrix);\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PlaneOutlineGeometry(),\n    modelMatrix: modelMatrix,\n    attributes: {\n      show: new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n      color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n      distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n    }\n  });\n};\n\nPlaneGeometryUpdater.prototype._isHidden = function (entity, plane) {\n  return !defined(plane.plane) || !defined(plane.dimensions) || !defined(entity.position) || GeometryUpdater.prototype._isHidden.call(this, entity, plane);\n};\n\nPlaneGeometryUpdater.prototype._getIsClosed = function (options) {\n  return false;\n};\n\nPlaneGeometryUpdater.prototype._isDynamic = function (entity, plane) {\n  return !entity.position.isConstant || //\n  !Property.isConstant(entity.orientation) || //\n  !plane.plane.isConstant || //\n  !plane.dimensions.isConstant || //\n  !Property.isConstant(plane.outlineWidth);\n};\n\nPlaneGeometryUpdater.prototype._setStaticOptions = function (entity, plane) {\n  var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n  var options = this._options;\n  options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.plane = plane.plane.getValue(Iso8601.MINIMUM_VALUE, options.plane);\n  options.dimensions = plane.dimensions.getValue(Iso8601.MINIMUM_VALUE, options.dimensions);\n};\n\nPlaneGeometryUpdater.DynamicGeometryUpdater = DynamicPlaneGeometryUpdater;\n/**\n * @private\n */\n\nfunction DynamicPlaneGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n  DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n}\n\nif (defined(Object.create)) {\n  DynamicPlaneGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n  DynamicPlaneGeometryUpdater.prototype.constructor = DynamicPlaneGeometryUpdater;\n}\n\nDynamicPlaneGeometryUpdater.prototype._isHidden = function (entity, plane, time) {\n  var options = this._options;\n  var position = Property.getValueOrUndefined(entity.position, time, positionScratch);\n  return !defined(position) || !defined(options.plane) || !defined(options.dimensions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, plane, time);\n};\n\nDynamicPlaneGeometryUpdater.prototype._setOptions = function (entity, plane, time) {\n  var options = this._options;\n  options.plane = Property.getValueOrDefault(plane.plane, time, options.plane);\n  options.dimensions = Property.getValueOrUndefined(plane.dimensions, time, options.dimensions);\n};\n\nvar scratchAxis = new Cartesian3();\nvar scratchUp = new Cartesian3();\nvar scratchTranslation = new Cartesian3();\nvar scratchScale = new Cartesian3();\nvar scratchRotation = new Matrix3();\nvar scratchRotationScale = new Matrix3();\nvar scratchLocalTransform = new Matrix4();\n\nfunction createPrimitiveMatrix(plane, dimensions, transform, result) {\n  var normal = plane.normal;\n  var distance = plane.distance;\n  var translation = Cartesian3.multiplyByScalar(normal, -distance, scratchTranslation);\n  var up = Cartesian3.clone(Cartesian3.UNIT_Z, scratchUp);\n\n  if (CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(up, normal)), 1.0, CesiumMath.EPSILON8)) {\n    up = Cartesian3.clone(Cartesian3.UNIT_Y, up);\n  }\n\n  var left = Cartesian3.cross(up, normal, scratchAxis);\n  up = Cartesian3.cross(normal, left, up);\n  Cartesian3.normalize(left, left);\n  Cartesian3.normalize(up, up);\n  var rotationMatrix = scratchRotation;\n  Matrix3.setColumn(rotationMatrix, 0, left, rotationMatrix);\n  Matrix3.setColumn(rotationMatrix, 1, up, rotationMatrix);\n  Matrix3.setColumn(rotationMatrix, 2, normal, rotationMatrix);\n  var scale = Cartesian3.fromElements(dimensions.x, dimensions.y, 1.0, scratchScale);\n  var rotationScaleMatrix = Matrix3.multiplyByScale(rotationMatrix, scale, scratchRotationScale);\n  var localTransform = Matrix4.fromRotationTranslation(rotationScaleMatrix, translation, scratchLocalTransform);\n  return Matrix4.multiplyTransformation(transform, localTransform, result);\n}\n/**\n * @private\n */\n\n\nPlaneGeometryUpdater.createPrimitiveMatrix = createPrimitiveMatrix;\nexport default PlaneGeometryUpdater;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/DataSources/PlaneGeometryUpdater.js"],"names":["Cartesian3","Check","Color","ColorGeometryInstanceAttribute","defined","DeveloperError","DistanceDisplayConditionGeometryInstanceAttribute","GeometryInstance","Iso8601","CesiumMath","Matrix3","Matrix4","PlaneGeometry","PlaneOutlineGeometry","ShowGeometryInstanceAttribute","MaterialAppearance","PerInstanceColorAppearance","ColorMaterialProperty","DynamicGeometryUpdater","GeometryUpdater","Property","positionScratch","scratchColor","PlaneGeometryOptions","entity","id","vertexFormat","undefined","plane","dimensions","PlaneGeometryUpdater","scene","call","geometryOptions","geometryPropertyName","observedPropertyNames","_onEntityPropertyChanged","Object","create","prototype","constructor","createFillGeometryInstance","time","_fillEnabled","_entity","isAvailable","attributes","color","show","isShowing","_showProperty","getValue","_fillProperty","distanceDisplayCondition","_distanceDisplayConditionProperty","distanceDisplayConditionAttribute","fromDistanceDisplayCondition","_materialProperty","currentColor","isConstant","WHITE","fromColor","planeGraphics","options","_options","modelMatrix","computeModelMatrix","getValueOrDefault","getValueOrUndefined","createPrimitiveMatrix","geometry","createOutlineGeometryInstance","_outlineEnabled","outlineColor","_outlineColorProperty","BLACK","_showOutlineProperty","_isHidden","position","_getIsClosed","_isDynamic","orientation","outlineWidth","_setStaticOptions","isColorMaterial","VERTEX_FORMAT","MaterialSupport","TEXTURED","MINIMUM_VALUE","DynamicPlaneGeometryUpdater","geometryUpdater","primitives","groundPrimitives","_setOptions","scratchAxis","scratchUp","scratchTranslation","scratchScale","scratchRotation","scratchRotationScale","scratchLocalTransform","transform","result","normal","distance","translation","multiplyByScalar","up","clone","UNIT_Z","equalsEpsilon","Math","abs","dot","EPSILON8","UNIT_Y","left","cross","normalize","rotationMatrix","setColumn","scale","fromElements","x","y","rotationScaleMatrix","multiplyByScale","localTransform","fromRotationTranslation","multiplyTransformation"],"mappings":"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","sourcesContent":["import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PlaneGeometry from \"../Core/PlaneGeometry.js\";\nimport PlaneOutlineGeometry from \"../Core/PlaneOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nvar positionScratch = new Cartesian3();\nvar scratchColor = new Color();\n\nfunction PlaneGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.plane = undefined;\n  this.dimensions = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for planes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PlaneGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction PlaneGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PlaneGeometryOptions(entity),\n    geometryPropertyName: \"plane\",\n    observedPropertyNames: [\"availability\", \"position\", \"orientation\", \"plane\"],\n  });\n\n  this._onEntityPropertyChanged(entity, \"plane\", entity.plane, undefined);\n}\n\nif (defined(Object.create)) {\n  PlaneGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  PlaneGeometryUpdater.prototype.constructor = PlaneGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nPlaneGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n\n  var attributes;\n\n  var color;\n  var show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time)\n  );\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n  var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n    distanceDisplayCondition\n  );\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    var currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color,\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n    };\n  }\n\n  var planeGraphics = entity.plane;\n  var options = this._options;\n  var modelMatrix = entity.computeModelMatrix(time);\n  var plane = Property.getValueOrDefault(\n    planeGraphics.plane,\n    time,\n    options.plane\n  );\n  var dimensions = Property.getValueOrUndefined(\n    planeGraphics.dimensions,\n    time,\n    options.dimensions\n  );\n\n  options.plane = plane;\n  options.dimensions = dimensions;\n\n  modelMatrix = createPrimitiveMatrix(\n    plane,\n    dimensions,\n    modelMatrix,\n    modelMatrix\n  );\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PlaneGeometry(this._options),\n    modelMatrix: modelMatrix,\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nPlaneGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var entity = this._entity;\n  var isAvailable = entity.isAvailable(time);\n  var outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  var planeGraphics = entity.plane;\n  var options = this._options;\n  var modelMatrix = entity.computeModelMatrix(time);\n  var plane = Property.getValueOrDefault(\n    planeGraphics.plane,\n    time,\n    options.plane\n  );\n  var dimensions = Property.getValueOrUndefined(\n    planeGraphics.dimensions,\n    time,\n    options.dimensions\n  );\n\n  options.plane = plane;\n  options.dimensions = dimensions;\n\n  modelMatrix = createPrimitiveMatrix(\n    plane,\n    dimensions,\n    modelMatrix,\n    modelMatrix\n  );\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PlaneOutlineGeometry(),\n    modelMatrix: modelMatrix,\n    attributes: {\n      show: new ShowGeometryInstanceAttribute(\n        isAvailable &&\n          entity.isShowing &&\n          this._showProperty.getValue(time) &&\n          this._showOutlineProperty.getValue(time)\n      ),\n      color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n      distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n        distanceDisplayCondition\n      ),\n    },\n  });\n};\n\nPlaneGeometryUpdater.prototype._isHidden = function (entity, plane) {\n  return (\n    !defined(plane.plane) ||\n    !defined(plane.dimensions) ||\n    !defined(entity.position) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, plane)\n  );\n};\n\nPlaneGeometryUpdater.prototype._getIsClosed = function (options) {\n  return false;\n};\n\nPlaneGeometryUpdater.prototype._isDynamic = function (entity, plane) {\n  return (\n    !entity.position.isConstant || //\n    !Property.isConstant(entity.orientation) || //\n    !plane.plane.isConstant || //\n    !plane.dimensions.isConstant || //\n    !Property.isConstant(plane.outlineWidth)\n  );\n};\n\nPlaneGeometryUpdater.prototype._setStaticOptions = function (entity, plane) {\n  var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n\n  var options = this._options;\n  options.vertexFormat = isColorMaterial\n    ? PerInstanceColorAppearance.VERTEX_FORMAT\n    : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.plane = plane.plane.getValue(Iso8601.MINIMUM_VALUE, options.plane);\n  options.dimensions = plane.dimensions.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.dimensions\n  );\n};\n\nPlaneGeometryUpdater.DynamicGeometryUpdater = DynamicPlaneGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicPlaneGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicPlaneGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicPlaneGeometryUpdater.prototype.constructor = DynamicPlaneGeometryUpdater;\n}\n\nDynamicPlaneGeometryUpdater.prototype._isHidden = function (\n  entity,\n  plane,\n  time\n) {\n  var options = this._options;\n  var position = Property.getValueOrUndefined(\n    entity.position,\n    time,\n    positionScratch\n  );\n  return (\n    !defined(position) ||\n    !defined(options.plane) ||\n    !defined(options.dimensions) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(this, entity, plane, time)\n  );\n};\n\nDynamicPlaneGeometryUpdater.prototype._setOptions = function (\n  entity,\n  plane,\n  time\n) {\n  var options = this._options;\n  options.plane = Property.getValueOrDefault(plane.plane, time, options.plane);\n  options.dimensions = Property.getValueOrUndefined(\n    plane.dimensions,\n    time,\n    options.dimensions\n  );\n};\n\nvar scratchAxis = new Cartesian3();\nvar scratchUp = new Cartesian3();\nvar scratchTranslation = new Cartesian3();\nvar scratchScale = new Cartesian3();\nvar scratchRotation = new Matrix3();\nvar scratchRotationScale = new Matrix3();\nvar scratchLocalTransform = new Matrix4();\nfunction createPrimitiveMatrix(plane, dimensions, transform, result) {\n  var normal = plane.normal;\n  var distance = plane.distance;\n\n  var translation = Cartesian3.multiplyByScalar(\n    normal,\n    -distance,\n    scratchTranslation\n  );\n\n  var up = Cartesian3.clone(Cartesian3.UNIT_Z, scratchUp);\n  if (\n    CesiumMath.equalsEpsilon(\n      Math.abs(Cartesian3.dot(up, normal)),\n      1.0,\n      CesiumMath.EPSILON8\n    )\n  ) {\n    up = Cartesian3.clone(Cartesian3.UNIT_Y, up);\n  }\n\n  var left = Cartesian3.cross(up, normal, scratchAxis);\n  up = Cartesian3.cross(normal, left, up);\n  Cartesian3.normalize(left, left);\n  Cartesian3.normalize(up, up);\n\n  var rotationMatrix = scratchRotation;\n  Matrix3.setColumn(rotationMatrix, 0, left, rotationMatrix);\n  Matrix3.setColumn(rotationMatrix, 1, up, rotationMatrix);\n  Matrix3.setColumn(rotationMatrix, 2, normal, rotationMatrix);\n\n  var scale = Cartesian3.fromElements(\n    dimensions.x,\n    dimensions.y,\n    1.0,\n    scratchScale\n  );\n  var rotationScaleMatrix = Matrix3.multiplyByScale(\n    rotationMatrix,\n    scale,\n    scratchRotationScale\n  );\n\n  var localTransform = Matrix4.fromRotationTranslation(\n    rotationScaleMatrix,\n    translation,\n    scratchLocalTransform\n  );\n  return Matrix4.multiplyTransformation(transform, localTransform, result);\n}\n\n/**\n * @private\n */\nPlaneGeometryUpdater.createPrimitiveMatrix = createPrimitiveMatrix;\nexport default PlaneGeometryUpdater;\n"]},"metadata":{},"sourceType":"module"}