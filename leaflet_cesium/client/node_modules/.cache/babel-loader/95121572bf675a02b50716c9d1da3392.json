{"ast":null,"code":"import AttributeCompression from \"../Core/AttributeCompression.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport EncodedCartesian3 from \"../Core/EncodedCartesian3.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport Buffer from \"../Renderer/Buffer.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport ContextLimits from \"../Renderer/ContextLimits.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport VertexArrayFacade from \"../Renderer/VertexArrayFacade.js\";\nimport BillboardCollectionFS from \"../Shaders/BillboardCollectionFS.js\";\nimport BillboardCollectionVS from \"../Shaders/BillboardCollectionVS.js\";\nimport Billboard from \"./Billboard.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport BlendOption from \"./BlendOption.js\";\nimport HeightReference from \"./HeightReference.js\";\nimport HorizontalOrigin from \"./HorizontalOrigin.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SDFSettings from \"./SDFSettings.js\";\nimport TextureAtlas from \"./TextureAtlas.js\";\nimport VerticalOrigin from \"./VerticalOrigin.js\";\nvar SHOW_INDEX = Billboard.SHOW_INDEX;\nvar POSITION_INDEX = Billboard.POSITION_INDEX;\nvar PIXEL_OFFSET_INDEX = Billboard.PIXEL_OFFSET_INDEX;\nvar EYE_OFFSET_INDEX = Billboard.EYE_OFFSET_INDEX;\nvar HORIZONTAL_ORIGIN_INDEX = Billboard.HORIZONTAL_ORIGIN_INDEX;\nvar VERTICAL_ORIGIN_INDEX = Billboard.VERTICAL_ORIGIN_INDEX;\nvar SCALE_INDEX = Billboard.SCALE_INDEX;\nvar IMAGE_INDEX_INDEX = Billboard.IMAGE_INDEX_INDEX;\nvar COLOR_INDEX = Billboard.COLOR_INDEX;\nvar ROTATION_INDEX = Billboard.ROTATION_INDEX;\nvar ALIGNED_AXIS_INDEX = Billboard.ALIGNED_AXIS_INDEX;\nvar SCALE_BY_DISTANCE_INDEX = Billboard.SCALE_BY_DISTANCE_INDEX;\nvar TRANSLUCENCY_BY_DISTANCE_INDEX = Billboard.TRANSLUCENCY_BY_DISTANCE_INDEX;\nvar PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = Billboard.PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX;\nvar DISTANCE_DISPLAY_CONDITION_INDEX = Billboard.DISTANCE_DISPLAY_CONDITION;\nvar DISABLE_DEPTH_DISTANCE = Billboard.DISABLE_DEPTH_DISTANCE;\nvar TEXTURE_COORDINATE_BOUNDS = Billboard.TEXTURE_COORDINATE_BOUNDS;\nvar SDF_INDEX = Billboard.SDF_INDEX;\nvar NUMBER_OF_PROPERTIES = Billboard.NUMBER_OF_PROPERTIES;\nvar attributeLocations;\nvar attributeLocationsBatched = {\n  positionHighAndScale: 0,\n  positionLowAndRotation: 1,\n  compressedAttribute0: 2,\n  // pixel offset, translate, horizontal origin, vertical origin, show, direction, texture coordinates\n  compressedAttribute1: 3,\n  // aligned axis, translucency by distance, image width\n  compressedAttribute2: 4,\n  // image height, color, pick color, size in meters, valid aligned axis, 13 bits free\n  eyeOffset: 5,\n  // 4 bytes free\n  scaleByDistance: 6,\n  pixelOffsetScaleByDistance: 7,\n  compressedAttribute3: 8,\n  textureCoordinateBoundsOrLabelTranslate: 9,\n  a_batchId: 10,\n  sdf: 11\n};\nvar attributeLocationsInstanced = {\n  direction: 0,\n  positionHighAndScale: 1,\n  positionLowAndRotation: 2,\n  // texture offset in w\n  compressedAttribute0: 3,\n  compressedAttribute1: 4,\n  compressedAttribute2: 5,\n  eyeOffset: 6,\n  // texture range in w\n  scaleByDistance: 7,\n  pixelOffsetScaleByDistance: 8,\n  compressedAttribute3: 9,\n  textureCoordinateBoundsOrLabelTranslate: 10,\n  a_batchId: 11,\n  sdf: 12\n};\n/**\n * A renderable collection of billboards.  Billboards are viewport-aligned\n * images positioned in the 3D scene.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/Billboard.png' width='400' height='300' /><br />\n * Example billboards\n * </div>\n * <br /><br />\n * Billboards are added and removed from the collection using {@link BillboardCollection#add}\n * and {@link BillboardCollection#remove}.  Billboards in a collection automatically share textures\n * for images with the same identifier.\n *\n * @alias BillboardCollection\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms each billboard from model to world coordinates.\n * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Determines if this primitive's commands' bounding spheres are shown.\n * @param {Scene} [options.scene] Must be passed in for billboards that use the height reference property or will be depth tested against the globe.\n * @param {BlendOption} [options.blendOption=BlendOption.OPAQUE_AND_TRANSLUCENT] The billboard blending option. The default\n * is used for rendering both opaque and translucent billboards. However, if either all of the billboards are completely opaque or all are completely translucent,\n * setting the technique to BlendOption.OPAQUE or BlendOption.TRANSLUCENT can improve performance by up to 2x.\n * @param {Boolean} [options.show=true] Determines if the billboards in the collection will be shown.\n *\n * @performance For best performance, prefer a few collections, each with many billboards, to\n * many collections with only a few billboards each.  Organize collections so that billboards\n * with the same update frequency are in the same collection, i.e., billboards that do not\n * change should be in one collection; billboards that change every frame should be in another\n * collection; and so on.\n *\n * @see BillboardCollection#add\n * @see BillboardCollection#remove\n * @see Billboard\n * @see LabelCollection\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n *\n * @example\n * // Create a billboard collection with two billboards\n * var billboards = scene.primitives.add(new Cesium.BillboardCollection());\n * billboards.add({\n *   position : new Cesium.Cartesian3(1.0, 2.0, 3.0),\n *   image : 'url/to/image'\n * });\n * billboards.add({\n *   position : new Cesium.Cartesian3(4.0, 5.0, 6.0),\n *   image : 'url/to/another/image'\n * });\n */\n\nfunction BillboardCollection(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  this._scene = options.scene;\n  this._batchTable = options.batchTable;\n  this._textureAtlas = undefined;\n  this._textureAtlasGUID = undefined;\n  this._destroyTextureAtlas = true;\n  this._sp = undefined;\n  this._spTranslucent = undefined;\n  this._rsOpaque = undefined;\n  this._rsTranslucent = undefined;\n  this._vaf = undefined;\n  this._billboards = [];\n  this._billboardsToUpdate = [];\n  this._billboardsToUpdateIndex = 0;\n  this._billboardsRemoved = false;\n  this._createVertexArray = false;\n  this._shaderRotation = false;\n  this._compiledShaderRotation = false;\n  this._shaderAlignedAxis = false;\n  this._compiledShaderAlignedAxis = false;\n  this._shaderScaleByDistance = false;\n  this._compiledShaderScaleByDistance = false;\n  this._shaderTranslucencyByDistance = false;\n  this._compiledShaderTranslucencyByDistance = false;\n  this._shaderPixelOffsetScaleByDistance = false;\n  this._compiledShaderPixelOffsetScaleByDistance = false;\n  this._shaderDistanceDisplayCondition = false;\n  this._compiledShaderDistanceDisplayCondition = false;\n  this._shaderDisableDepthDistance = false;\n  this._compiledShaderDisableDepthDistance = false;\n  this._shaderClampToGround = false;\n  this._compiledShaderClampToGround = false;\n  this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);\n  this._maxSize = 0.0;\n  this._maxEyeOffset = 0.0;\n  this._maxScale = 1.0;\n  this._maxPixelOffset = 0.0;\n  this._allHorizontalCenter = true;\n  this._allVerticalCenter = true;\n  this._allSizedInMeters = true;\n  this._baseVolume = new BoundingSphere();\n  this._baseVolumeWC = new BoundingSphere();\n  this._baseVolume2D = new BoundingSphere();\n  this._boundingVolume = new BoundingSphere();\n  this._boundingVolumeDirty = false;\n  this._colorCommands = [];\n  /**\n   * Determines if billboards in this collection will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n\n  this.show = defaultValue(options.show, true);\n  /**\n   * The 4x4 transformation matrix that transforms each billboard in this collection from model to world coordinates.\n   * When this is the identity matrix, the billboards are drawn in world coordinates, i.e., Earth's WGS84 coordinates.\n   * Local reference frames can be used by providing a different transformation matrix, like that returned\n   * by {@link Transforms.eastNorthUpToFixedFrame}.\n   *\n   * @type {Matrix4}\n   * @default {@link Matrix4.IDENTITY}\n   *\n   *\n   * @example\n   * var center = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\n   * billboards.modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(center);\n   * billboards.add({\n   *   image : 'url/to/image',\n   *   position : new Cesium.Cartesian3(0.0, 0.0, 0.0) // center\n   * });\n   * billboards.add({\n   *   image : 'url/to/image',\n   *   position : new Cesium.Cartesian3(1000000.0, 0.0, 0.0) // east\n   * });\n   * billboards.add({\n   *   image : 'url/to/image',\n   *   position : new Cesium.Cartesian3(0.0, 1000000.0, 0.0) // north\n   * });\n   * billboards.add({\n   *   image : 'url/to/image',\n   *   position : new Cesium.Cartesian3(0.0, 0.0, 1000000.0) // up\n   * });\n   *\n   * @see Transforms.eastNorthUpToFixedFrame\n   */\n\n  this.modelMatrix = Matrix4.clone(defaultValue(options.modelMatrix, Matrix4.IDENTITY));\n  this._modelMatrix = Matrix4.clone(Matrix4.IDENTITY);\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the bounding sphere for each draw command in the primitive.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n\n  this.debugShowBoundingVolume = defaultValue(options.debugShowBoundingVolume, false);\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the texture atlas for this BillboardCollection as a fullscreen quad.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n\n  this.debugShowTextureAtlas = defaultValue(options.debugShowTextureAtlas, false);\n  /**\n   * The billboard blending option. The default is used for rendering both opaque and translucent billboards.\n   * However, if either all of the billboards are completely opaque or all are completely translucent,\n   * setting the technique to BlendOption.OPAQUE or BlendOption.TRANSLUCENT can improve\n   * performance by up to 2x.\n   * @type {BlendOption}\n   * @default BlendOption.OPAQUE_AND_TRANSLUCENT\n   */\n\n  this.blendOption = defaultValue(options.blendOption, BlendOption.OPAQUE_AND_TRANSLUCENT);\n  this._blendOption = undefined;\n  this._mode = SceneMode.SCENE3D; // The buffer usage for each attribute is determined based on the usage of the attribute over time.\n\n  this._buffersUsage = [BufferUsage.STATIC_DRAW, // SHOW_INDEX\n  BufferUsage.STATIC_DRAW, // POSITION_INDEX\n  BufferUsage.STATIC_DRAW, // PIXEL_OFFSET_INDEX\n  BufferUsage.STATIC_DRAW, // EYE_OFFSET_INDEX\n  BufferUsage.STATIC_DRAW, // HORIZONTAL_ORIGIN_INDEX\n  BufferUsage.STATIC_DRAW, // VERTICAL_ORIGIN_INDEX\n  BufferUsage.STATIC_DRAW, // SCALE_INDEX\n  BufferUsage.STATIC_DRAW, // IMAGE_INDEX_INDEX\n  BufferUsage.STATIC_DRAW, // COLOR_INDEX\n  BufferUsage.STATIC_DRAW, // ROTATION_INDEX\n  BufferUsage.STATIC_DRAW, // ALIGNED_AXIS_INDEX\n  BufferUsage.STATIC_DRAW, // SCALE_BY_DISTANCE_INDEX\n  BufferUsage.STATIC_DRAW, // TRANSLUCENCY_BY_DISTANCE_INDEX\n  BufferUsage.STATIC_DRAW, // PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX\n  BufferUsage.STATIC_DRAW, // DISTANCE_DISPLAY_CONDITION_INDEX\n  BufferUsage.STATIC_DRAW // TEXTURE_COORDINATE_BOUNDS\n  ];\n  this._highlightColor = Color.clone(Color.WHITE); // Only used by Vector3DTilePoints\n\n  var that = this;\n  this._uniforms = {\n    u_atlas: function () {\n      return that._textureAtlas.texture;\n    },\n    u_highlightColor: function () {\n      return that._highlightColor;\n    }\n  };\n  var scene = this._scene;\n\n  if (defined(scene) && defined(scene.terrainProviderChanged)) {\n    this._removeCallbackFunc = scene.terrainProviderChanged.addEventListener(function () {\n      var billboards = this._billboards;\n      var length = billboards.length;\n\n      for (var i = 0; i < length; ++i) {\n        if (defined(billboards[i])) {\n          billboards[i]._updateClamping();\n        }\n      }\n    }, this);\n  }\n}\n\nObject.defineProperties(BillboardCollection.prototype, {\n  /**\n   * Returns the number of billboards in this collection.  This is commonly used with\n   * {@link BillboardCollection#get} to iterate over all the billboards\n   * in the collection.\n   * @memberof BillboardCollection.prototype\n   * @type {Number}\n   */\n  length: {\n    get: function () {\n      removeBillboards(this);\n      return this._billboards.length;\n    }\n  },\n\n  /**\n   * Gets or sets the textureAtlas.\n   * @memberof BillboardCollection.prototype\n   * @type {TextureAtlas}\n   * @private\n   */\n  textureAtlas: {\n    get: function () {\n      return this._textureAtlas;\n    },\n    set: function (value) {\n      if (this._textureAtlas !== value) {\n        this._textureAtlas = this._destroyTextureAtlas && this._textureAtlas && this._textureAtlas.destroy();\n        this._textureAtlas = value;\n        this._createVertexArray = true; // New per-billboard texture coordinates\n      }\n    }\n  },\n\n  /**\n   * Gets or sets a value which determines if the texture atlas is\n   * destroyed when the collection is destroyed.\n   *\n   * If the texture atlas is used by more than one collection, set this to <code>false</code>,\n   * and explicitly destroy the atlas to avoid attempting to destroy it multiple times.\n   *\n   * @memberof BillboardCollection.prototype\n   * @type {Boolean}\n   * @private\n   *\n   * @example\n   * // Set destroyTextureAtlas\n   * // Destroy a billboard collection but not its texture atlas.\n   *\n   * var atlas = new TextureAtlas({\n   *   scene : scene,\n   *   images : images\n   * });\n   * billboards.textureAtlas = atlas;\n   * billboards.destroyTextureAtlas = false;\n   * billboards = billboards.destroy();\n   * console.log(atlas.isDestroyed()); // False\n   */\n  destroyTextureAtlas: {\n    get: function () {\n      return this._destroyTextureAtlas;\n    },\n    set: function (value) {\n      this._destroyTextureAtlas = value;\n    }\n  }\n});\n\nfunction destroyBillboards(billboards) {\n  var length = billboards.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (billboards[i]) {\n      billboards[i]._destroy();\n    }\n  }\n}\n/**\n * Creates and adds a billboard with the specified initial properties to the collection.\n * The added billboard is returned so it can be modified or removed from the collection later.\n *\n * @param {Object}[options] A template describing the billboard's properties as shown in Example 1.\n * @returns {Billboard} The billboard that was added to the collection.\n *\n * @performance Calling <code>add</code> is expected constant time.  However, the collection's vertex buffer\n * is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.  For\n * best performance, add as many billboards as possible before calling <code>update</code>.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Example 1:  Add a billboard, specifying all the default values.\n * var b = billboards.add({\n *   show : true,\n *   position : Cesium.Cartesian3.ZERO,\n *   pixelOffset : Cesium.Cartesian2.ZERO,\n *   eyeOffset : Cesium.Cartesian3.ZERO,\n *   heightReference : Cesium.HeightReference.NONE,\n *   horizontalOrigin : Cesium.HorizontalOrigin.CENTER,\n *   verticalOrigin : Cesium.VerticalOrigin.CENTER,\n *   scale : 1.0,\n *   image : 'url/to/image',\n *   imageSubRegion : undefined,\n *   color : Cesium.Color.WHITE,\n *   id : undefined,\n *   rotation : 0.0,\n *   alignedAxis : Cesium.Cartesian3.ZERO,\n *   width : undefined,\n *   height : undefined,\n *   scaleByDistance : undefined,\n *   translucencyByDistance : undefined,\n *   pixelOffsetScaleByDistance : undefined,\n *   sizeInMeters : false,\n *   distanceDisplayCondition : undefined\n * });\n *\n * @example\n * // Example 2:  Specify only the billboard's cartographic position.\n * var b = billboards.add({\n *   position : Cesium.Cartesian3.fromDegrees(longitude, latitude, height)\n * });\n *\n * @see BillboardCollection#remove\n * @see BillboardCollection#removeAll\n */\n\n\nBillboardCollection.prototype.add = function (options) {\n  var b = new Billboard(options, this);\n  b._index = this._billboards.length;\n\n  this._billboards.push(b);\n\n  this._createVertexArray = true;\n  return b;\n};\n/**\n * Removes a billboard from the collection.\n *\n * @param {Billboard} billboard The billboard to remove.\n * @returns {Boolean} <code>true</code> if the billboard was removed; <code>false</code> if the billboard was not found in the collection.\n *\n * @performance Calling <code>remove</code> is expected constant time.  However, the collection's vertex buffer\n * is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.  For\n * best performance, remove as many billboards as possible before calling <code>update</code>.\n * If you intend to temporarily hide a billboard, it is usually more efficient to call\n * {@link Billboard#show} instead of removing and re-adding the billboard.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * var b = billboards.add(...);\n * billboards.remove(b);  // Returns true\n *\n * @see BillboardCollection#add\n * @see BillboardCollection#removeAll\n * @see Billboard#show\n */\n\n\nBillboardCollection.prototype.remove = function (billboard) {\n  if (this.contains(billboard)) {\n    this._billboards[billboard._index] = null; // Removed later\n\n    this._billboardsRemoved = true;\n    this._createVertexArray = true;\n\n    billboard._destroy();\n\n    return true;\n  }\n\n  return false;\n};\n/**\n * Removes all billboards from the collection.\n *\n * @performance <code>O(n)</code>.  It is more efficient to remove all the billboards\n * from a collection and then add new ones than to create a new collection entirely.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * billboards.add(...);\n * billboards.add(...);\n * billboards.removeAll();\n *\n * @see BillboardCollection#add\n * @see BillboardCollection#remove\n */\n\n\nBillboardCollection.prototype.removeAll = function () {\n  destroyBillboards(this._billboards);\n  this._billboards = [];\n  this._billboardsToUpdate = [];\n  this._billboardsToUpdateIndex = 0;\n  this._billboardsRemoved = false;\n  this._createVertexArray = true;\n};\n\nfunction removeBillboards(billboardCollection) {\n  if (billboardCollection._billboardsRemoved) {\n    billboardCollection._billboardsRemoved = false;\n    var newBillboards = [];\n    var billboards = billboardCollection._billboards;\n    var length = billboards.length;\n\n    for (var i = 0, j = 0; i < length; ++i) {\n      var billboard = billboards[i];\n\n      if (billboard) {\n        billboard._index = j++;\n        newBillboards.push(billboard);\n      }\n    }\n\n    billboardCollection._billboards = newBillboards;\n  }\n}\n\nBillboardCollection.prototype._updateBillboard = function (billboard, propertyChanged) {\n  if (!billboard._dirty) {\n    this._billboardsToUpdate[this._billboardsToUpdateIndex++] = billboard;\n  }\n\n  ++this._propertiesChanged[propertyChanged];\n};\n/**\n * Check whether this collection contains a given billboard.\n *\n * @param {Billboard} [billboard] The billboard to check for.\n * @returns {Boolean} true if this collection contains the billboard, false otherwise.\n *\n * @see BillboardCollection#get\n */\n\n\nBillboardCollection.prototype.contains = function (billboard) {\n  return defined(billboard) && billboard._billboardCollection === this;\n};\n/**\n * Returns the billboard in the collection at the specified index.  Indices are zero-based\n * and increase as billboards are added.  Removing a billboard shifts all billboards after\n * it to the left, changing their indices.  This function is commonly used with\n * {@link BillboardCollection#length} to iterate over all the billboards\n * in the collection.\n *\n * @param {Number} index The zero-based index of the billboard.\n * @returns {Billboard} The billboard at the specified index.\n *\n * @performance Expected constant time.  If billboards were removed from the collection and\n * {@link BillboardCollection#update} was not called, an implicit <code>O(n)</code>\n * operation is performed.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Toggle the show property of every billboard in the collection\n * var len = billboards.length;\n * for (var i = 0; i < len; ++i) {\n *   var b = billboards.get(i);\n *   b.show = !b.show;\n * }\n *\n * @see BillboardCollection#length\n */\n\n\nBillboardCollection.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index)) {\n    throw new DeveloperError(\"index is required.\");\n  } //>>includeEnd('debug');\n\n\n  removeBillboards(this);\n  return this._billboards[index];\n};\n\nvar getIndexBuffer;\n\nfunction getIndexBufferBatched(context) {\n  var sixteenK = 16 * 1024;\n  var indexBuffer = context.cache.billboardCollection_indexBufferBatched;\n\n  if (defined(indexBuffer)) {\n    return indexBuffer;\n  } // Subtract 6 because the last index is reserverd for primitive restart.\n  // https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.18\n\n\n  var length = sixteenK * 6 - 6;\n  var indices = new Uint16Array(length);\n\n  for (var i = 0, j = 0; i < length; i += 6, j += 4) {\n    indices[i] = j;\n    indices[i + 1] = j + 1;\n    indices[i + 2] = j + 2;\n    indices[i + 3] = j + 0;\n    indices[i + 4] = j + 2;\n    indices[i + 5] = j + 3;\n  } // PERFORMANCE_IDEA:  Should we reference count billboard collections, and eventually delete this?\n  // Is this too much memory to allocate up front?  Should we dynamically grow it?\n\n\n  indexBuffer = Buffer.createIndexBuffer({\n    context: context,\n    typedArray: indices,\n    usage: BufferUsage.STATIC_DRAW,\n    indexDatatype: IndexDatatype.UNSIGNED_SHORT\n  });\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.billboardCollection_indexBufferBatched = indexBuffer;\n  return indexBuffer;\n}\n\nfunction getIndexBufferInstanced(context) {\n  var indexBuffer = context.cache.billboardCollection_indexBufferInstanced;\n\n  if (defined(indexBuffer)) {\n    return indexBuffer;\n  }\n\n  indexBuffer = Buffer.createIndexBuffer({\n    context: context,\n    typedArray: new Uint16Array([0, 1, 2, 0, 2, 3]),\n    usage: BufferUsage.STATIC_DRAW,\n    indexDatatype: IndexDatatype.UNSIGNED_SHORT\n  });\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.billboardCollection_indexBufferInstanced = indexBuffer;\n  return indexBuffer;\n}\n\nfunction getVertexBufferInstanced(context) {\n  var vertexBuffer = context.cache.billboardCollection_vertexBufferInstanced;\n\n  if (defined(vertexBuffer)) {\n    return vertexBuffer;\n  }\n\n  vertexBuffer = Buffer.createVertexBuffer({\n    context: context,\n    typedArray: new Float32Array([0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]),\n    usage: BufferUsage.STATIC_DRAW\n  });\n  vertexBuffer.vertexArrayDestroyable = false;\n  context.cache.billboardCollection_vertexBufferInstanced = vertexBuffer;\n  return vertexBuffer;\n}\n\nBillboardCollection.prototype.computeNewBuffersUsage = function () {\n  var buffersUsage = this._buffersUsage;\n  var usageChanged = false;\n  var properties = this._propertiesChanged;\n\n  for (var k = 0; k < NUMBER_OF_PROPERTIES; ++k) {\n    var newUsage = properties[k] === 0 ? BufferUsage.STATIC_DRAW : BufferUsage.STREAM_DRAW;\n    usageChanged = usageChanged || buffersUsage[k] !== newUsage;\n    buffersUsage[k] = newUsage;\n  }\n\n  return usageChanged;\n};\n\nfunction createVAF(context, numberOfBillboards, buffersUsage, instanced, batchTable, sdf) {\n  var attributes = [{\n    index: attributeLocations.positionHighAndScale,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: buffersUsage[POSITION_INDEX]\n  }, {\n    index: attributeLocations.positionLowAndRotation,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: buffersUsage[POSITION_INDEX]\n  }, {\n    index: attributeLocations.compressedAttribute0,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: buffersUsage[PIXEL_OFFSET_INDEX]\n  }, {\n    index: attributeLocations.compressedAttribute1,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: buffersUsage[TRANSLUCENCY_BY_DISTANCE_INDEX]\n  }, {\n    index: attributeLocations.compressedAttribute2,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: buffersUsage[COLOR_INDEX]\n  }, {\n    index: attributeLocations.eyeOffset,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: buffersUsage[EYE_OFFSET_INDEX]\n  }, {\n    index: attributeLocations.scaleByDistance,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: buffersUsage[SCALE_BY_DISTANCE_INDEX]\n  }, {\n    index: attributeLocations.pixelOffsetScaleByDistance,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: buffersUsage[PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX]\n  }, {\n    index: attributeLocations.compressedAttribute3,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: buffersUsage[DISTANCE_DISPLAY_CONDITION_INDEX]\n  }, {\n    index: attributeLocations.textureCoordinateBoundsOrLabelTranslate,\n    componentsPerAttribute: 4,\n    componentDatatype: ComponentDatatype.FLOAT,\n    usage: buffersUsage[TEXTURE_COORDINATE_BOUNDS]\n  }]; // Instancing requires one non-instanced attribute.\n\n  if (instanced) {\n    attributes.push({\n      index: attributeLocations.direction,\n      componentsPerAttribute: 2,\n      componentDatatype: ComponentDatatype.FLOAT,\n      vertexBuffer: getVertexBufferInstanced(context)\n    });\n  }\n\n  if (defined(batchTable)) {\n    attributes.push({\n      index: attributeLocations.a_batchId,\n      componentsPerAttribute: 1,\n      componentDatatype: ComponentDatatype.FLOAT,\n      bufferUsage: BufferUsage.STATIC_DRAW\n    });\n  }\n\n  if (sdf) {\n    attributes.push({\n      index: attributeLocations.sdf,\n      componentsPerAttribute: 2,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[SDF_INDEX]\n    });\n  } // When instancing is enabled, only one vertex is needed for each billboard.\n\n\n  var sizeInVertices = instanced ? numberOfBillboards : 4 * numberOfBillboards;\n  return new VertexArrayFacade(context, attributes, sizeInVertices, instanced);\n} ///////////////////////////////////////////////////////////////////////////\n// Four vertices per billboard.  Each has the same position, etc., but a different screen-space direction vector.\n// PERFORMANCE_IDEA:  Save memory if a property is the same for all billboards, use a latched attribute state,\n// instead of storing it in a vertex buffer.\n\n\nvar writePositionScratch = new EncodedCartesian3();\n\nfunction writePositionScaleAndRotation(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  var i;\n  var positionHighWriter = vafWriters[attributeLocations.positionHighAndScale];\n  var positionLowWriter = vafWriters[attributeLocations.positionLowAndRotation];\n\n  var position = billboard._getActualPosition();\n\n  if (billboardCollection._mode === SceneMode.SCENE3D) {\n    BoundingSphere.expand(billboardCollection._baseVolume, position, billboardCollection._baseVolume);\n    billboardCollection._boundingVolumeDirty = true;\n  }\n\n  EncodedCartesian3.fromCartesian(position, writePositionScratch);\n  var scale = billboard.scale;\n  var rotation = billboard.rotation;\n\n  if (rotation !== 0.0) {\n    billboardCollection._shaderRotation = true;\n  }\n\n  billboardCollection._maxScale = Math.max(billboardCollection._maxScale, scale);\n  var high = writePositionScratch.high;\n  var low = writePositionScratch.low;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    positionHighWriter(i, high.x, high.y, high.z, scale);\n    positionLowWriter(i, low.x, low.y, low.z, rotation);\n  } else {\n    i = billboard._index * 4;\n    positionHighWriter(i + 0, high.x, high.y, high.z, scale);\n    positionHighWriter(i + 1, high.x, high.y, high.z, scale);\n    positionHighWriter(i + 2, high.x, high.y, high.z, scale);\n    positionHighWriter(i + 3, high.x, high.y, high.z, scale);\n    positionLowWriter(i + 0, low.x, low.y, low.z, rotation);\n    positionLowWriter(i + 1, low.x, low.y, low.z, rotation);\n    positionLowWriter(i + 2, low.x, low.y, low.z, rotation);\n    positionLowWriter(i + 3, low.x, low.y, low.z, rotation);\n  }\n}\n\nvar scratchCartesian2 = new Cartesian2();\nvar UPPER_BOUND = 32768.0; // 2^15\n\nvar LEFT_SHIFT16 = 65536.0; // 2^16\n\nvar LEFT_SHIFT12 = 4096.0; // 2^12\n\nvar LEFT_SHIFT8 = 256.0; // 2^8\n\nvar LEFT_SHIFT7 = 128.0;\nvar LEFT_SHIFT5 = 32.0;\nvar LEFT_SHIFT3 = 8.0;\nvar LEFT_SHIFT2 = 4.0;\nvar RIGHT_SHIFT8 = 1.0 / 256.0;\nvar LOWER_LEFT = 0.0;\nvar LOWER_RIGHT = 2.0;\nvar UPPER_RIGHT = 3.0;\nvar UPPER_LEFT = 1.0;\n\nfunction writeCompressedAttrib0(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute0];\n  var pixelOffset = billboard.pixelOffset;\n  var pixelOffsetX = pixelOffset.x;\n  var pixelOffsetY = pixelOffset.y;\n  var translate = billboard._translate;\n  var translateX = translate.x;\n  var translateY = translate.y;\n  billboardCollection._maxPixelOffset = Math.max(billboardCollection._maxPixelOffset, Math.abs(pixelOffsetX + translateX), Math.abs(-pixelOffsetY + translateY));\n  var horizontalOrigin = billboard.horizontalOrigin;\n  var verticalOrigin = billboard._verticalOrigin;\n  var show = billboard.show && billboard.clusterShow; // If the color alpha is zero, do not show this billboard.  This lets us avoid providing\n  // color during the pick pass and also eliminates a discard in the fragment shader.\n\n  if (billboard.color.alpha === 0.0) {\n    show = false;\n  } // Raw billboards don't distinguish between BASELINE and BOTTOM, only LabelCollection does that.\n\n\n  if (verticalOrigin === VerticalOrigin.BASELINE) {\n    verticalOrigin = VerticalOrigin.BOTTOM;\n  }\n\n  billboardCollection._allHorizontalCenter = billboardCollection._allHorizontalCenter && horizontalOrigin === HorizontalOrigin.CENTER;\n  billboardCollection._allVerticalCenter = billboardCollection._allVerticalCenter && verticalOrigin === VerticalOrigin.CENTER;\n  var bottomLeftX = 0;\n  var bottomLeftY = 0;\n  var width = 0;\n  var height = 0;\n  var index = billboard._imageIndex;\n\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index]; //>>includeStart('debug', pragmas.debug);\n\n    if (!defined(imageRectangle)) {\n      throw new DeveloperError(\"Invalid billboard image index: \" + index);\n    } //>>includeEnd('debug');\n\n\n    bottomLeftX = imageRectangle.x;\n    bottomLeftY = imageRectangle.y;\n    width = imageRectangle.width;\n    height = imageRectangle.height;\n  }\n\n  var topRightX = bottomLeftX + width;\n  var topRightY = bottomLeftY + height;\n  var compressed0 = Math.floor(CesiumMath.clamp(pixelOffsetX, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND) * LEFT_SHIFT7;\n  compressed0 += (horizontalOrigin + 1.0) * LEFT_SHIFT5;\n  compressed0 += (verticalOrigin + 1.0) * LEFT_SHIFT3;\n  compressed0 += (show ? 1.0 : 0.0) * LEFT_SHIFT2;\n  var compressed1 = Math.floor(CesiumMath.clamp(pixelOffsetY, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND) * LEFT_SHIFT8;\n  var compressed2 = Math.floor(CesiumMath.clamp(translateX, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND) * LEFT_SHIFT8;\n  var tempTanslateY = (CesiumMath.clamp(translateY, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND) * RIGHT_SHIFT8;\n  var upperTranslateY = Math.floor(tempTanslateY);\n  var lowerTranslateY = Math.floor((tempTanslateY - upperTranslateY) * LEFT_SHIFT8);\n  compressed1 += upperTranslateY;\n  compressed2 += lowerTranslateY;\n  scratchCartesian2.x = bottomLeftX;\n  scratchCartesian2.y = bottomLeftY;\n  var compressedTexCoordsLL = AttributeCompression.compressTextureCoordinates(scratchCartesian2);\n  scratchCartesian2.x = topRightX;\n  var compressedTexCoordsLR = AttributeCompression.compressTextureCoordinates(scratchCartesian2);\n  scratchCartesian2.y = topRightY;\n  var compressedTexCoordsUR = AttributeCompression.compressTextureCoordinates(scratchCartesian2);\n  scratchCartesian2.x = bottomLeftX;\n  var compressedTexCoordsUL = AttributeCompression.compressTextureCoordinates(scratchCartesian2);\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1, compressed2, compressedTexCoordsLL);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, compressed0 + LOWER_LEFT, compressed1, compressed2, compressedTexCoordsLL);\n    writer(i + 1, compressed0 + LOWER_RIGHT, compressed1, compressed2, compressedTexCoordsLR);\n    writer(i + 2, compressed0 + UPPER_RIGHT, compressed1, compressed2, compressedTexCoordsUR);\n    writer(i + 3, compressed0 + UPPER_LEFT, compressed1, compressed2, compressedTexCoordsUL);\n  }\n}\n\nfunction writeCompressedAttrib1(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute1];\n  var alignedAxis = billboard.alignedAxis;\n\n  if (!Cartesian3.equals(alignedAxis, Cartesian3.ZERO)) {\n    billboardCollection._shaderAlignedAxis = true;\n  }\n\n  var near = 0.0;\n  var nearValue = 1.0;\n  var far = 1.0;\n  var farValue = 1.0;\n  var translucency = billboard.translucencyByDistance;\n\n  if (defined(translucency)) {\n    near = translucency.near;\n    nearValue = translucency.nearValue;\n    far = translucency.far;\n    farValue = translucency.farValue;\n\n    if (nearValue !== 1.0 || farValue !== 1.0) {\n      // translucency by distance calculation in shader need not be enabled\n      // until a billboard with near and far !== 1.0 is found\n      billboardCollection._shaderTranslucencyByDistance = true;\n    }\n  }\n\n  var width = 0;\n  var index = billboard._imageIndex;\n\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index]; //>>includeStart('debug', pragmas.debug);\n\n    if (!defined(imageRectangle)) {\n      throw new DeveloperError(\"Invalid billboard image index: \" + index);\n    } //>>includeEnd('debug');\n\n\n    width = imageRectangle.width;\n  }\n\n  var textureWidth = billboardCollection._textureAtlas.texture.width;\n  var imageWidth = Math.round(defaultValue(billboard.width, textureWidth * width));\n  billboardCollection._maxSize = Math.max(billboardCollection._maxSize, imageWidth);\n  var compressed0 = CesiumMath.clamp(imageWidth, 0.0, LEFT_SHIFT16);\n  var compressed1 = 0.0;\n\n  if (Math.abs(Cartesian3.magnitudeSquared(alignedAxis) - 1.0) < CesiumMath.EPSILON6) {\n    compressed1 = AttributeCompression.octEncodeFloat(alignedAxis);\n  }\n\n  nearValue = CesiumMath.clamp(nearValue, 0.0, 1.0);\n  nearValue = nearValue === 1.0 ? 255.0 : nearValue * 255.0 | 0;\n  compressed0 = compressed0 * LEFT_SHIFT8 + nearValue;\n  farValue = CesiumMath.clamp(farValue, 0.0, 1.0);\n  farValue = farValue === 1.0 ? 255.0 : farValue * 255.0 | 0;\n  compressed1 = compressed1 * LEFT_SHIFT8 + farValue;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1, near, far);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, compressed0, compressed1, near, far);\n    writer(i + 1, compressed0, compressed1, near, far);\n    writer(i + 2, compressed0, compressed1, near, far);\n    writer(i + 3, compressed0, compressed1, near, far);\n  }\n}\n\nfunction writeCompressedAttrib2(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute2];\n  var color = billboard.color;\n  var pickColor = !defined(billboardCollection._batchTable) ? billboard.getPickId(frameState.context).color : Color.WHITE;\n  var sizeInMeters = billboard.sizeInMeters ? 1.0 : 0.0;\n  var validAlignedAxis = Math.abs(Cartesian3.magnitudeSquared(billboard.alignedAxis) - 1.0) < CesiumMath.EPSILON6 ? 1.0 : 0.0;\n  billboardCollection._allSizedInMeters = billboardCollection._allSizedInMeters && sizeInMeters === 1.0;\n  var height = 0;\n  var index = billboard._imageIndex;\n\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index]; //>>includeStart('debug', pragmas.debug);\n\n    if (!defined(imageRectangle)) {\n      throw new DeveloperError(\"Invalid billboard image index: \" + index);\n    } //>>includeEnd('debug');\n\n\n    height = imageRectangle.height;\n  }\n\n  var dimensions = billboardCollection._textureAtlas.texture.dimensions;\n  var imageHeight = Math.round(defaultValue(billboard.height, dimensions.y * height));\n  billboardCollection._maxSize = Math.max(billboardCollection._maxSize, imageHeight);\n  var labelHorizontalOrigin = defaultValue(billboard._labelHorizontalOrigin, -2);\n  labelHorizontalOrigin += 2;\n  var compressed3 = imageHeight * LEFT_SHIFT2 + labelHorizontalOrigin;\n  var red = Color.floatToByte(color.red);\n  var green = Color.floatToByte(color.green);\n  var blue = Color.floatToByte(color.blue);\n  var compressed0 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue;\n  red = Color.floatToByte(pickColor.red);\n  green = Color.floatToByte(pickColor.green);\n  blue = Color.floatToByte(pickColor.blue);\n  var compressed1 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue;\n  var compressed2 = Color.floatToByte(color.alpha) * LEFT_SHIFT16 + Color.floatToByte(pickColor.alpha) * LEFT_SHIFT8;\n  compressed2 += sizeInMeters * 2.0 + validAlignedAxis;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1, compressed2, compressed3);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, compressed0, compressed1, compressed2, compressed3);\n    writer(i + 1, compressed0, compressed1, compressed2, compressed3);\n    writer(i + 2, compressed0, compressed1, compressed2, compressed3);\n    writer(i + 3, compressed0, compressed1, compressed2, compressed3);\n  }\n}\n\nfunction writeEyeOffset(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  var i;\n  var writer = vafWriters[attributeLocations.eyeOffset];\n  var eyeOffset = billboard.eyeOffset; // For billboards that are clamped to ground, move it slightly closer to the camera\n\n  var eyeOffsetZ = eyeOffset.z;\n\n  if (billboard._heightReference !== HeightReference.NONE) {\n    eyeOffsetZ *= 1.005;\n  }\n\n  billboardCollection._maxEyeOffset = Math.max(billboardCollection._maxEyeOffset, Math.abs(eyeOffset.x), Math.abs(eyeOffset.y), Math.abs(eyeOffsetZ));\n\n  if (billboardCollection._instanced) {\n    var width = 0;\n    var height = 0;\n    var index = billboard._imageIndex;\n\n    if (index !== -1) {\n      var imageRectangle = textureAtlasCoordinates[index]; //>>includeStart('debug', pragmas.debug);\n\n      if (!defined(imageRectangle)) {\n        throw new DeveloperError(\"Invalid billboard image index: \" + index);\n      } //>>includeEnd('debug');\n\n\n      width = imageRectangle.width;\n      height = imageRectangle.height;\n    }\n\n    scratchCartesian2.x = width;\n    scratchCartesian2.y = height;\n    var compressedTexCoordsRange = AttributeCompression.compressTextureCoordinates(scratchCartesian2);\n    i = billboard._index;\n    writer(i, eyeOffset.x, eyeOffset.y, eyeOffsetZ, compressedTexCoordsRange);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n    writer(i + 1, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n    writer(i + 2, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n    writer(i + 3, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n  }\n}\n\nfunction writeScaleByDistance(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  var i;\n  var writer = vafWriters[attributeLocations.scaleByDistance];\n  var near = 0.0;\n  var nearValue = 1.0;\n  var far = 1.0;\n  var farValue = 1.0;\n  var scale = billboard.scaleByDistance;\n\n  if (defined(scale)) {\n    near = scale.near;\n    nearValue = scale.nearValue;\n    far = scale.far;\n    farValue = scale.farValue;\n\n    if (nearValue !== 1.0 || farValue !== 1.0) {\n      // scale by distance calculation in shader need not be enabled\n      // until a billboard with near and far !== 1.0 is found\n      billboardCollection._shaderScaleByDistance = true;\n    }\n  }\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, near, nearValue, far, farValue);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, near, nearValue, far, farValue);\n    writer(i + 1, near, nearValue, far, farValue);\n    writer(i + 2, near, nearValue, far, farValue);\n    writer(i + 3, near, nearValue, far, farValue);\n  }\n}\n\nfunction writePixelOffsetScaleByDistance(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  var i;\n  var writer = vafWriters[attributeLocations.pixelOffsetScaleByDistance];\n  var near = 0.0;\n  var nearValue = 1.0;\n  var far = 1.0;\n  var farValue = 1.0;\n  var pixelOffsetScale = billboard.pixelOffsetScaleByDistance;\n\n  if (defined(pixelOffsetScale)) {\n    near = pixelOffsetScale.near;\n    nearValue = pixelOffsetScale.nearValue;\n    far = pixelOffsetScale.far;\n    farValue = pixelOffsetScale.farValue;\n\n    if (nearValue !== 1.0 || farValue !== 1.0) {\n      // pixelOffsetScale by distance calculation in shader need not be enabled\n      // until a billboard with near and far !== 1.0 is found\n      billboardCollection._shaderPixelOffsetScaleByDistance = true;\n    }\n  }\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, near, nearValue, far, farValue);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, near, nearValue, far, farValue);\n    writer(i + 1, near, nearValue, far, farValue);\n    writer(i + 2, near, nearValue, far, farValue);\n    writer(i + 3, near, nearValue, far, farValue);\n  }\n}\n\nfunction writeCompressedAttribute3(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute3];\n  var near = 0.0;\n  var far = Number.MAX_VALUE;\n  var distanceDisplayCondition = billboard.distanceDisplayCondition;\n\n  if (defined(distanceDisplayCondition)) {\n    near = distanceDisplayCondition.near;\n    far = distanceDisplayCondition.far;\n    near *= near;\n    far *= far;\n    billboardCollection._shaderDistanceDisplayCondition = true;\n  }\n\n  var disableDepthTestDistance = billboard.disableDepthTestDistance;\n  var clampToGround = billboard.heightReference === HeightReference.CLAMP_TO_GROUND && frameState.context.depthTexture;\n\n  if (!defined(disableDepthTestDistance)) {\n    disableDepthTestDistance = clampToGround ? 5000.0 : 0.0;\n  }\n\n  disableDepthTestDistance *= disableDepthTestDistance;\n\n  if (clampToGround || disableDepthTestDistance > 0.0) {\n    billboardCollection._shaderDisableDepthDistance = true;\n\n    if (disableDepthTestDistance === Number.POSITIVE_INFINITY) {\n      disableDepthTestDistance = -1.0;\n    }\n  }\n\n  var imageHeight;\n  var imageWidth;\n\n  if (!defined(billboard._labelDimensions)) {\n    var height = 0;\n    var width = 0;\n    var index = billboard._imageIndex;\n\n    if (index !== -1) {\n      var imageRectangle = textureAtlasCoordinates[index]; //>>includeStart('debug', pragmas.debug);\n\n      if (!defined(imageRectangle)) {\n        throw new DeveloperError(\"Invalid billboard image index: \" + index);\n      } //>>includeEnd('debug');\n\n\n      height = imageRectangle.height;\n      width = imageRectangle.width;\n    }\n\n    imageHeight = Math.round(defaultValue(billboard.height, billboardCollection._textureAtlas.texture.dimensions.y * height));\n    var textureWidth = billboardCollection._textureAtlas.texture.width;\n    imageWidth = Math.round(defaultValue(billboard.width, textureWidth * width));\n  } else {\n    imageWidth = billboard._labelDimensions.x;\n    imageHeight = billboard._labelDimensions.y;\n  }\n\n  var w = Math.floor(CesiumMath.clamp(imageWidth, 0.0, LEFT_SHIFT12));\n  var h = Math.floor(CesiumMath.clamp(imageHeight, 0.0, LEFT_SHIFT12));\n  var dimensions = w * LEFT_SHIFT12 + h;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, near, far, disableDepthTestDistance, dimensions);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, near, far, disableDepthTestDistance, dimensions);\n    writer(i + 1, near, far, disableDepthTestDistance, dimensions);\n    writer(i + 2, near, far, disableDepthTestDistance, dimensions);\n    writer(i + 3, near, far, disableDepthTestDistance, dimensions);\n  }\n}\n\nfunction writeTextureCoordinateBoundsOrLabelTranslate(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  if (billboard.heightReference === HeightReference.CLAMP_TO_GROUND) {\n    var scene = billboardCollection._scene;\n    var context = frameState.context;\n    var globeTranslucent = frameState.globeTranslucencyState.translucent;\n    var depthTestAgainstTerrain = defined(scene.globe) && scene.globe.depthTestAgainstTerrain; // Only do manual depth test if the globe is opaque and writes depth\n\n    billboardCollection._shaderClampToGround = context.depthTexture && !globeTranslucent && depthTestAgainstTerrain;\n  }\n\n  var i;\n  var writer = vafWriters[attributeLocations.textureCoordinateBoundsOrLabelTranslate];\n\n  if (ContextLimits.maximumVertexTextureImageUnits > 0) {\n    //write _labelTranslate, used by depth testing in the vertex shader\n    var translateX = 0;\n    var translateY = 0;\n\n    if (defined(billboard._labelTranslate)) {\n      translateX = billboard._labelTranslate.x;\n      translateY = billboard._labelTranslate.y;\n    }\n\n    if (billboardCollection._instanced) {\n      i = billboard._index;\n      writer(i, translateX, translateY, 0.0, 0.0);\n    } else {\n      i = billboard._index * 4;\n      writer(i + 0, translateX, translateY, 0.0, 0.0);\n      writer(i + 1, translateX, translateY, 0.0, 0.0);\n      writer(i + 2, translateX, translateY, 0.0, 0.0);\n      writer(i + 3, translateX, translateY, 0.0, 0.0);\n    }\n\n    return;\n  } //write texture coordinate bounds, used by depth testing in fragment shader\n\n\n  var minX = 0;\n  var minY = 0;\n  var width = 0;\n  var height = 0;\n  var index = billboard._imageIndex;\n\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index]; //>>includeStart('debug', pragmas.debug);\n\n    if (!defined(imageRectangle)) {\n      throw new DeveloperError(\"Invalid billboard image index: \" + index);\n    } //>>includeEnd('debug');\n\n\n    minX = imageRectangle.x;\n    minY = imageRectangle.y;\n    width = imageRectangle.width;\n    height = imageRectangle.height;\n  }\n\n  var maxX = minX + width;\n  var maxY = minY + height;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, minX, minY, maxX, maxY);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, minX, minY, maxX, maxY);\n    writer(i + 1, minX, minY, maxX, maxY);\n    writer(i + 2, minX, minY, maxX, maxY);\n    writer(i + 3, minX, minY, maxX, maxY);\n  }\n}\n\nfunction writeBatchId(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  if (!defined(billboardCollection._batchTable)) {\n    return;\n  }\n\n  var writer = vafWriters[attributeLocations.a_batchId];\n  var id = billboard._batchIndex;\n  var i;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, id);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, id);\n    writer(i + 1, id);\n    writer(i + 2, id);\n    writer(i + 3, id);\n  }\n}\n\nfunction writeSDF(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  if (!billboardCollection._sdf) {\n    return;\n  }\n\n  var i;\n  var writer = vafWriters[attributeLocations.sdf];\n  var outlineColor = billboard.outlineColor;\n  var outlineWidth = billboard.outlineWidth;\n  var red = Color.floatToByte(outlineColor.red);\n  var green = Color.floatToByte(outlineColor.green);\n  var blue = Color.floatToByte(outlineColor.blue);\n  var compressed0 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue; // Compute the relative outline distance\n\n  var outlineDistance = outlineWidth / SDFSettings.RADIUS;\n  var compressed1 = Color.floatToByte(outlineColor.alpha) * LEFT_SHIFT16 + Color.floatToByte(outlineDistance) * LEFT_SHIFT8;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, compressed0 + LOWER_LEFT, compressed1);\n    writer(i + 1, compressed0 + LOWER_RIGHT, compressed1);\n    writer(i + 2, compressed0 + UPPER_RIGHT, compressed1);\n    writer(i + 3, compressed0 + UPPER_LEFT, compressed1);\n  }\n}\n\nfunction writeBillboard(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard) {\n  writePositionScaleAndRotation(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard);\n  writeCompressedAttrib0(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard);\n  writeCompressedAttrib1(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard);\n  writeCompressedAttrib2(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard);\n  writeEyeOffset(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard);\n  writeScaleByDistance(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard);\n  writePixelOffsetScaleByDistance(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard);\n  writeCompressedAttribute3(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard);\n  writeTextureCoordinateBoundsOrLabelTranslate(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard);\n  writeBatchId(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard);\n  writeSDF(billboardCollection, frameState, textureAtlasCoordinates, vafWriters, billboard);\n}\n\nfunction recomputeActualPositions(billboardCollection, billboards, length, frameState, modelMatrix, recomputeBoundingVolume) {\n  var boundingVolume;\n\n  if (frameState.mode === SceneMode.SCENE3D) {\n    boundingVolume = billboardCollection._baseVolume;\n    billboardCollection._boundingVolumeDirty = true;\n  } else {\n    boundingVolume = billboardCollection._baseVolume2D;\n  }\n\n  var positions = [];\n\n  for (var i = 0; i < length; ++i) {\n    var billboard = billboards[i];\n    var position = billboard.position;\n\n    var actualPosition = Billboard._computeActualPosition(billboard, position, frameState, modelMatrix);\n\n    if (defined(actualPosition)) {\n      billboard._setActualPosition(actualPosition);\n\n      if (recomputeBoundingVolume) {\n        positions.push(actualPosition);\n      } else {\n        BoundingSphere.expand(boundingVolume, actualPosition, boundingVolume);\n      }\n    }\n  }\n\n  if (recomputeBoundingVolume) {\n    BoundingSphere.fromPoints(positions, boundingVolume);\n  }\n}\n\nfunction updateMode(billboardCollection, frameState) {\n  var mode = frameState.mode;\n  var billboards = billboardCollection._billboards;\n  var billboardsToUpdate = billboardCollection._billboardsToUpdate;\n  var modelMatrix = billboardCollection._modelMatrix;\n\n  if (billboardCollection._createVertexArray || billboardCollection._mode !== mode || mode !== SceneMode.SCENE3D && !Matrix4.equals(modelMatrix, billboardCollection.modelMatrix)) {\n    billboardCollection._mode = mode;\n    Matrix4.clone(billboardCollection.modelMatrix, modelMatrix);\n    billboardCollection._createVertexArray = true;\n\n    if (mode === SceneMode.SCENE3D || mode === SceneMode.SCENE2D || mode === SceneMode.COLUMBUS_VIEW) {\n      recomputeActualPositions(billboardCollection, billboards, billboards.length, frameState, modelMatrix, true);\n    }\n  } else if (mode === SceneMode.MORPHING) {\n    recomputeActualPositions(billboardCollection, billboards, billboards.length, frameState, modelMatrix, true);\n  } else if (mode === SceneMode.SCENE2D || mode === SceneMode.COLUMBUS_VIEW) {\n    recomputeActualPositions(billboardCollection, billboardsToUpdate, billboardCollection._billboardsToUpdateIndex, frameState, modelMatrix, false);\n  }\n}\n\nfunction updateBoundingVolume(collection, frameState, boundingVolume) {\n  var pixelScale = 1.0;\n\n  if (!collection._allSizedInMeters || collection._maxPixelOffset !== 0.0) {\n    pixelScale = frameState.camera.getPixelSize(boundingVolume, frameState.context.drawingBufferWidth, frameState.context.drawingBufferHeight);\n  }\n\n  var size = pixelScale * collection._maxScale * collection._maxSize * 2.0;\n\n  if (collection._allHorizontalCenter && collection._allVerticalCenter) {\n    size *= 0.5;\n  }\n\n  var offset = pixelScale * collection._maxPixelOffset + collection._maxEyeOffset;\n  boundingVolume.radius += size + offset;\n}\n\nfunction createDebugCommand(billboardCollection, context) {\n  var fs;\n  fs = \"uniform sampler2D billboard_texture; \\n\" + \"varying vec2 v_textureCoordinates; \\n\" + \"void main() \\n\" + \"{ \\n\" + \"    gl_FragColor = texture2D(billboard_texture, v_textureCoordinates); \\n\" + \"} \\n\";\n  var drawCommand = context.createViewportQuadCommand(fs, {\n    uniformMap: {\n      billboard_texture: function () {\n        return billboardCollection._textureAtlas.texture;\n      }\n    }\n  });\n  drawCommand.pass = Pass.OVERLAY;\n  return drawCommand;\n}\n\nvar scratchWriterArray = [];\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {RuntimeError} image with id must be in the atlas.\n */\n\nBillboardCollection.prototype.update = function (frameState) {\n  removeBillboards(this);\n\n  if (!this.show) {\n    return;\n  }\n\n  var billboards = this._billboards;\n  var billboardsLength = billboards.length;\n  var context = frameState.context;\n  this._instanced = context.instancedArrays;\n  attributeLocations = this._instanced ? attributeLocationsInstanced : attributeLocationsBatched;\n  getIndexBuffer = this._instanced ? getIndexBufferInstanced : getIndexBufferBatched;\n  var textureAtlas = this._textureAtlas;\n\n  if (!defined(textureAtlas)) {\n    textureAtlas = this._textureAtlas = new TextureAtlas({\n      context: context\n    });\n\n    for (var ii = 0; ii < billboardsLength; ++ii) {\n      billboards[ii]._loadImage();\n    }\n  }\n\n  var textureAtlasCoordinates = textureAtlas.textureCoordinates;\n\n  if (textureAtlasCoordinates.length === 0) {\n    // Can't write billboard vertices until we have texture coordinates\n    // provided by a texture atlas\n    return;\n  }\n\n  updateMode(this, frameState);\n  billboards = this._billboards;\n  billboardsLength = billboards.length;\n  var billboardsToUpdate = this._billboardsToUpdate;\n  var billboardsToUpdateLength = this._billboardsToUpdateIndex;\n  var properties = this._propertiesChanged;\n  var textureAtlasGUID = textureAtlas.guid;\n  var createVertexArray = this._createVertexArray || this._textureAtlasGUID !== textureAtlasGUID;\n  this._textureAtlasGUID = textureAtlasGUID;\n  var vafWriters;\n  var pass = frameState.passes;\n  var picking = pass.pick; // PERFORMANCE_IDEA: Round robin multiple buffers.\n\n  if (createVertexArray || !picking && this.computeNewBuffersUsage()) {\n    this._createVertexArray = false;\n\n    for (var k = 0; k < NUMBER_OF_PROPERTIES; ++k) {\n      properties[k] = 0;\n    }\n\n    this._vaf = this._vaf && this._vaf.destroy();\n\n    if (billboardsLength > 0) {\n      // PERFORMANCE_IDEA:  Instead of creating a new one, resize like std::vector.\n      this._vaf = createVAF(context, billboardsLength, this._buffersUsage, this._instanced, this._batchTable, this._sdf);\n      vafWriters = this._vaf.writers; // Rewrite entire buffer if billboards were added or removed.\n\n      for (var i = 0; i < billboardsLength; ++i) {\n        var billboard = this._billboards[i];\n        billboard._dirty = false; // In case it needed an update.\n\n        writeBillboard(this, frameState, textureAtlasCoordinates, vafWriters, billboard);\n      } // Different billboard collections share the same index buffer.\n\n\n      this._vaf.commit(getIndexBuffer(context));\n    }\n\n    this._billboardsToUpdateIndex = 0;\n  } else if (billboardsToUpdateLength > 0) {\n    // Billboards were modified, but none were added or removed.\n    var writers = scratchWriterArray;\n    writers.length = 0;\n\n    if (properties[POSITION_INDEX] || properties[ROTATION_INDEX] || properties[SCALE_INDEX]) {\n      writers.push(writePositionScaleAndRotation);\n    }\n\n    if (properties[IMAGE_INDEX_INDEX] || properties[PIXEL_OFFSET_INDEX] || properties[HORIZONTAL_ORIGIN_INDEX] || properties[VERTICAL_ORIGIN_INDEX] || properties[SHOW_INDEX]) {\n      writers.push(writeCompressedAttrib0);\n\n      if (this._instanced) {\n        writers.push(writeEyeOffset);\n      }\n    }\n\n    if (properties[IMAGE_INDEX_INDEX] || properties[ALIGNED_AXIS_INDEX] || properties[TRANSLUCENCY_BY_DISTANCE_INDEX]) {\n      writers.push(writeCompressedAttrib1);\n      writers.push(writeCompressedAttrib2);\n    }\n\n    if (properties[IMAGE_INDEX_INDEX] || properties[COLOR_INDEX]) {\n      writers.push(writeCompressedAttrib2);\n    }\n\n    if (properties[EYE_OFFSET_INDEX]) {\n      writers.push(writeEyeOffset);\n    }\n\n    if (properties[SCALE_BY_DISTANCE_INDEX]) {\n      writers.push(writeScaleByDistance);\n    }\n\n    if (properties[PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX]) {\n      writers.push(writePixelOffsetScaleByDistance);\n    }\n\n    if (properties[DISTANCE_DISPLAY_CONDITION_INDEX] || properties[DISABLE_DEPTH_DISTANCE] || properties[IMAGE_INDEX_INDEX] || properties[POSITION_INDEX]) {\n      writers.push(writeCompressedAttribute3);\n    }\n\n    if (properties[IMAGE_INDEX_INDEX] || properties[POSITION_INDEX]) {\n      writers.push(writeTextureCoordinateBoundsOrLabelTranslate);\n    }\n\n    if (properties[SDF_INDEX]) {\n      writers.push(writeSDF);\n    }\n\n    var numWriters = writers.length;\n    vafWriters = this._vaf.writers;\n\n    if (billboardsToUpdateLength / billboardsLength > 0.1) {\n      // If more than 10% of billboard change, rewrite the entire buffer.\n      // PERFORMANCE_IDEA:  I totally made up 10% :).\n      for (var m = 0; m < billboardsToUpdateLength; ++m) {\n        var b = billboardsToUpdate[m];\n        b._dirty = false;\n\n        for (var n = 0; n < numWriters; ++n) {\n          writers[n](this, frameState, textureAtlasCoordinates, vafWriters, b);\n        }\n      }\n\n      this._vaf.commit(getIndexBuffer(context));\n    } else {\n      for (var h = 0; h < billboardsToUpdateLength; ++h) {\n        var bb = billboardsToUpdate[h];\n        bb._dirty = false;\n\n        for (var o = 0; o < numWriters; ++o) {\n          writers[o](this, frameState, textureAtlasCoordinates, vafWriters, bb);\n        }\n\n        if (this._instanced) {\n          this._vaf.subCommit(bb._index, 1);\n        } else {\n          this._vaf.subCommit(bb._index * 4, 4);\n        }\n      }\n\n      this._vaf.endSubCommits();\n    }\n\n    this._billboardsToUpdateIndex = 0;\n  } // If the number of total billboards ever shrinks considerably\n  // Truncate billboardsToUpdate so that we free memory that we're\n  // not going to be using.\n\n\n  if (billboardsToUpdateLength > billboardsLength * 1.5) {\n    billboardsToUpdate.length = billboardsLength;\n  }\n\n  if (!defined(this._vaf) || !defined(this._vaf.va)) {\n    return;\n  }\n\n  if (this._boundingVolumeDirty) {\n    this._boundingVolumeDirty = false;\n    BoundingSphere.transform(this._baseVolume, this.modelMatrix, this._baseVolumeWC);\n  }\n\n  var boundingVolume;\n  var modelMatrix = Matrix4.IDENTITY;\n\n  if (frameState.mode === SceneMode.SCENE3D) {\n    modelMatrix = this.modelMatrix;\n    boundingVolume = BoundingSphere.clone(this._baseVolumeWC, this._boundingVolume);\n  } else {\n    boundingVolume = BoundingSphere.clone(this._baseVolume2D, this._boundingVolume);\n  }\n\n  updateBoundingVolume(this, frameState, boundingVolume);\n  var blendOptionChanged = this._blendOption !== this.blendOption;\n  this._blendOption = this.blendOption;\n\n  if (blendOptionChanged) {\n    if (this._blendOption === BlendOption.OPAQUE || this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT) {\n      this._rsOpaque = RenderState.fromCache({\n        depthTest: {\n          enabled: true,\n          func: WebGLConstants.LESS\n        },\n        depthMask: true\n      });\n    } else {\n      this._rsOpaque = undefined;\n    } // If OPAQUE_AND_TRANSLUCENT is in use, only the opaque pass gets the benefit of the depth buffer,\n    // not the translucent pass.  Otherwise, if the TRANSLUCENT pass is on its own, it turns on\n    // a depthMask in lieu of full depth sorting (because it has opaque-ish fragments that look bad in OIT).\n    // When the TRANSLUCENT depth mask is in use, label backgrounds require the depth func to be LEQUAL.\n\n\n    var useTranslucentDepthMask = this._blendOption === BlendOption.TRANSLUCENT;\n\n    if (this._blendOption === BlendOption.TRANSLUCENT || this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT) {\n      this._rsTranslucent = RenderState.fromCache({\n        depthTest: {\n          enabled: true,\n          func: useTranslucentDepthMask ? WebGLConstants.LEQUAL : WebGLConstants.LESS\n        },\n        depthMask: useTranslucentDepthMask,\n        blending: BlendingState.ALPHA_BLEND\n      });\n    } else {\n      this._rsTranslucent = undefined;\n    }\n  }\n\n  this._shaderDisableDepthDistance = this._shaderDisableDepthDistance || frameState.minimumDisableDepthTestDistance !== 0.0;\n  var vsSource;\n  var fsSource;\n  var vs;\n  var fs;\n  var vertDefines;\n  var supportVSTextureReads = ContextLimits.maximumVertexTextureImageUnits > 0;\n\n  if (blendOptionChanged || this._shaderRotation !== this._compiledShaderRotation || this._shaderAlignedAxis !== this._compiledShaderAlignedAxis || this._shaderScaleByDistance !== this._compiledShaderScaleByDistance || this._shaderTranslucencyByDistance !== this._compiledShaderTranslucencyByDistance || this._shaderPixelOffsetScaleByDistance !== this._compiledShaderPixelOffsetScaleByDistance || this._shaderDistanceDisplayCondition !== this._compiledShaderDistanceDisplayCondition || this._shaderDisableDepthDistance !== this._compiledShaderDisableDepthDistance || this._shaderClampToGround !== this._compiledShaderClampToGround || this._sdf !== this._compiledSDF) {\n    vsSource = BillboardCollectionVS;\n    fsSource = BillboardCollectionFS;\n    vertDefines = [];\n\n    if (defined(this._batchTable)) {\n      vertDefines.push(\"VECTOR_TILE\");\n      vsSource = this._batchTable.getVertexShaderCallback(false, \"a_batchId\", undefined)(vsSource);\n      fsSource = this._batchTable.getFragmentShaderCallback(false, undefined)(fsSource);\n    }\n\n    vs = new ShaderSource({\n      defines: vertDefines,\n      sources: [vsSource]\n    });\n\n    if (this._instanced) {\n      vs.defines.push(\"INSTANCED\");\n    }\n\n    if (this._shaderRotation) {\n      vs.defines.push(\"ROTATION\");\n    }\n\n    if (this._shaderAlignedAxis) {\n      vs.defines.push(\"ALIGNED_AXIS\");\n    }\n\n    if (this._shaderScaleByDistance) {\n      vs.defines.push(\"EYE_DISTANCE_SCALING\");\n    }\n\n    if (this._shaderTranslucencyByDistance) {\n      vs.defines.push(\"EYE_DISTANCE_TRANSLUCENCY\");\n    }\n\n    if (this._shaderPixelOffsetScaleByDistance) {\n      vs.defines.push(\"EYE_DISTANCE_PIXEL_OFFSET\");\n    }\n\n    if (this._shaderDistanceDisplayCondition) {\n      vs.defines.push(\"DISTANCE_DISPLAY_CONDITION\");\n    }\n\n    if (this._shaderDisableDepthDistance) {\n      vs.defines.push(\"DISABLE_DEPTH_DISTANCE\");\n    }\n\n    if (this._shaderClampToGround) {\n      if (supportVSTextureReads) {\n        vs.defines.push(\"VERTEX_DEPTH_CHECK\");\n      } else {\n        vs.defines.push(\"FRAGMENT_DEPTH_CHECK\");\n      }\n    }\n\n    var sdfEdge = 1.0 - SDFSettings.CUTOFF;\n\n    if (this._sdf) {\n      vs.defines.push(\"SDF\");\n    }\n\n    var vectorFragDefine = defined(this._batchTable) ? \"VECTOR_TILE\" : \"\";\n\n    if (this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT) {\n      fs = new ShaderSource({\n        defines: [\"OPAQUE\", vectorFragDefine],\n        sources: [fsSource]\n      });\n\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push(\"VERTEX_DEPTH_CHECK\");\n        } else {\n          fs.defines.push(\"FRAGMENT_DEPTH_CHECK\");\n        }\n      }\n\n      if (this._sdf) {\n        fs.defines.push(\"SDF\");\n        fs.defines.push(\"SDF_EDGE \" + sdfEdge);\n      }\n\n      this._sp = ShaderProgram.replaceCache({\n        context: context,\n        shaderProgram: this._sp,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations\n      });\n      fs = new ShaderSource({\n        defines: [\"TRANSLUCENT\", vectorFragDefine],\n        sources: [fsSource]\n      });\n\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push(\"VERTEX_DEPTH_CHECK\");\n        } else {\n          fs.defines.push(\"FRAGMENT_DEPTH_CHECK\");\n        }\n      }\n\n      if (this._sdf) {\n        fs.defines.push(\"SDF\");\n        fs.defines.push(\"SDF_EDGE \" + sdfEdge);\n      }\n\n      this._spTranslucent = ShaderProgram.replaceCache({\n        context: context,\n        shaderProgram: this._spTranslucent,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations\n      });\n    }\n\n    if (this._blendOption === BlendOption.OPAQUE) {\n      fs = new ShaderSource({\n        defines: [vectorFragDefine],\n        sources: [fsSource]\n      });\n\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push(\"VERTEX_DEPTH_CHECK\");\n        } else {\n          fs.defines.push(\"FRAGMENT_DEPTH_CHECK\");\n        }\n      }\n\n      if (this._sdf) {\n        fs.defines.push(\"SDF\");\n        fs.defines.push(\"SDF_EDGE \" + sdfEdge);\n      }\n\n      this._sp = ShaderProgram.replaceCache({\n        context: context,\n        shaderProgram: this._sp,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations\n      });\n    }\n\n    if (this._blendOption === BlendOption.TRANSLUCENT) {\n      fs = new ShaderSource({\n        defines: [vectorFragDefine],\n        sources: [fsSource]\n      });\n\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push(\"VERTEX_DEPTH_CHECK\");\n        } else {\n          fs.defines.push(\"FRAGMENT_DEPTH_CHECK\");\n        }\n      }\n\n      if (this._sdf) {\n        fs.defines.push(\"SDF\");\n        fs.defines.push(\"SDF_EDGE \" + sdfEdge);\n      }\n\n      this._spTranslucent = ShaderProgram.replaceCache({\n        context: context,\n        shaderProgram: this._spTranslucent,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations\n      });\n    }\n\n    this._compiledShaderRotation = this._shaderRotation;\n    this._compiledShaderAlignedAxis = this._shaderAlignedAxis;\n    this._compiledShaderScaleByDistance = this._shaderScaleByDistance;\n    this._compiledShaderTranslucencyByDistance = this._shaderTranslucencyByDistance;\n    this._compiledShaderPixelOffsetScaleByDistance = this._shaderPixelOffsetScaleByDistance;\n    this._compiledShaderDistanceDisplayCondition = this._shaderDistanceDisplayCondition;\n    this._compiledShaderDisableDepthDistance = this._shaderDisableDepthDistance;\n    this._compiledShaderClampToGround = this._shaderClampToGround;\n    this._compiledSDF = this._sdf;\n  }\n\n  var commandList = frameState.commandList;\n\n  if (pass.render || pass.pick) {\n    var colorList = this._colorCommands;\n    var opaque = this._blendOption === BlendOption.OPAQUE;\n    var opaqueAndTranslucent = this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT;\n    var va = this._vaf.va;\n    var vaLength = va.length;\n    var uniforms = this._uniforms;\n    var pickId;\n\n    if (defined(this._batchTable)) {\n      uniforms = this._batchTable.getUniformMapCallback()(uniforms);\n      pickId = this._batchTable.getPickId();\n    } else {\n      pickId = \"v_pickColor\";\n    }\n\n    colorList.length = vaLength;\n    var totalLength = opaqueAndTranslucent ? vaLength * 2 : vaLength;\n\n    for (var j = 0; j < totalLength; ++j) {\n      var command = colorList[j];\n\n      if (!defined(command)) {\n        command = colorList[j] = new DrawCommand();\n      }\n\n      var opaqueCommand = opaque || opaqueAndTranslucent && j % 2 === 0;\n      command.pass = opaqueCommand || !opaqueAndTranslucent ? Pass.OPAQUE : Pass.TRANSLUCENT;\n      command.owner = this;\n      var index = opaqueAndTranslucent ? Math.floor(j / 2.0) : j;\n      command.boundingVolume = boundingVolume;\n      command.modelMatrix = modelMatrix;\n      command.count = va[index].indicesCount;\n      command.shaderProgram = opaqueCommand ? this._sp : this._spTranslucent;\n      command.uniformMap = uniforms;\n      command.vertexArray = va[index].va;\n      command.renderState = opaqueCommand ? this._rsOpaque : this._rsTranslucent;\n      command.debugShowBoundingVolume = this.debugShowBoundingVolume;\n      command.pickId = pickId;\n\n      if (this._instanced) {\n        command.count = 6;\n        command.instanceCount = billboardsLength;\n      }\n\n      commandList.push(command);\n    }\n\n    if (this.debugShowTextureAtlas) {\n      if (!defined(this.debugCommand)) {\n        this.debugCommand = createDebugCommand(this, frameState.context);\n      }\n\n      commandList.push(this.debugCommand);\n    }\n  }\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see BillboardCollection#destroy\n */\n\n\nBillboardCollection.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * billboards = billboards && billboards.destroy();\n *\n * @see BillboardCollection#isDestroyed\n */\n\n\nBillboardCollection.prototype.destroy = function () {\n  if (defined(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n\n    this._removeCallbackFunc = undefined;\n  }\n\n  this._textureAtlas = this._destroyTextureAtlas && this._textureAtlas && this._textureAtlas.destroy();\n  this._sp = this._sp && this._sp.destroy();\n  this._spTranslucent = this._spTranslucent && this._spTranslucent.destroy();\n  this._vaf = this._vaf && this._vaf.destroy();\n  destroyBillboards(this._billboards);\n  return destroyObject(this);\n};\n\nexport default BillboardCollection;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Scene/BillboardCollection.js"],"names":["AttributeCompression","BoundingSphere","Cartesian2","Cartesian3","Color","ComponentDatatype","defaultValue","defined","destroyObject","DeveloperError","EncodedCartesian3","IndexDatatype","CesiumMath","Matrix4","WebGLConstants","Buffer","BufferUsage","ContextLimits","DrawCommand","Pass","RenderState","ShaderProgram","ShaderSource","VertexArrayFacade","BillboardCollectionFS","BillboardCollectionVS","Billboard","BlendingState","BlendOption","HeightReference","HorizontalOrigin","SceneMode","SDFSettings","TextureAtlas","VerticalOrigin","SHOW_INDEX","POSITION_INDEX","PIXEL_OFFSET_INDEX","EYE_OFFSET_INDEX","HORIZONTAL_ORIGIN_INDEX","VERTICAL_ORIGIN_INDEX","SCALE_INDEX","IMAGE_INDEX_INDEX","COLOR_INDEX","ROTATION_INDEX","ALIGNED_AXIS_INDEX","SCALE_BY_DISTANCE_INDEX","TRANSLUCENCY_BY_DISTANCE_INDEX","PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX","DISTANCE_DISPLAY_CONDITION_INDEX","DISTANCE_DISPLAY_CONDITION","DISABLE_DEPTH_DISTANCE","TEXTURE_COORDINATE_BOUNDS","SDF_INDEX","NUMBER_OF_PROPERTIES","attributeLocations","attributeLocationsBatched","positionHighAndScale","positionLowAndRotation","compressedAttribute0","compressedAttribute1","compressedAttribute2","eyeOffset","scaleByDistance","pixelOffsetScaleByDistance","compressedAttribute3","textureCoordinateBoundsOrLabelTranslate","a_batchId","sdf","attributeLocationsInstanced","direction","BillboardCollection","options","EMPTY_OBJECT","_scene","scene","_batchTable","batchTable","_textureAtlas","undefined","_textureAtlasGUID","_destroyTextureAtlas","_sp","_spTranslucent","_rsOpaque","_rsTranslucent","_vaf","_billboards","_billboardsToUpdate","_billboardsToUpdateIndex","_billboardsRemoved","_createVertexArray","_shaderRotation","_compiledShaderRotation","_shaderAlignedAxis","_compiledShaderAlignedAxis","_shaderScaleByDistance","_compiledShaderScaleByDistance","_shaderTranslucencyByDistance","_compiledShaderTranslucencyByDistance","_shaderPixelOffsetScaleByDistance","_compiledShaderPixelOffsetScaleByDistance","_shaderDistanceDisplayCondition","_compiledShaderDistanceDisplayCondition","_shaderDisableDepthDistance","_compiledShaderDisableDepthDistance","_shaderClampToGround","_compiledShaderClampToGround","_propertiesChanged","Uint32Array","_maxSize","_maxEyeOffset","_maxScale","_maxPixelOffset","_allHorizontalCenter","_allVerticalCenter","_allSizedInMeters","_baseVolume","_baseVolumeWC","_baseVolume2D","_boundingVolume","_boundingVolumeDirty","_colorCommands","show","modelMatrix","clone","IDENTITY","_modelMatrix","debugShowBoundingVolume","debugShowTextureAtlas","blendOption","OPAQUE_AND_TRANSLUCENT","_blendOption","_mode","SCENE3D","_buffersUsage","STATIC_DRAW","_highlightColor","WHITE","that","_uniforms","u_atlas","texture","u_highlightColor","terrainProviderChanged","_removeCallbackFunc","addEventListener","billboards","length","i","_updateClamping","Object","defineProperties","prototype","get","removeBillboards","textureAtlas","set","value","destroy","destroyTextureAtlas","destroyBillboards","_destroy","add","b","_index","push","remove","billboard","contains","removeAll","billboardCollection","newBillboards","j","_updateBillboard","propertyChanged","_dirty","_billboardCollection","index","getIndexBuffer","getIndexBufferBatched","context","sixteenK","indexBuffer","cache","billboardCollection_indexBufferBatched","indices","Uint16Array","createIndexBuffer","typedArray","usage","indexDatatype","UNSIGNED_SHORT","vertexArrayDestroyable","getIndexBufferInstanced","billboardCollection_indexBufferInstanced","getVertexBufferInstanced","vertexBuffer","billboardCollection_vertexBufferInstanced","createVertexBuffer","Float32Array","computeNewBuffersUsage","buffersUsage","usageChanged","properties","k","newUsage","STREAM_DRAW","createVAF","numberOfBillboards","instanced","attributes","componentsPerAttribute","componentDatatype","FLOAT","bufferUsage","sizeInVertices","writePositionScratch","writePositionScaleAndRotation","frameState","textureAtlasCoordinates","vafWriters","positionHighWriter","positionLowWriter","position","_getActualPosition","expand","fromCartesian","scale","rotation","Math","max","high","low","_instanced","x","y","z","scratchCartesian2","UPPER_BOUND","LEFT_SHIFT16","LEFT_SHIFT12","LEFT_SHIFT8","LEFT_SHIFT7","LEFT_SHIFT5","LEFT_SHIFT3","LEFT_SHIFT2","RIGHT_SHIFT8","LOWER_LEFT","LOWER_RIGHT","UPPER_RIGHT","UPPER_LEFT","writeCompressedAttrib0","writer","pixelOffset","pixelOffsetX","pixelOffsetY","translate","_translate","translateX","translateY","abs","horizontalOrigin","verticalOrigin","_verticalOrigin","clusterShow","color","alpha","BASELINE","BOTTOM","CENTER","bottomLeftX","bottomLeftY","width","height","_imageIndex","imageRectangle","topRightX","topRightY","compressed0","floor","clamp","compressed1","compressed2","tempTanslateY","upperTranslateY","lowerTranslateY","compressedTexCoordsLL","compressTextureCoordinates","compressedTexCoordsLR","compressedTexCoordsUR","compressedTexCoordsUL","writeCompressedAttrib1","alignedAxis","equals","ZERO","near","nearValue","far","farValue","translucency","translucencyByDistance","textureWidth","imageWidth","round","magnitudeSquared","EPSILON6","octEncodeFloat","writeCompressedAttrib2","pickColor","getPickId","sizeInMeters","validAlignedAxis","dimensions","imageHeight","labelHorizontalOrigin","_labelHorizontalOrigin","compressed3","red","floatToByte","green","blue","writeEyeOffset","eyeOffsetZ","_heightReference","NONE","compressedTexCoordsRange","writeScaleByDistance","writePixelOffsetScaleByDistance","pixelOffsetScale","writeCompressedAttribute3","Number","MAX_VALUE","distanceDisplayCondition","disableDepthTestDistance","clampToGround","heightReference","CLAMP_TO_GROUND","depthTexture","POSITIVE_INFINITY","_labelDimensions","w","h","writeTextureCoordinateBoundsOrLabelTranslate","globeTranslucent","globeTranslucencyState","translucent","depthTestAgainstTerrain","globe","maximumVertexTextureImageUnits","_labelTranslate","minX","minY","maxX","maxY","writeBatchId","id","_batchIndex","writeSDF","_sdf","outlineColor","outlineWidth","outlineDistance","RADIUS","writeBillboard","recomputeActualPositions","recomputeBoundingVolume","boundingVolume","mode","positions","actualPosition","_computeActualPosition","_setActualPosition","fromPoints","updateMode","billboardsToUpdate","SCENE2D","COLUMBUS_VIEW","MORPHING","updateBoundingVolume","collection","pixelScale","camera","getPixelSize","drawingBufferWidth","drawingBufferHeight","size","offset","radius","createDebugCommand","fs","drawCommand","createViewportQuadCommand","uniformMap","billboard_texture","pass","OVERLAY","scratchWriterArray","update","billboardsLength","instancedArrays","ii","_loadImage","textureCoordinates","billboardsToUpdateLength","textureAtlasGUID","guid","createVertexArray","passes","picking","pick","writers","commit","numWriters","m","n","bb","o","subCommit","endSubCommits","va","transform","blendOptionChanged","OPAQUE","fromCache","depthTest","enabled","func","LESS","depthMask","useTranslucentDepthMask","TRANSLUCENT","LEQUAL","blending","ALPHA_BLEND","minimumDisableDepthTestDistance","vsSource","fsSource","vs","vertDefines","supportVSTextureReads","_compiledSDF","getVertexShaderCallback","getFragmentShaderCallback","defines","sources","sdfEdge","CUTOFF","vectorFragDefine","replaceCache","shaderProgram","vertexShaderSource","fragmentShaderSource","commandList","render","colorList","opaque","opaqueAndTranslucent","vaLength","uniforms","pickId","getUniformMapCallback","totalLength","command","opaqueCommand","owner","count","indicesCount","vertexArray","renderState","instanceCount","debugCommand","isDestroyed"],"mappings":"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","sourcesContent":["import AttributeCompression from \"../Core/AttributeCompression.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport EncodedCartesian3 from \"../Core/EncodedCartesian3.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport Buffer from \"../Renderer/Buffer.js\";\nimport BufferUsage from \"../Renderer/BufferUsage.js\";\nimport ContextLimits from \"../Renderer/ContextLimits.js\";\nimport DrawCommand from \"../Renderer/DrawCommand.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderProgram from \"../Renderer/ShaderProgram.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport VertexArrayFacade from \"../Renderer/VertexArrayFacade.js\";\nimport BillboardCollectionFS from \"../Shaders/BillboardCollectionFS.js\";\nimport BillboardCollectionVS from \"../Shaders/BillboardCollectionVS.js\";\nimport Billboard from \"./Billboard.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport BlendOption from \"./BlendOption.js\";\nimport HeightReference from \"./HeightReference.js\";\nimport HorizontalOrigin from \"./HorizontalOrigin.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport SDFSettings from \"./SDFSettings.js\";\nimport TextureAtlas from \"./TextureAtlas.js\";\nimport VerticalOrigin from \"./VerticalOrigin.js\";\n\nvar SHOW_INDEX = Billboard.SHOW_INDEX;\nvar POSITION_INDEX = Billboard.POSITION_INDEX;\nvar PIXEL_OFFSET_INDEX = Billboard.PIXEL_OFFSET_INDEX;\nvar EYE_OFFSET_INDEX = Billboard.EYE_OFFSET_INDEX;\nvar HORIZONTAL_ORIGIN_INDEX = Billboard.HORIZONTAL_ORIGIN_INDEX;\nvar VERTICAL_ORIGIN_INDEX = Billboard.VERTICAL_ORIGIN_INDEX;\nvar SCALE_INDEX = Billboard.SCALE_INDEX;\nvar IMAGE_INDEX_INDEX = Billboard.IMAGE_INDEX_INDEX;\nvar COLOR_INDEX = Billboard.COLOR_INDEX;\nvar ROTATION_INDEX = Billboard.ROTATION_INDEX;\nvar ALIGNED_AXIS_INDEX = Billboard.ALIGNED_AXIS_INDEX;\nvar SCALE_BY_DISTANCE_INDEX = Billboard.SCALE_BY_DISTANCE_INDEX;\nvar TRANSLUCENCY_BY_DISTANCE_INDEX = Billboard.TRANSLUCENCY_BY_DISTANCE_INDEX;\nvar PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX =\n  Billboard.PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX;\nvar DISTANCE_DISPLAY_CONDITION_INDEX = Billboard.DISTANCE_DISPLAY_CONDITION;\nvar DISABLE_DEPTH_DISTANCE = Billboard.DISABLE_DEPTH_DISTANCE;\nvar TEXTURE_COORDINATE_BOUNDS = Billboard.TEXTURE_COORDINATE_BOUNDS;\nvar SDF_INDEX = Billboard.SDF_INDEX;\nvar NUMBER_OF_PROPERTIES = Billboard.NUMBER_OF_PROPERTIES;\n\nvar attributeLocations;\n\nvar attributeLocationsBatched = {\n  positionHighAndScale: 0,\n  positionLowAndRotation: 1,\n  compressedAttribute0: 2, // pixel offset, translate, horizontal origin, vertical origin, show, direction, texture coordinates\n  compressedAttribute1: 3, // aligned axis, translucency by distance, image width\n  compressedAttribute2: 4, // image height, color, pick color, size in meters, valid aligned axis, 13 bits free\n  eyeOffset: 5, // 4 bytes free\n  scaleByDistance: 6,\n  pixelOffsetScaleByDistance: 7,\n  compressedAttribute3: 8,\n  textureCoordinateBoundsOrLabelTranslate: 9,\n  a_batchId: 10,\n  sdf: 11,\n};\n\nvar attributeLocationsInstanced = {\n  direction: 0,\n  positionHighAndScale: 1,\n  positionLowAndRotation: 2, // texture offset in w\n  compressedAttribute0: 3,\n  compressedAttribute1: 4,\n  compressedAttribute2: 5,\n  eyeOffset: 6, // texture range in w\n  scaleByDistance: 7,\n  pixelOffsetScaleByDistance: 8,\n  compressedAttribute3: 9,\n  textureCoordinateBoundsOrLabelTranslate: 10,\n  a_batchId: 11,\n  sdf: 12,\n};\n\n/**\n * A renderable collection of billboards.  Billboards are viewport-aligned\n * images positioned in the 3D scene.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/Billboard.png' width='400' height='300' /><br />\n * Example billboards\n * </div>\n * <br /><br />\n * Billboards are added and removed from the collection using {@link BillboardCollection#add}\n * and {@link BillboardCollection#remove}.  Billboards in a collection automatically share textures\n * for images with the same identifier.\n *\n * @alias BillboardCollection\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms each billboard from model to world coordinates.\n * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Determines if this primitive's commands' bounding spheres are shown.\n * @param {Scene} [options.scene] Must be passed in for billboards that use the height reference property or will be depth tested against the globe.\n * @param {BlendOption} [options.blendOption=BlendOption.OPAQUE_AND_TRANSLUCENT] The billboard blending option. The default\n * is used for rendering both opaque and translucent billboards. However, if either all of the billboards are completely opaque or all are completely translucent,\n * setting the technique to BlendOption.OPAQUE or BlendOption.TRANSLUCENT can improve performance by up to 2x.\n * @param {Boolean} [options.show=true] Determines if the billboards in the collection will be shown.\n *\n * @performance For best performance, prefer a few collections, each with many billboards, to\n * many collections with only a few billboards each.  Organize collections so that billboards\n * with the same update frequency are in the same collection, i.e., billboards that do not\n * change should be in one collection; billboards that change every frame should be in another\n * collection; and so on.\n *\n * @see BillboardCollection#add\n * @see BillboardCollection#remove\n * @see Billboard\n * @see LabelCollection\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n *\n * @example\n * // Create a billboard collection with two billboards\n * var billboards = scene.primitives.add(new Cesium.BillboardCollection());\n * billboards.add({\n *   position : new Cesium.Cartesian3(1.0, 2.0, 3.0),\n *   image : 'url/to/image'\n * });\n * billboards.add({\n *   position : new Cesium.Cartesian3(4.0, 5.0, 6.0),\n *   image : 'url/to/another/image'\n * });\n */\nfunction BillboardCollection(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._scene = options.scene;\n  this._batchTable = options.batchTable;\n\n  this._textureAtlas = undefined;\n  this._textureAtlasGUID = undefined;\n  this._destroyTextureAtlas = true;\n  this._sp = undefined;\n  this._spTranslucent = undefined;\n  this._rsOpaque = undefined;\n  this._rsTranslucent = undefined;\n  this._vaf = undefined;\n\n  this._billboards = [];\n  this._billboardsToUpdate = [];\n  this._billboardsToUpdateIndex = 0;\n  this._billboardsRemoved = false;\n  this._createVertexArray = false;\n\n  this._shaderRotation = false;\n  this._compiledShaderRotation = false;\n\n  this._shaderAlignedAxis = false;\n  this._compiledShaderAlignedAxis = false;\n\n  this._shaderScaleByDistance = false;\n  this._compiledShaderScaleByDistance = false;\n\n  this._shaderTranslucencyByDistance = false;\n  this._compiledShaderTranslucencyByDistance = false;\n\n  this._shaderPixelOffsetScaleByDistance = false;\n  this._compiledShaderPixelOffsetScaleByDistance = false;\n\n  this._shaderDistanceDisplayCondition = false;\n  this._compiledShaderDistanceDisplayCondition = false;\n\n  this._shaderDisableDepthDistance = false;\n  this._compiledShaderDisableDepthDistance = false;\n\n  this._shaderClampToGround = false;\n  this._compiledShaderClampToGround = false;\n\n  this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);\n\n  this._maxSize = 0.0;\n  this._maxEyeOffset = 0.0;\n  this._maxScale = 1.0;\n  this._maxPixelOffset = 0.0;\n  this._allHorizontalCenter = true;\n  this._allVerticalCenter = true;\n  this._allSizedInMeters = true;\n\n  this._baseVolume = new BoundingSphere();\n  this._baseVolumeWC = new BoundingSphere();\n  this._baseVolume2D = new BoundingSphere();\n  this._boundingVolume = new BoundingSphere();\n  this._boundingVolumeDirty = false;\n\n  this._colorCommands = [];\n\n  /**\n   * Determines if billboards in this collection will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n\n  /**\n   * The 4x4 transformation matrix that transforms each billboard in this collection from model to world coordinates.\n   * When this is the identity matrix, the billboards are drawn in world coordinates, i.e., Earth's WGS84 coordinates.\n   * Local reference frames can be used by providing a different transformation matrix, like that returned\n   * by {@link Transforms.eastNorthUpToFixedFrame}.\n   *\n   * @type {Matrix4}\n   * @default {@link Matrix4.IDENTITY}\n   *\n   *\n   * @example\n   * var center = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\n   * billboards.modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(center);\n   * billboards.add({\n   *   image : 'url/to/image',\n   *   position : new Cesium.Cartesian3(0.0, 0.0, 0.0) // center\n   * });\n   * billboards.add({\n   *   image : 'url/to/image',\n   *   position : new Cesium.Cartesian3(1000000.0, 0.0, 0.0) // east\n   * });\n   * billboards.add({\n   *   image : 'url/to/image',\n   *   position : new Cesium.Cartesian3(0.0, 1000000.0, 0.0) // north\n   * });\n   * billboards.add({\n   *   image : 'url/to/image',\n   *   position : new Cesium.Cartesian3(0.0, 0.0, 1000000.0) // up\n   * });\n   *\n   * @see Transforms.eastNorthUpToFixedFrame\n   */\n  this.modelMatrix = Matrix4.clone(\n    defaultValue(options.modelMatrix, Matrix4.IDENTITY)\n  );\n  this._modelMatrix = Matrix4.clone(Matrix4.IDENTITY);\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the bounding sphere for each draw command in the primitive.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugShowBoundingVolume = defaultValue(\n    options.debugShowBoundingVolume,\n    false\n  );\n\n  /**\n   * This property is for debugging only; it is not for production use nor is it optimized.\n   * <p>\n   * Draws the texture atlas for this BillboardCollection as a fullscreen quad.\n   * </p>\n   *\n   * @type {Boolean}\n   *\n   * @default false\n   */\n  this.debugShowTextureAtlas = defaultValue(\n    options.debugShowTextureAtlas,\n    false\n  );\n\n  /**\n   * The billboard blending option. The default is used for rendering both opaque and translucent billboards.\n   * However, if either all of the billboards are completely opaque or all are completely translucent,\n   * setting the technique to BlendOption.OPAQUE or BlendOption.TRANSLUCENT can improve\n   * performance by up to 2x.\n   * @type {BlendOption}\n   * @default BlendOption.OPAQUE_AND_TRANSLUCENT\n   */\n  this.blendOption = defaultValue(\n    options.blendOption,\n    BlendOption.OPAQUE_AND_TRANSLUCENT\n  );\n  this._blendOption = undefined;\n\n  this._mode = SceneMode.SCENE3D;\n\n  // The buffer usage for each attribute is determined based on the usage of the attribute over time.\n  this._buffersUsage = [\n    BufferUsage.STATIC_DRAW, // SHOW_INDEX\n    BufferUsage.STATIC_DRAW, // POSITION_INDEX\n    BufferUsage.STATIC_DRAW, // PIXEL_OFFSET_INDEX\n    BufferUsage.STATIC_DRAW, // EYE_OFFSET_INDEX\n    BufferUsage.STATIC_DRAW, // HORIZONTAL_ORIGIN_INDEX\n    BufferUsage.STATIC_DRAW, // VERTICAL_ORIGIN_INDEX\n    BufferUsage.STATIC_DRAW, // SCALE_INDEX\n    BufferUsage.STATIC_DRAW, // IMAGE_INDEX_INDEX\n    BufferUsage.STATIC_DRAW, // COLOR_INDEX\n    BufferUsage.STATIC_DRAW, // ROTATION_INDEX\n    BufferUsage.STATIC_DRAW, // ALIGNED_AXIS_INDEX\n    BufferUsage.STATIC_DRAW, // SCALE_BY_DISTANCE_INDEX\n    BufferUsage.STATIC_DRAW, // TRANSLUCENCY_BY_DISTANCE_INDEX\n    BufferUsage.STATIC_DRAW, // PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX\n    BufferUsage.STATIC_DRAW, // DISTANCE_DISPLAY_CONDITION_INDEX\n    BufferUsage.STATIC_DRAW, // TEXTURE_COORDINATE_BOUNDS\n  ];\n\n  this._highlightColor = Color.clone(Color.WHITE); // Only used by Vector3DTilePoints\n\n  var that = this;\n  this._uniforms = {\n    u_atlas: function () {\n      return that._textureAtlas.texture;\n    },\n    u_highlightColor: function () {\n      return that._highlightColor;\n    },\n  };\n\n  var scene = this._scene;\n  if (defined(scene) && defined(scene.terrainProviderChanged)) {\n    this._removeCallbackFunc = scene.terrainProviderChanged.addEventListener(\n      function () {\n        var billboards = this._billboards;\n        var length = billboards.length;\n        for (var i = 0; i < length; ++i) {\n          if (defined(billboards[i])) {\n            billboards[i]._updateClamping();\n          }\n        }\n      },\n      this\n    );\n  }\n}\n\nObject.defineProperties(BillboardCollection.prototype, {\n  /**\n   * Returns the number of billboards in this collection.  This is commonly used with\n   * {@link BillboardCollection#get} to iterate over all the billboards\n   * in the collection.\n   * @memberof BillboardCollection.prototype\n   * @type {Number}\n   */\n  length: {\n    get: function () {\n      removeBillboards(this);\n      return this._billboards.length;\n    },\n  },\n\n  /**\n   * Gets or sets the textureAtlas.\n   * @memberof BillboardCollection.prototype\n   * @type {TextureAtlas}\n   * @private\n   */\n  textureAtlas: {\n    get: function () {\n      return this._textureAtlas;\n    },\n    set: function (value) {\n      if (this._textureAtlas !== value) {\n        this._textureAtlas =\n          this._destroyTextureAtlas &&\n          this._textureAtlas &&\n          this._textureAtlas.destroy();\n        this._textureAtlas = value;\n        this._createVertexArray = true; // New per-billboard texture coordinates\n      }\n    },\n  },\n\n  /**\n   * Gets or sets a value which determines if the texture atlas is\n   * destroyed when the collection is destroyed.\n   *\n   * If the texture atlas is used by more than one collection, set this to <code>false</code>,\n   * and explicitly destroy the atlas to avoid attempting to destroy it multiple times.\n   *\n   * @memberof BillboardCollection.prototype\n   * @type {Boolean}\n   * @private\n   *\n   * @example\n   * // Set destroyTextureAtlas\n   * // Destroy a billboard collection but not its texture atlas.\n   *\n   * var atlas = new TextureAtlas({\n   *   scene : scene,\n   *   images : images\n   * });\n   * billboards.textureAtlas = atlas;\n   * billboards.destroyTextureAtlas = false;\n   * billboards = billboards.destroy();\n   * console.log(atlas.isDestroyed()); // False\n   */\n  destroyTextureAtlas: {\n    get: function () {\n      return this._destroyTextureAtlas;\n    },\n    set: function (value) {\n      this._destroyTextureAtlas = value;\n    },\n  },\n});\n\nfunction destroyBillboards(billboards) {\n  var length = billboards.length;\n  for (var i = 0; i < length; ++i) {\n    if (billboards[i]) {\n      billboards[i]._destroy();\n    }\n  }\n}\n\n/**\n * Creates and adds a billboard with the specified initial properties to the collection.\n * The added billboard is returned so it can be modified or removed from the collection later.\n *\n * @param {Object}[options] A template describing the billboard's properties as shown in Example 1.\n * @returns {Billboard} The billboard that was added to the collection.\n *\n * @performance Calling <code>add</code> is expected constant time.  However, the collection's vertex buffer\n * is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.  For\n * best performance, add as many billboards as possible before calling <code>update</code>.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Example 1:  Add a billboard, specifying all the default values.\n * var b = billboards.add({\n *   show : true,\n *   position : Cesium.Cartesian3.ZERO,\n *   pixelOffset : Cesium.Cartesian2.ZERO,\n *   eyeOffset : Cesium.Cartesian3.ZERO,\n *   heightReference : Cesium.HeightReference.NONE,\n *   horizontalOrigin : Cesium.HorizontalOrigin.CENTER,\n *   verticalOrigin : Cesium.VerticalOrigin.CENTER,\n *   scale : 1.0,\n *   image : 'url/to/image',\n *   imageSubRegion : undefined,\n *   color : Cesium.Color.WHITE,\n *   id : undefined,\n *   rotation : 0.0,\n *   alignedAxis : Cesium.Cartesian3.ZERO,\n *   width : undefined,\n *   height : undefined,\n *   scaleByDistance : undefined,\n *   translucencyByDistance : undefined,\n *   pixelOffsetScaleByDistance : undefined,\n *   sizeInMeters : false,\n *   distanceDisplayCondition : undefined\n * });\n *\n * @example\n * // Example 2:  Specify only the billboard's cartographic position.\n * var b = billboards.add({\n *   position : Cesium.Cartesian3.fromDegrees(longitude, latitude, height)\n * });\n *\n * @see BillboardCollection#remove\n * @see BillboardCollection#removeAll\n */\nBillboardCollection.prototype.add = function (options) {\n  var b = new Billboard(options, this);\n  b._index = this._billboards.length;\n\n  this._billboards.push(b);\n  this._createVertexArray = true;\n\n  return b;\n};\n\n/**\n * Removes a billboard from the collection.\n *\n * @param {Billboard} billboard The billboard to remove.\n * @returns {Boolean} <code>true</code> if the billboard was removed; <code>false</code> if the billboard was not found in the collection.\n *\n * @performance Calling <code>remove</code> is expected constant time.  However, the collection's vertex buffer\n * is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.  For\n * best performance, remove as many billboards as possible before calling <code>update</code>.\n * If you intend to temporarily hide a billboard, it is usually more efficient to call\n * {@link Billboard#show} instead of removing and re-adding the billboard.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * var b = billboards.add(...);\n * billboards.remove(b);  // Returns true\n *\n * @see BillboardCollection#add\n * @see BillboardCollection#removeAll\n * @see Billboard#show\n */\nBillboardCollection.prototype.remove = function (billboard) {\n  if (this.contains(billboard)) {\n    this._billboards[billboard._index] = null; // Removed later\n    this._billboardsRemoved = true;\n    this._createVertexArray = true;\n    billboard._destroy();\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Removes all billboards from the collection.\n *\n * @performance <code>O(n)</code>.  It is more efficient to remove all the billboards\n * from a collection and then add new ones than to create a new collection entirely.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * billboards.add(...);\n * billboards.add(...);\n * billboards.removeAll();\n *\n * @see BillboardCollection#add\n * @see BillboardCollection#remove\n */\nBillboardCollection.prototype.removeAll = function () {\n  destroyBillboards(this._billboards);\n  this._billboards = [];\n  this._billboardsToUpdate = [];\n  this._billboardsToUpdateIndex = 0;\n  this._billboardsRemoved = false;\n\n  this._createVertexArray = true;\n};\n\nfunction removeBillboards(billboardCollection) {\n  if (billboardCollection._billboardsRemoved) {\n    billboardCollection._billboardsRemoved = false;\n\n    var newBillboards = [];\n    var billboards = billboardCollection._billboards;\n    var length = billboards.length;\n    for (var i = 0, j = 0; i < length; ++i) {\n      var billboard = billboards[i];\n      if (billboard) {\n        billboard._index = j++;\n        newBillboards.push(billboard);\n      }\n    }\n\n    billboardCollection._billboards = newBillboards;\n  }\n}\n\nBillboardCollection.prototype._updateBillboard = function (\n  billboard,\n  propertyChanged\n) {\n  if (!billboard._dirty) {\n    this._billboardsToUpdate[this._billboardsToUpdateIndex++] = billboard;\n  }\n\n  ++this._propertiesChanged[propertyChanged];\n};\n\n/**\n * Check whether this collection contains a given billboard.\n *\n * @param {Billboard} [billboard] The billboard to check for.\n * @returns {Boolean} true if this collection contains the billboard, false otherwise.\n *\n * @see BillboardCollection#get\n */\nBillboardCollection.prototype.contains = function (billboard) {\n  return defined(billboard) && billboard._billboardCollection === this;\n};\n\n/**\n * Returns the billboard in the collection at the specified index.  Indices are zero-based\n * and increase as billboards are added.  Removing a billboard shifts all billboards after\n * it to the left, changing their indices.  This function is commonly used with\n * {@link BillboardCollection#length} to iterate over all the billboards\n * in the collection.\n *\n * @param {Number} index The zero-based index of the billboard.\n * @returns {Billboard} The billboard at the specified index.\n *\n * @performance Expected constant time.  If billboards were removed from the collection and\n * {@link BillboardCollection#update} was not called, an implicit <code>O(n)</code>\n * operation is performed.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * // Toggle the show property of every billboard in the collection\n * var len = billboards.length;\n * for (var i = 0; i < len; ++i) {\n *   var b = billboards.get(i);\n *   b.show = !b.show;\n * }\n *\n * @see BillboardCollection#length\n */\nBillboardCollection.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index)) {\n    throw new DeveloperError(\"index is required.\");\n  }\n  //>>includeEnd('debug');\n\n  removeBillboards(this);\n  return this._billboards[index];\n};\n\nvar getIndexBuffer;\n\nfunction getIndexBufferBatched(context) {\n  var sixteenK = 16 * 1024;\n\n  var indexBuffer = context.cache.billboardCollection_indexBufferBatched;\n  if (defined(indexBuffer)) {\n    return indexBuffer;\n  }\n\n  // Subtract 6 because the last index is reserverd for primitive restart.\n  // https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.18\n  var length = sixteenK * 6 - 6;\n  var indices = new Uint16Array(length);\n  for (var i = 0, j = 0; i < length; i += 6, j += 4) {\n    indices[i] = j;\n    indices[i + 1] = j + 1;\n    indices[i + 2] = j + 2;\n\n    indices[i + 3] = j + 0;\n    indices[i + 4] = j + 2;\n    indices[i + 5] = j + 3;\n  }\n\n  // PERFORMANCE_IDEA:  Should we reference count billboard collections, and eventually delete this?\n  // Is this too much memory to allocate up front?  Should we dynamically grow it?\n  indexBuffer = Buffer.createIndexBuffer({\n    context: context,\n    typedArray: indices,\n    usage: BufferUsage.STATIC_DRAW,\n    indexDatatype: IndexDatatype.UNSIGNED_SHORT,\n  });\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.billboardCollection_indexBufferBatched = indexBuffer;\n  return indexBuffer;\n}\n\nfunction getIndexBufferInstanced(context) {\n  var indexBuffer = context.cache.billboardCollection_indexBufferInstanced;\n  if (defined(indexBuffer)) {\n    return indexBuffer;\n  }\n\n  indexBuffer = Buffer.createIndexBuffer({\n    context: context,\n    typedArray: new Uint16Array([0, 1, 2, 0, 2, 3]),\n    usage: BufferUsage.STATIC_DRAW,\n    indexDatatype: IndexDatatype.UNSIGNED_SHORT,\n  });\n\n  indexBuffer.vertexArrayDestroyable = false;\n  context.cache.billboardCollection_indexBufferInstanced = indexBuffer;\n  return indexBuffer;\n}\n\nfunction getVertexBufferInstanced(context) {\n  var vertexBuffer = context.cache.billboardCollection_vertexBufferInstanced;\n  if (defined(vertexBuffer)) {\n    return vertexBuffer;\n  }\n\n  vertexBuffer = Buffer.createVertexBuffer({\n    context: context,\n    typedArray: new Float32Array([0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]),\n    usage: BufferUsage.STATIC_DRAW,\n  });\n\n  vertexBuffer.vertexArrayDestroyable = false;\n  context.cache.billboardCollection_vertexBufferInstanced = vertexBuffer;\n  return vertexBuffer;\n}\n\nBillboardCollection.prototype.computeNewBuffersUsage = function () {\n  var buffersUsage = this._buffersUsage;\n  var usageChanged = false;\n\n  var properties = this._propertiesChanged;\n  for (var k = 0; k < NUMBER_OF_PROPERTIES; ++k) {\n    var newUsage =\n      properties[k] === 0 ? BufferUsage.STATIC_DRAW : BufferUsage.STREAM_DRAW;\n    usageChanged = usageChanged || buffersUsage[k] !== newUsage;\n    buffersUsage[k] = newUsage;\n  }\n\n  return usageChanged;\n};\n\nfunction createVAF(\n  context,\n  numberOfBillboards,\n  buffersUsage,\n  instanced,\n  batchTable,\n  sdf\n) {\n  var attributes = [\n    {\n      index: attributeLocations.positionHighAndScale,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[POSITION_INDEX],\n    },\n    {\n      index: attributeLocations.positionLowAndRotation,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[POSITION_INDEX],\n    },\n    {\n      index: attributeLocations.compressedAttribute0,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[PIXEL_OFFSET_INDEX],\n    },\n    {\n      index: attributeLocations.compressedAttribute1,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[TRANSLUCENCY_BY_DISTANCE_INDEX],\n    },\n    {\n      index: attributeLocations.compressedAttribute2,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[COLOR_INDEX],\n    },\n    {\n      index: attributeLocations.eyeOffset,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[EYE_OFFSET_INDEX],\n    },\n    {\n      index: attributeLocations.scaleByDistance,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[SCALE_BY_DISTANCE_INDEX],\n    },\n    {\n      index: attributeLocations.pixelOffsetScaleByDistance,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX],\n    },\n    {\n      index: attributeLocations.compressedAttribute3,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[DISTANCE_DISPLAY_CONDITION_INDEX],\n    },\n    {\n      index: attributeLocations.textureCoordinateBoundsOrLabelTranslate,\n      componentsPerAttribute: 4,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[TEXTURE_COORDINATE_BOUNDS],\n    },\n  ];\n\n  // Instancing requires one non-instanced attribute.\n  if (instanced) {\n    attributes.push({\n      index: attributeLocations.direction,\n      componentsPerAttribute: 2,\n      componentDatatype: ComponentDatatype.FLOAT,\n      vertexBuffer: getVertexBufferInstanced(context),\n    });\n  }\n\n  if (defined(batchTable)) {\n    attributes.push({\n      index: attributeLocations.a_batchId,\n      componentsPerAttribute: 1,\n      componentDatatype: ComponentDatatype.FLOAT,\n      bufferUsage: BufferUsage.STATIC_DRAW,\n    });\n  }\n\n  if (sdf) {\n    attributes.push({\n      index: attributeLocations.sdf,\n      componentsPerAttribute: 2,\n      componentDatatype: ComponentDatatype.FLOAT,\n      usage: buffersUsage[SDF_INDEX],\n    });\n  }\n\n  // When instancing is enabled, only one vertex is needed for each billboard.\n  var sizeInVertices = instanced ? numberOfBillboards : 4 * numberOfBillboards;\n  return new VertexArrayFacade(context, attributes, sizeInVertices, instanced);\n}\n\n///////////////////////////////////////////////////////////////////////////\n\n// Four vertices per billboard.  Each has the same position, etc., but a different screen-space direction vector.\n\n// PERFORMANCE_IDEA:  Save memory if a property is the same for all billboards, use a latched attribute state,\n// instead of storing it in a vertex buffer.\n\nvar writePositionScratch = new EncodedCartesian3();\n\nfunction writePositionScaleAndRotation(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var positionHighWriter = vafWriters[attributeLocations.positionHighAndScale];\n  var positionLowWriter = vafWriters[attributeLocations.positionLowAndRotation];\n  var position = billboard._getActualPosition();\n\n  if (billboardCollection._mode === SceneMode.SCENE3D) {\n    BoundingSphere.expand(\n      billboardCollection._baseVolume,\n      position,\n      billboardCollection._baseVolume\n    );\n    billboardCollection._boundingVolumeDirty = true;\n  }\n\n  EncodedCartesian3.fromCartesian(position, writePositionScratch);\n  var scale = billboard.scale;\n  var rotation = billboard.rotation;\n\n  if (rotation !== 0.0) {\n    billboardCollection._shaderRotation = true;\n  }\n\n  billboardCollection._maxScale = Math.max(\n    billboardCollection._maxScale,\n    scale\n  );\n\n  var high = writePositionScratch.high;\n  var low = writePositionScratch.low;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    positionHighWriter(i, high.x, high.y, high.z, scale);\n    positionLowWriter(i, low.x, low.y, low.z, rotation);\n  } else {\n    i = billboard._index * 4;\n    positionHighWriter(i + 0, high.x, high.y, high.z, scale);\n    positionHighWriter(i + 1, high.x, high.y, high.z, scale);\n    positionHighWriter(i + 2, high.x, high.y, high.z, scale);\n    positionHighWriter(i + 3, high.x, high.y, high.z, scale);\n\n    positionLowWriter(i + 0, low.x, low.y, low.z, rotation);\n    positionLowWriter(i + 1, low.x, low.y, low.z, rotation);\n    positionLowWriter(i + 2, low.x, low.y, low.z, rotation);\n    positionLowWriter(i + 3, low.x, low.y, low.z, rotation);\n  }\n}\n\nvar scratchCartesian2 = new Cartesian2();\n\nvar UPPER_BOUND = 32768.0; // 2^15\n\nvar LEFT_SHIFT16 = 65536.0; // 2^16\nvar LEFT_SHIFT12 = 4096.0; // 2^12\nvar LEFT_SHIFT8 = 256.0; // 2^8\nvar LEFT_SHIFT7 = 128.0;\nvar LEFT_SHIFT5 = 32.0;\nvar LEFT_SHIFT3 = 8.0;\nvar LEFT_SHIFT2 = 4.0;\n\nvar RIGHT_SHIFT8 = 1.0 / 256.0;\n\nvar LOWER_LEFT = 0.0;\nvar LOWER_RIGHT = 2.0;\nvar UPPER_RIGHT = 3.0;\nvar UPPER_LEFT = 1.0;\n\nfunction writeCompressedAttrib0(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute0];\n  var pixelOffset = billboard.pixelOffset;\n  var pixelOffsetX = pixelOffset.x;\n  var pixelOffsetY = pixelOffset.y;\n\n  var translate = billboard._translate;\n  var translateX = translate.x;\n  var translateY = translate.y;\n\n  billboardCollection._maxPixelOffset = Math.max(\n    billboardCollection._maxPixelOffset,\n    Math.abs(pixelOffsetX + translateX),\n    Math.abs(-pixelOffsetY + translateY)\n  );\n\n  var horizontalOrigin = billboard.horizontalOrigin;\n  var verticalOrigin = billboard._verticalOrigin;\n  var show = billboard.show && billboard.clusterShow;\n\n  // If the color alpha is zero, do not show this billboard.  This lets us avoid providing\n  // color during the pick pass and also eliminates a discard in the fragment shader.\n  if (billboard.color.alpha === 0.0) {\n    show = false;\n  }\n\n  // Raw billboards don't distinguish between BASELINE and BOTTOM, only LabelCollection does that.\n  if (verticalOrigin === VerticalOrigin.BASELINE) {\n    verticalOrigin = VerticalOrigin.BOTTOM;\n  }\n\n  billboardCollection._allHorizontalCenter =\n    billboardCollection._allHorizontalCenter &&\n    horizontalOrigin === HorizontalOrigin.CENTER;\n  billboardCollection._allVerticalCenter =\n    billboardCollection._allVerticalCenter &&\n    verticalOrigin === VerticalOrigin.CENTER;\n\n  var bottomLeftX = 0;\n  var bottomLeftY = 0;\n  var width = 0;\n  var height = 0;\n  var index = billboard._imageIndex;\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index];\n\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(imageRectangle)) {\n      throw new DeveloperError(\"Invalid billboard image index: \" + index);\n    }\n    //>>includeEnd('debug');\n\n    bottomLeftX = imageRectangle.x;\n    bottomLeftY = imageRectangle.y;\n    width = imageRectangle.width;\n    height = imageRectangle.height;\n  }\n  var topRightX = bottomLeftX + width;\n  var topRightY = bottomLeftY + height;\n\n  var compressed0 =\n    Math.floor(\n      CesiumMath.clamp(pixelOffsetX, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND\n    ) * LEFT_SHIFT7;\n  compressed0 += (horizontalOrigin + 1.0) * LEFT_SHIFT5;\n  compressed0 += (verticalOrigin + 1.0) * LEFT_SHIFT3;\n  compressed0 += (show ? 1.0 : 0.0) * LEFT_SHIFT2;\n\n  var compressed1 =\n    Math.floor(\n      CesiumMath.clamp(pixelOffsetY, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND\n    ) * LEFT_SHIFT8;\n  var compressed2 =\n    Math.floor(\n      CesiumMath.clamp(translateX, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND\n    ) * LEFT_SHIFT8;\n\n  var tempTanslateY =\n    (CesiumMath.clamp(translateY, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND) *\n    RIGHT_SHIFT8;\n  var upperTranslateY = Math.floor(tempTanslateY);\n  var lowerTranslateY = Math.floor(\n    (tempTanslateY - upperTranslateY) * LEFT_SHIFT8\n  );\n\n  compressed1 += upperTranslateY;\n  compressed2 += lowerTranslateY;\n\n  scratchCartesian2.x = bottomLeftX;\n  scratchCartesian2.y = bottomLeftY;\n  var compressedTexCoordsLL = AttributeCompression.compressTextureCoordinates(\n    scratchCartesian2\n  );\n  scratchCartesian2.x = topRightX;\n  var compressedTexCoordsLR = AttributeCompression.compressTextureCoordinates(\n    scratchCartesian2\n  );\n  scratchCartesian2.y = topRightY;\n  var compressedTexCoordsUR = AttributeCompression.compressTextureCoordinates(\n    scratchCartesian2\n  );\n  scratchCartesian2.x = bottomLeftX;\n  var compressedTexCoordsUL = AttributeCompression.compressTextureCoordinates(\n    scratchCartesian2\n  );\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1, compressed2, compressedTexCoordsLL);\n  } else {\n    i = billboard._index * 4;\n    writer(\n      i + 0,\n      compressed0 + LOWER_LEFT,\n      compressed1,\n      compressed2,\n      compressedTexCoordsLL\n    );\n    writer(\n      i + 1,\n      compressed0 + LOWER_RIGHT,\n      compressed1,\n      compressed2,\n      compressedTexCoordsLR\n    );\n    writer(\n      i + 2,\n      compressed0 + UPPER_RIGHT,\n      compressed1,\n      compressed2,\n      compressedTexCoordsUR\n    );\n    writer(\n      i + 3,\n      compressed0 + UPPER_LEFT,\n      compressed1,\n      compressed2,\n      compressedTexCoordsUL\n    );\n  }\n}\n\nfunction writeCompressedAttrib1(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute1];\n  var alignedAxis = billboard.alignedAxis;\n  if (!Cartesian3.equals(alignedAxis, Cartesian3.ZERO)) {\n    billboardCollection._shaderAlignedAxis = true;\n  }\n\n  var near = 0.0;\n  var nearValue = 1.0;\n  var far = 1.0;\n  var farValue = 1.0;\n\n  var translucency = billboard.translucencyByDistance;\n  if (defined(translucency)) {\n    near = translucency.near;\n    nearValue = translucency.nearValue;\n    far = translucency.far;\n    farValue = translucency.farValue;\n\n    if (nearValue !== 1.0 || farValue !== 1.0) {\n      // translucency by distance calculation in shader need not be enabled\n      // until a billboard with near and far !== 1.0 is found\n      billboardCollection._shaderTranslucencyByDistance = true;\n    }\n  }\n\n  var width = 0;\n  var index = billboard._imageIndex;\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index];\n\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(imageRectangle)) {\n      throw new DeveloperError(\"Invalid billboard image index: \" + index);\n    }\n    //>>includeEnd('debug');\n\n    width = imageRectangle.width;\n  }\n\n  var textureWidth = billboardCollection._textureAtlas.texture.width;\n  var imageWidth = Math.round(\n    defaultValue(billboard.width, textureWidth * width)\n  );\n  billboardCollection._maxSize = Math.max(\n    billboardCollection._maxSize,\n    imageWidth\n  );\n\n  var compressed0 = CesiumMath.clamp(imageWidth, 0.0, LEFT_SHIFT16);\n  var compressed1 = 0.0;\n\n  if (\n    Math.abs(Cartesian3.magnitudeSquared(alignedAxis) - 1.0) <\n    CesiumMath.EPSILON6\n  ) {\n    compressed1 = AttributeCompression.octEncodeFloat(alignedAxis);\n  }\n\n  nearValue = CesiumMath.clamp(nearValue, 0.0, 1.0);\n  nearValue = nearValue === 1.0 ? 255.0 : (nearValue * 255.0) | 0;\n  compressed0 = compressed0 * LEFT_SHIFT8 + nearValue;\n\n  farValue = CesiumMath.clamp(farValue, 0.0, 1.0);\n  farValue = farValue === 1.0 ? 255.0 : (farValue * 255.0) | 0;\n  compressed1 = compressed1 * LEFT_SHIFT8 + farValue;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1, near, far);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, compressed0, compressed1, near, far);\n    writer(i + 1, compressed0, compressed1, near, far);\n    writer(i + 2, compressed0, compressed1, near, far);\n    writer(i + 3, compressed0, compressed1, near, far);\n  }\n}\n\nfunction writeCompressedAttrib2(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute2];\n  var color = billboard.color;\n  var pickColor = !defined(billboardCollection._batchTable)\n    ? billboard.getPickId(frameState.context).color\n    : Color.WHITE;\n  var sizeInMeters = billboard.sizeInMeters ? 1.0 : 0.0;\n  var validAlignedAxis =\n    Math.abs(Cartesian3.magnitudeSquared(billboard.alignedAxis) - 1.0) <\n    CesiumMath.EPSILON6\n      ? 1.0\n      : 0.0;\n\n  billboardCollection._allSizedInMeters =\n    billboardCollection._allSizedInMeters && sizeInMeters === 1.0;\n\n  var height = 0;\n  var index = billboard._imageIndex;\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index];\n\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(imageRectangle)) {\n      throw new DeveloperError(\"Invalid billboard image index: \" + index);\n    }\n    //>>includeEnd('debug');\n\n    height = imageRectangle.height;\n  }\n\n  var dimensions = billboardCollection._textureAtlas.texture.dimensions;\n  var imageHeight = Math.round(\n    defaultValue(billboard.height, dimensions.y * height)\n  );\n  billboardCollection._maxSize = Math.max(\n    billboardCollection._maxSize,\n    imageHeight\n  );\n  var labelHorizontalOrigin = defaultValue(\n    billboard._labelHorizontalOrigin,\n    -2\n  );\n  labelHorizontalOrigin += 2;\n  var compressed3 = imageHeight * LEFT_SHIFT2 + labelHorizontalOrigin;\n\n  var red = Color.floatToByte(color.red);\n  var green = Color.floatToByte(color.green);\n  var blue = Color.floatToByte(color.blue);\n  var compressed0 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue;\n\n  red = Color.floatToByte(pickColor.red);\n  green = Color.floatToByte(pickColor.green);\n  blue = Color.floatToByte(pickColor.blue);\n  var compressed1 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue;\n\n  var compressed2 =\n    Color.floatToByte(color.alpha) * LEFT_SHIFT16 +\n    Color.floatToByte(pickColor.alpha) * LEFT_SHIFT8;\n  compressed2 += sizeInMeters * 2.0 + validAlignedAxis;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1, compressed2, compressed3);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, compressed0, compressed1, compressed2, compressed3);\n    writer(i + 1, compressed0, compressed1, compressed2, compressed3);\n    writer(i + 2, compressed0, compressed1, compressed2, compressed3);\n    writer(i + 3, compressed0, compressed1, compressed2, compressed3);\n  }\n}\n\nfunction writeEyeOffset(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.eyeOffset];\n  var eyeOffset = billboard.eyeOffset;\n\n  // For billboards that are clamped to ground, move it slightly closer to the camera\n  var eyeOffsetZ = eyeOffset.z;\n  if (billboard._heightReference !== HeightReference.NONE) {\n    eyeOffsetZ *= 1.005;\n  }\n  billboardCollection._maxEyeOffset = Math.max(\n    billboardCollection._maxEyeOffset,\n    Math.abs(eyeOffset.x),\n    Math.abs(eyeOffset.y),\n    Math.abs(eyeOffsetZ)\n  );\n\n  if (billboardCollection._instanced) {\n    var width = 0;\n    var height = 0;\n    var index = billboard._imageIndex;\n    if (index !== -1) {\n      var imageRectangle = textureAtlasCoordinates[index];\n\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(imageRectangle)) {\n        throw new DeveloperError(\"Invalid billboard image index: \" + index);\n      }\n      //>>includeEnd('debug');\n\n      width = imageRectangle.width;\n      height = imageRectangle.height;\n    }\n\n    scratchCartesian2.x = width;\n    scratchCartesian2.y = height;\n    var compressedTexCoordsRange = AttributeCompression.compressTextureCoordinates(\n      scratchCartesian2\n    );\n\n    i = billboard._index;\n    writer(i, eyeOffset.x, eyeOffset.y, eyeOffsetZ, compressedTexCoordsRange);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n    writer(i + 1, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n    writer(i + 2, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n    writer(i + 3, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);\n  }\n}\n\nfunction writeScaleByDistance(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.scaleByDistance];\n  var near = 0.0;\n  var nearValue = 1.0;\n  var far = 1.0;\n  var farValue = 1.0;\n\n  var scale = billboard.scaleByDistance;\n  if (defined(scale)) {\n    near = scale.near;\n    nearValue = scale.nearValue;\n    far = scale.far;\n    farValue = scale.farValue;\n\n    if (nearValue !== 1.0 || farValue !== 1.0) {\n      // scale by distance calculation in shader need not be enabled\n      // until a billboard with near and far !== 1.0 is found\n      billboardCollection._shaderScaleByDistance = true;\n    }\n  }\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, near, nearValue, far, farValue);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, near, nearValue, far, farValue);\n    writer(i + 1, near, nearValue, far, farValue);\n    writer(i + 2, near, nearValue, far, farValue);\n    writer(i + 3, near, nearValue, far, farValue);\n  }\n}\n\nfunction writePixelOffsetScaleByDistance(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.pixelOffsetScaleByDistance];\n  var near = 0.0;\n  var nearValue = 1.0;\n  var far = 1.0;\n  var farValue = 1.0;\n\n  var pixelOffsetScale = billboard.pixelOffsetScaleByDistance;\n  if (defined(pixelOffsetScale)) {\n    near = pixelOffsetScale.near;\n    nearValue = pixelOffsetScale.nearValue;\n    far = pixelOffsetScale.far;\n    farValue = pixelOffsetScale.farValue;\n\n    if (nearValue !== 1.0 || farValue !== 1.0) {\n      // pixelOffsetScale by distance calculation in shader need not be enabled\n      // until a billboard with near and far !== 1.0 is found\n      billboardCollection._shaderPixelOffsetScaleByDistance = true;\n    }\n  }\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, near, nearValue, far, farValue);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, near, nearValue, far, farValue);\n    writer(i + 1, near, nearValue, far, farValue);\n    writer(i + 2, near, nearValue, far, farValue);\n    writer(i + 3, near, nearValue, far, farValue);\n  }\n}\n\nfunction writeCompressedAttribute3(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  var i;\n  var writer = vafWriters[attributeLocations.compressedAttribute3];\n  var near = 0.0;\n  var far = Number.MAX_VALUE;\n\n  var distanceDisplayCondition = billboard.distanceDisplayCondition;\n  if (defined(distanceDisplayCondition)) {\n    near = distanceDisplayCondition.near;\n    far = distanceDisplayCondition.far;\n\n    near *= near;\n    far *= far;\n\n    billboardCollection._shaderDistanceDisplayCondition = true;\n  }\n\n  var disableDepthTestDistance = billboard.disableDepthTestDistance;\n  var clampToGround =\n    billboard.heightReference === HeightReference.CLAMP_TO_GROUND &&\n    frameState.context.depthTexture;\n  if (!defined(disableDepthTestDistance)) {\n    disableDepthTestDistance = clampToGround ? 5000.0 : 0.0;\n  }\n\n  disableDepthTestDistance *= disableDepthTestDistance;\n  if (clampToGround || disableDepthTestDistance > 0.0) {\n    billboardCollection._shaderDisableDepthDistance = true;\n    if (disableDepthTestDistance === Number.POSITIVE_INFINITY) {\n      disableDepthTestDistance = -1.0;\n    }\n  }\n\n  var imageHeight;\n  var imageWidth;\n\n  if (!defined(billboard._labelDimensions)) {\n    var height = 0;\n    var width = 0;\n    var index = billboard._imageIndex;\n    if (index !== -1) {\n      var imageRectangle = textureAtlasCoordinates[index];\n\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(imageRectangle)) {\n        throw new DeveloperError(\"Invalid billboard image index: \" + index);\n      }\n      //>>includeEnd('debug');\n\n      height = imageRectangle.height;\n      width = imageRectangle.width;\n    }\n\n    imageHeight = Math.round(\n      defaultValue(\n        billboard.height,\n        billboardCollection._textureAtlas.texture.dimensions.y * height\n      )\n    );\n\n    var textureWidth = billboardCollection._textureAtlas.texture.width;\n    imageWidth = Math.round(\n      defaultValue(billboard.width, textureWidth * width)\n    );\n  } else {\n    imageWidth = billboard._labelDimensions.x;\n    imageHeight = billboard._labelDimensions.y;\n  }\n\n  var w = Math.floor(CesiumMath.clamp(imageWidth, 0.0, LEFT_SHIFT12));\n  var h = Math.floor(CesiumMath.clamp(imageHeight, 0.0, LEFT_SHIFT12));\n  var dimensions = w * LEFT_SHIFT12 + h;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, near, far, disableDepthTestDistance, dimensions);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, near, far, disableDepthTestDistance, dimensions);\n    writer(i + 1, near, far, disableDepthTestDistance, dimensions);\n    writer(i + 2, near, far, disableDepthTestDistance, dimensions);\n    writer(i + 3, near, far, disableDepthTestDistance, dimensions);\n  }\n}\n\nfunction writeTextureCoordinateBoundsOrLabelTranslate(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  if (billboard.heightReference === HeightReference.CLAMP_TO_GROUND) {\n    var scene = billboardCollection._scene;\n    var context = frameState.context;\n    var globeTranslucent = frameState.globeTranslucencyState.translucent;\n    var depthTestAgainstTerrain =\n      defined(scene.globe) && scene.globe.depthTestAgainstTerrain;\n\n    // Only do manual depth test if the globe is opaque and writes depth\n    billboardCollection._shaderClampToGround =\n      context.depthTexture && !globeTranslucent && depthTestAgainstTerrain;\n  }\n  var i;\n  var writer =\n    vafWriters[attributeLocations.textureCoordinateBoundsOrLabelTranslate];\n\n  if (ContextLimits.maximumVertexTextureImageUnits > 0) {\n    //write _labelTranslate, used by depth testing in the vertex shader\n    var translateX = 0;\n    var translateY = 0;\n    if (defined(billboard._labelTranslate)) {\n      translateX = billboard._labelTranslate.x;\n      translateY = billboard._labelTranslate.y;\n    }\n    if (billboardCollection._instanced) {\n      i = billboard._index;\n      writer(i, translateX, translateY, 0.0, 0.0);\n    } else {\n      i = billboard._index * 4;\n      writer(i + 0, translateX, translateY, 0.0, 0.0);\n      writer(i + 1, translateX, translateY, 0.0, 0.0);\n      writer(i + 2, translateX, translateY, 0.0, 0.0);\n      writer(i + 3, translateX, translateY, 0.0, 0.0);\n    }\n    return;\n  }\n\n  //write texture coordinate bounds, used by depth testing in fragment shader\n  var minX = 0;\n  var minY = 0;\n  var width = 0;\n  var height = 0;\n  var index = billboard._imageIndex;\n  if (index !== -1) {\n    var imageRectangle = textureAtlasCoordinates[index];\n\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(imageRectangle)) {\n      throw new DeveloperError(\"Invalid billboard image index: \" + index);\n    }\n    //>>includeEnd('debug');\n\n    minX = imageRectangle.x;\n    minY = imageRectangle.y;\n    width = imageRectangle.width;\n    height = imageRectangle.height;\n  }\n  var maxX = minX + width;\n  var maxY = minY + height;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, minX, minY, maxX, maxY);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, minX, minY, maxX, maxY);\n    writer(i + 1, minX, minY, maxX, maxY);\n    writer(i + 2, minX, minY, maxX, maxY);\n    writer(i + 3, minX, minY, maxX, maxY);\n  }\n}\n\nfunction writeBatchId(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  if (!defined(billboardCollection._batchTable)) {\n    return;\n  }\n\n  var writer = vafWriters[attributeLocations.a_batchId];\n  var id = billboard._batchIndex;\n\n  var i;\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, id);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, id);\n    writer(i + 1, id);\n    writer(i + 2, id);\n    writer(i + 3, id);\n  }\n}\n\nfunction writeSDF(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  if (!billboardCollection._sdf) {\n    return;\n  }\n\n  var i;\n  var writer = vafWriters[attributeLocations.sdf];\n\n  var outlineColor = billboard.outlineColor;\n  var outlineWidth = billboard.outlineWidth;\n\n  var red = Color.floatToByte(outlineColor.red);\n  var green = Color.floatToByte(outlineColor.green);\n  var blue = Color.floatToByte(outlineColor.blue);\n  var compressed0 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue;\n\n  // Compute the relative outline distance\n  var outlineDistance = outlineWidth / SDFSettings.RADIUS;\n  var compressed1 =\n    Color.floatToByte(outlineColor.alpha) * LEFT_SHIFT16 +\n    Color.floatToByte(outlineDistance) * LEFT_SHIFT8;\n\n  if (billboardCollection._instanced) {\n    i = billboard._index;\n    writer(i, compressed0, compressed1);\n  } else {\n    i = billboard._index * 4;\n    writer(i + 0, compressed0 + LOWER_LEFT, compressed1);\n    writer(i + 1, compressed0 + LOWER_RIGHT, compressed1);\n    writer(i + 2, compressed0 + UPPER_RIGHT, compressed1);\n    writer(i + 3, compressed0 + UPPER_LEFT, compressed1);\n  }\n}\n\nfunction writeBillboard(\n  billboardCollection,\n  frameState,\n  textureAtlasCoordinates,\n  vafWriters,\n  billboard\n) {\n  writePositionScaleAndRotation(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeCompressedAttrib0(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeCompressedAttrib1(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeCompressedAttrib2(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeEyeOffset(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeScaleByDistance(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writePixelOffsetScaleByDistance(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeCompressedAttribute3(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeTextureCoordinateBoundsOrLabelTranslate(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeBatchId(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n  writeSDF(\n    billboardCollection,\n    frameState,\n    textureAtlasCoordinates,\n    vafWriters,\n    billboard\n  );\n}\n\nfunction recomputeActualPositions(\n  billboardCollection,\n  billboards,\n  length,\n  frameState,\n  modelMatrix,\n  recomputeBoundingVolume\n) {\n  var boundingVolume;\n  if (frameState.mode === SceneMode.SCENE3D) {\n    boundingVolume = billboardCollection._baseVolume;\n    billboardCollection._boundingVolumeDirty = true;\n  } else {\n    boundingVolume = billboardCollection._baseVolume2D;\n  }\n\n  var positions = [];\n  for (var i = 0; i < length; ++i) {\n    var billboard = billboards[i];\n    var position = billboard.position;\n    var actualPosition = Billboard._computeActualPosition(\n      billboard,\n      position,\n      frameState,\n      modelMatrix\n    );\n    if (defined(actualPosition)) {\n      billboard._setActualPosition(actualPosition);\n\n      if (recomputeBoundingVolume) {\n        positions.push(actualPosition);\n      } else {\n        BoundingSphere.expand(boundingVolume, actualPosition, boundingVolume);\n      }\n    }\n  }\n\n  if (recomputeBoundingVolume) {\n    BoundingSphere.fromPoints(positions, boundingVolume);\n  }\n}\n\nfunction updateMode(billboardCollection, frameState) {\n  var mode = frameState.mode;\n\n  var billboards = billboardCollection._billboards;\n  var billboardsToUpdate = billboardCollection._billboardsToUpdate;\n  var modelMatrix = billboardCollection._modelMatrix;\n\n  if (\n    billboardCollection._createVertexArray ||\n    billboardCollection._mode !== mode ||\n    (mode !== SceneMode.SCENE3D &&\n      !Matrix4.equals(modelMatrix, billboardCollection.modelMatrix))\n  ) {\n    billboardCollection._mode = mode;\n    Matrix4.clone(billboardCollection.modelMatrix, modelMatrix);\n    billboardCollection._createVertexArray = true;\n\n    if (\n      mode === SceneMode.SCENE3D ||\n      mode === SceneMode.SCENE2D ||\n      mode === SceneMode.COLUMBUS_VIEW\n    ) {\n      recomputeActualPositions(\n        billboardCollection,\n        billboards,\n        billboards.length,\n        frameState,\n        modelMatrix,\n        true\n      );\n    }\n  } else if (mode === SceneMode.MORPHING) {\n    recomputeActualPositions(\n      billboardCollection,\n      billboards,\n      billboards.length,\n      frameState,\n      modelMatrix,\n      true\n    );\n  } else if (mode === SceneMode.SCENE2D || mode === SceneMode.COLUMBUS_VIEW) {\n    recomputeActualPositions(\n      billboardCollection,\n      billboardsToUpdate,\n      billboardCollection._billboardsToUpdateIndex,\n      frameState,\n      modelMatrix,\n      false\n    );\n  }\n}\n\nfunction updateBoundingVolume(collection, frameState, boundingVolume) {\n  var pixelScale = 1.0;\n  if (!collection._allSizedInMeters || collection._maxPixelOffset !== 0.0) {\n    pixelScale = frameState.camera.getPixelSize(\n      boundingVolume,\n      frameState.context.drawingBufferWidth,\n      frameState.context.drawingBufferHeight\n    );\n  }\n\n  var size = pixelScale * collection._maxScale * collection._maxSize * 2.0;\n  if (collection._allHorizontalCenter && collection._allVerticalCenter) {\n    size *= 0.5;\n  }\n\n  var offset =\n    pixelScale * collection._maxPixelOffset + collection._maxEyeOffset;\n  boundingVolume.radius += size + offset;\n}\n\nfunction createDebugCommand(billboardCollection, context) {\n  var fs;\n  fs =\n    \"uniform sampler2D billboard_texture; \\n\" +\n    \"varying vec2 v_textureCoordinates; \\n\" +\n    \"void main() \\n\" +\n    \"{ \\n\" +\n    \"    gl_FragColor = texture2D(billboard_texture, v_textureCoordinates); \\n\" +\n    \"} \\n\";\n\n  var drawCommand = context.createViewportQuadCommand(fs, {\n    uniformMap: {\n      billboard_texture: function () {\n        return billboardCollection._textureAtlas.texture;\n      },\n    },\n  });\n  drawCommand.pass = Pass.OVERLAY;\n  return drawCommand;\n}\n\nvar scratchWriterArray = [];\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {RuntimeError} image with id must be in the atlas.\n */\nBillboardCollection.prototype.update = function (frameState) {\n  removeBillboards(this);\n\n  if (!this.show) {\n    return;\n  }\n\n  var billboards = this._billboards;\n  var billboardsLength = billboards.length;\n\n  var context = frameState.context;\n  this._instanced = context.instancedArrays;\n  attributeLocations = this._instanced\n    ? attributeLocationsInstanced\n    : attributeLocationsBatched;\n  getIndexBuffer = this._instanced\n    ? getIndexBufferInstanced\n    : getIndexBufferBatched;\n\n  var textureAtlas = this._textureAtlas;\n  if (!defined(textureAtlas)) {\n    textureAtlas = this._textureAtlas = new TextureAtlas({\n      context: context,\n    });\n\n    for (var ii = 0; ii < billboardsLength; ++ii) {\n      billboards[ii]._loadImage();\n    }\n  }\n\n  var textureAtlasCoordinates = textureAtlas.textureCoordinates;\n  if (textureAtlasCoordinates.length === 0) {\n    // Can't write billboard vertices until we have texture coordinates\n    // provided by a texture atlas\n    return;\n  }\n\n  updateMode(this, frameState);\n\n  billboards = this._billboards;\n  billboardsLength = billboards.length;\n  var billboardsToUpdate = this._billboardsToUpdate;\n  var billboardsToUpdateLength = this._billboardsToUpdateIndex;\n\n  var properties = this._propertiesChanged;\n\n  var textureAtlasGUID = textureAtlas.guid;\n  var createVertexArray =\n    this._createVertexArray || this._textureAtlasGUID !== textureAtlasGUID;\n  this._textureAtlasGUID = textureAtlasGUID;\n\n  var vafWriters;\n  var pass = frameState.passes;\n  var picking = pass.pick;\n\n  // PERFORMANCE_IDEA: Round robin multiple buffers.\n  if (createVertexArray || (!picking && this.computeNewBuffersUsage())) {\n    this._createVertexArray = false;\n\n    for (var k = 0; k < NUMBER_OF_PROPERTIES; ++k) {\n      properties[k] = 0;\n    }\n\n    this._vaf = this._vaf && this._vaf.destroy();\n\n    if (billboardsLength > 0) {\n      // PERFORMANCE_IDEA:  Instead of creating a new one, resize like std::vector.\n      this._vaf = createVAF(\n        context,\n        billboardsLength,\n        this._buffersUsage,\n        this._instanced,\n        this._batchTable,\n        this._sdf\n      );\n      vafWriters = this._vaf.writers;\n\n      // Rewrite entire buffer if billboards were added or removed.\n      for (var i = 0; i < billboardsLength; ++i) {\n        var billboard = this._billboards[i];\n        billboard._dirty = false; // In case it needed an update.\n        writeBillboard(\n          this,\n          frameState,\n          textureAtlasCoordinates,\n          vafWriters,\n          billboard\n        );\n      }\n\n      // Different billboard collections share the same index buffer.\n      this._vaf.commit(getIndexBuffer(context));\n    }\n\n    this._billboardsToUpdateIndex = 0;\n  } else if (billboardsToUpdateLength > 0) {\n    // Billboards were modified, but none were added or removed.\n    var writers = scratchWriterArray;\n    writers.length = 0;\n\n    if (\n      properties[POSITION_INDEX] ||\n      properties[ROTATION_INDEX] ||\n      properties[SCALE_INDEX]\n    ) {\n      writers.push(writePositionScaleAndRotation);\n    }\n\n    if (\n      properties[IMAGE_INDEX_INDEX] ||\n      properties[PIXEL_OFFSET_INDEX] ||\n      properties[HORIZONTAL_ORIGIN_INDEX] ||\n      properties[VERTICAL_ORIGIN_INDEX] ||\n      properties[SHOW_INDEX]\n    ) {\n      writers.push(writeCompressedAttrib0);\n      if (this._instanced) {\n        writers.push(writeEyeOffset);\n      }\n    }\n\n    if (\n      properties[IMAGE_INDEX_INDEX] ||\n      properties[ALIGNED_AXIS_INDEX] ||\n      properties[TRANSLUCENCY_BY_DISTANCE_INDEX]\n    ) {\n      writers.push(writeCompressedAttrib1);\n      writers.push(writeCompressedAttrib2);\n    }\n\n    if (properties[IMAGE_INDEX_INDEX] || properties[COLOR_INDEX]) {\n      writers.push(writeCompressedAttrib2);\n    }\n\n    if (properties[EYE_OFFSET_INDEX]) {\n      writers.push(writeEyeOffset);\n    }\n\n    if (properties[SCALE_BY_DISTANCE_INDEX]) {\n      writers.push(writeScaleByDistance);\n    }\n\n    if (properties[PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX]) {\n      writers.push(writePixelOffsetScaleByDistance);\n    }\n\n    if (\n      properties[DISTANCE_DISPLAY_CONDITION_INDEX] ||\n      properties[DISABLE_DEPTH_DISTANCE] ||\n      properties[IMAGE_INDEX_INDEX] ||\n      properties[POSITION_INDEX]\n    ) {\n      writers.push(writeCompressedAttribute3);\n    }\n\n    if (properties[IMAGE_INDEX_INDEX] || properties[POSITION_INDEX]) {\n      writers.push(writeTextureCoordinateBoundsOrLabelTranslate);\n    }\n\n    if (properties[SDF_INDEX]) {\n      writers.push(writeSDF);\n    }\n\n    var numWriters = writers.length;\n    vafWriters = this._vaf.writers;\n\n    if (billboardsToUpdateLength / billboardsLength > 0.1) {\n      // If more than 10% of billboard change, rewrite the entire buffer.\n\n      // PERFORMANCE_IDEA:  I totally made up 10% :).\n\n      for (var m = 0; m < billboardsToUpdateLength; ++m) {\n        var b = billboardsToUpdate[m];\n        b._dirty = false;\n\n        for (var n = 0; n < numWriters; ++n) {\n          writers[n](this, frameState, textureAtlasCoordinates, vafWriters, b);\n        }\n      }\n      this._vaf.commit(getIndexBuffer(context));\n    } else {\n      for (var h = 0; h < billboardsToUpdateLength; ++h) {\n        var bb = billboardsToUpdate[h];\n        bb._dirty = false;\n\n        for (var o = 0; o < numWriters; ++o) {\n          writers[o](this, frameState, textureAtlasCoordinates, vafWriters, bb);\n        }\n\n        if (this._instanced) {\n          this._vaf.subCommit(bb._index, 1);\n        } else {\n          this._vaf.subCommit(bb._index * 4, 4);\n        }\n      }\n      this._vaf.endSubCommits();\n    }\n\n    this._billboardsToUpdateIndex = 0;\n  }\n\n  // If the number of total billboards ever shrinks considerably\n  // Truncate billboardsToUpdate so that we free memory that we're\n  // not going to be using.\n  if (billboardsToUpdateLength > billboardsLength * 1.5) {\n    billboardsToUpdate.length = billboardsLength;\n  }\n\n  if (!defined(this._vaf) || !defined(this._vaf.va)) {\n    return;\n  }\n\n  if (this._boundingVolumeDirty) {\n    this._boundingVolumeDirty = false;\n    BoundingSphere.transform(\n      this._baseVolume,\n      this.modelMatrix,\n      this._baseVolumeWC\n    );\n  }\n\n  var boundingVolume;\n  var modelMatrix = Matrix4.IDENTITY;\n  if (frameState.mode === SceneMode.SCENE3D) {\n    modelMatrix = this.modelMatrix;\n    boundingVolume = BoundingSphere.clone(\n      this._baseVolumeWC,\n      this._boundingVolume\n    );\n  } else {\n    boundingVolume = BoundingSphere.clone(\n      this._baseVolume2D,\n      this._boundingVolume\n    );\n  }\n  updateBoundingVolume(this, frameState, boundingVolume);\n\n  var blendOptionChanged = this._blendOption !== this.blendOption;\n  this._blendOption = this.blendOption;\n\n  if (blendOptionChanged) {\n    if (\n      this._blendOption === BlendOption.OPAQUE ||\n      this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT\n    ) {\n      this._rsOpaque = RenderState.fromCache({\n        depthTest: {\n          enabled: true,\n          func: WebGLConstants.LESS,\n        },\n        depthMask: true,\n      });\n    } else {\n      this._rsOpaque = undefined;\n    }\n\n    // If OPAQUE_AND_TRANSLUCENT is in use, only the opaque pass gets the benefit of the depth buffer,\n    // not the translucent pass.  Otherwise, if the TRANSLUCENT pass is on its own, it turns on\n    // a depthMask in lieu of full depth sorting (because it has opaque-ish fragments that look bad in OIT).\n    // When the TRANSLUCENT depth mask is in use, label backgrounds require the depth func to be LEQUAL.\n    var useTranslucentDepthMask = this._blendOption === BlendOption.TRANSLUCENT;\n\n    if (\n      this._blendOption === BlendOption.TRANSLUCENT ||\n      this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT\n    ) {\n      this._rsTranslucent = RenderState.fromCache({\n        depthTest: {\n          enabled: true,\n          func: useTranslucentDepthMask\n            ? WebGLConstants.LEQUAL\n            : WebGLConstants.LESS,\n        },\n        depthMask: useTranslucentDepthMask,\n        blending: BlendingState.ALPHA_BLEND,\n      });\n    } else {\n      this._rsTranslucent = undefined;\n    }\n  }\n\n  this._shaderDisableDepthDistance =\n    this._shaderDisableDepthDistance ||\n    frameState.minimumDisableDepthTestDistance !== 0.0;\n\n  var vsSource;\n  var fsSource;\n  var vs;\n  var fs;\n  var vertDefines;\n\n  var supportVSTextureReads = ContextLimits.maximumVertexTextureImageUnits > 0;\n\n  if (\n    blendOptionChanged ||\n    this._shaderRotation !== this._compiledShaderRotation ||\n    this._shaderAlignedAxis !== this._compiledShaderAlignedAxis ||\n    this._shaderScaleByDistance !== this._compiledShaderScaleByDistance ||\n    this._shaderTranslucencyByDistance !==\n      this._compiledShaderTranslucencyByDistance ||\n    this._shaderPixelOffsetScaleByDistance !==\n      this._compiledShaderPixelOffsetScaleByDistance ||\n    this._shaderDistanceDisplayCondition !==\n      this._compiledShaderDistanceDisplayCondition ||\n    this._shaderDisableDepthDistance !==\n      this._compiledShaderDisableDepthDistance ||\n    this._shaderClampToGround !== this._compiledShaderClampToGround ||\n    this._sdf !== this._compiledSDF\n  ) {\n    vsSource = BillboardCollectionVS;\n    fsSource = BillboardCollectionFS;\n\n    vertDefines = [];\n    if (defined(this._batchTable)) {\n      vertDefines.push(\"VECTOR_TILE\");\n      vsSource = this._batchTable.getVertexShaderCallback(\n        false,\n        \"a_batchId\",\n        undefined\n      )(vsSource);\n      fsSource = this._batchTable.getFragmentShaderCallback(\n        false,\n        undefined\n      )(fsSource);\n    }\n\n    vs = new ShaderSource({\n      defines: vertDefines,\n      sources: [vsSource],\n    });\n    if (this._instanced) {\n      vs.defines.push(\"INSTANCED\");\n    }\n    if (this._shaderRotation) {\n      vs.defines.push(\"ROTATION\");\n    }\n    if (this._shaderAlignedAxis) {\n      vs.defines.push(\"ALIGNED_AXIS\");\n    }\n    if (this._shaderScaleByDistance) {\n      vs.defines.push(\"EYE_DISTANCE_SCALING\");\n    }\n    if (this._shaderTranslucencyByDistance) {\n      vs.defines.push(\"EYE_DISTANCE_TRANSLUCENCY\");\n    }\n    if (this._shaderPixelOffsetScaleByDistance) {\n      vs.defines.push(\"EYE_DISTANCE_PIXEL_OFFSET\");\n    }\n    if (this._shaderDistanceDisplayCondition) {\n      vs.defines.push(\"DISTANCE_DISPLAY_CONDITION\");\n    }\n    if (this._shaderDisableDepthDistance) {\n      vs.defines.push(\"DISABLE_DEPTH_DISTANCE\");\n    }\n    if (this._shaderClampToGround) {\n      if (supportVSTextureReads) {\n        vs.defines.push(\"VERTEX_DEPTH_CHECK\");\n      } else {\n        vs.defines.push(\"FRAGMENT_DEPTH_CHECK\");\n      }\n    }\n\n    var sdfEdge = 1.0 - SDFSettings.CUTOFF;\n\n    if (this._sdf) {\n      vs.defines.push(\"SDF\");\n    }\n\n    var vectorFragDefine = defined(this._batchTable) ? \"VECTOR_TILE\" : \"\";\n\n    if (this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT) {\n      fs = new ShaderSource({\n        defines: [\"OPAQUE\", vectorFragDefine],\n        sources: [fsSource],\n      });\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push(\"VERTEX_DEPTH_CHECK\");\n        } else {\n          fs.defines.push(\"FRAGMENT_DEPTH_CHECK\");\n        }\n      }\n\n      if (this._sdf) {\n        fs.defines.push(\"SDF\");\n        fs.defines.push(\"SDF_EDGE \" + sdfEdge);\n      }\n\n      this._sp = ShaderProgram.replaceCache({\n        context: context,\n        shaderProgram: this._sp,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations,\n      });\n\n      fs = new ShaderSource({\n        defines: [\"TRANSLUCENT\", vectorFragDefine],\n        sources: [fsSource],\n      });\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push(\"VERTEX_DEPTH_CHECK\");\n        } else {\n          fs.defines.push(\"FRAGMENT_DEPTH_CHECK\");\n        }\n      }\n      if (this._sdf) {\n        fs.defines.push(\"SDF\");\n        fs.defines.push(\"SDF_EDGE \" + sdfEdge);\n      }\n      this._spTranslucent = ShaderProgram.replaceCache({\n        context: context,\n        shaderProgram: this._spTranslucent,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations,\n      });\n    }\n\n    if (this._blendOption === BlendOption.OPAQUE) {\n      fs = new ShaderSource({\n        defines: [vectorFragDefine],\n        sources: [fsSource],\n      });\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push(\"VERTEX_DEPTH_CHECK\");\n        } else {\n          fs.defines.push(\"FRAGMENT_DEPTH_CHECK\");\n        }\n      }\n      if (this._sdf) {\n        fs.defines.push(\"SDF\");\n        fs.defines.push(\"SDF_EDGE \" + sdfEdge);\n      }\n      this._sp = ShaderProgram.replaceCache({\n        context: context,\n        shaderProgram: this._sp,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations,\n      });\n    }\n\n    if (this._blendOption === BlendOption.TRANSLUCENT) {\n      fs = new ShaderSource({\n        defines: [vectorFragDefine],\n        sources: [fsSource],\n      });\n      if (this._shaderClampToGround) {\n        if (supportVSTextureReads) {\n          fs.defines.push(\"VERTEX_DEPTH_CHECK\");\n        } else {\n          fs.defines.push(\"FRAGMENT_DEPTH_CHECK\");\n        }\n      }\n      if (this._sdf) {\n        fs.defines.push(\"SDF\");\n        fs.defines.push(\"SDF_EDGE \" + sdfEdge);\n      }\n      this._spTranslucent = ShaderProgram.replaceCache({\n        context: context,\n        shaderProgram: this._spTranslucent,\n        vertexShaderSource: vs,\n        fragmentShaderSource: fs,\n        attributeLocations: attributeLocations,\n      });\n    }\n\n    this._compiledShaderRotation = this._shaderRotation;\n    this._compiledShaderAlignedAxis = this._shaderAlignedAxis;\n    this._compiledShaderScaleByDistance = this._shaderScaleByDistance;\n    this._compiledShaderTranslucencyByDistance = this._shaderTranslucencyByDistance;\n    this._compiledShaderPixelOffsetScaleByDistance = this._shaderPixelOffsetScaleByDistance;\n    this._compiledShaderDistanceDisplayCondition = this._shaderDistanceDisplayCondition;\n    this._compiledShaderDisableDepthDistance = this._shaderDisableDepthDistance;\n    this._compiledShaderClampToGround = this._shaderClampToGround;\n    this._compiledSDF = this._sdf;\n  }\n\n  var commandList = frameState.commandList;\n\n  if (pass.render || pass.pick) {\n    var colorList = this._colorCommands;\n\n    var opaque = this._blendOption === BlendOption.OPAQUE;\n    var opaqueAndTranslucent =\n      this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT;\n\n    var va = this._vaf.va;\n    var vaLength = va.length;\n\n    var uniforms = this._uniforms;\n    var pickId;\n    if (defined(this._batchTable)) {\n      uniforms = this._batchTable.getUniformMapCallback()(uniforms);\n      pickId = this._batchTable.getPickId();\n    } else {\n      pickId = \"v_pickColor\";\n    }\n\n    colorList.length = vaLength;\n    var totalLength = opaqueAndTranslucent ? vaLength * 2 : vaLength;\n    for (var j = 0; j < totalLength; ++j) {\n      var command = colorList[j];\n      if (!defined(command)) {\n        command = colorList[j] = new DrawCommand();\n      }\n\n      var opaqueCommand = opaque || (opaqueAndTranslucent && j % 2 === 0);\n\n      command.pass =\n        opaqueCommand || !opaqueAndTranslucent ? Pass.OPAQUE : Pass.TRANSLUCENT;\n      command.owner = this;\n\n      var index = opaqueAndTranslucent ? Math.floor(j / 2.0) : j;\n      command.boundingVolume = boundingVolume;\n      command.modelMatrix = modelMatrix;\n      command.count = va[index].indicesCount;\n      command.shaderProgram = opaqueCommand ? this._sp : this._spTranslucent;\n      command.uniformMap = uniforms;\n      command.vertexArray = va[index].va;\n      command.renderState = opaqueCommand\n        ? this._rsOpaque\n        : this._rsTranslucent;\n      command.debugShowBoundingVolume = this.debugShowBoundingVolume;\n      command.pickId = pickId;\n\n      if (this._instanced) {\n        command.count = 6;\n        command.instanceCount = billboardsLength;\n      }\n\n      commandList.push(command);\n    }\n\n    if (this.debugShowTextureAtlas) {\n      if (!defined(this.debugCommand)) {\n        this.debugCommand = createDebugCommand(this, frameState.context);\n      }\n\n      commandList.push(this.debugCommand);\n    }\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n *\n * @see BillboardCollection#destroy\n */\nBillboardCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * billboards = billboards && billboards.destroy();\n *\n * @see BillboardCollection#isDestroyed\n */\nBillboardCollection.prototype.destroy = function () {\n  if (defined(this._removeCallbackFunc)) {\n    this._removeCallbackFunc();\n    this._removeCallbackFunc = undefined;\n  }\n\n  this._textureAtlas =\n    this._destroyTextureAtlas &&\n    this._textureAtlas &&\n    this._textureAtlas.destroy();\n  this._sp = this._sp && this._sp.destroy();\n  this._spTranslucent = this._spTranslucent && this._spTranslucent.destroy();\n  this._vaf = this._vaf && this._vaf.destroy();\n  destroyBillboards(this._billboards);\n\n  return destroyObject(this);\n};\nexport default BillboardCollection;\n"]},"metadata":{},"sourceType":"module"}