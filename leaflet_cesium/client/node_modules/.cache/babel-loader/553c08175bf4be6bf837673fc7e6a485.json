{"ast":null,"code":"import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport loadCRN from \"../Core/loadCRN.js\";\nimport loadKTX from \"../Core/loadKTX.js\";\nimport Resource from \"../Core/Resource.js\";\n/**\n * Provides imagery to be displayed on the surface of an ellipsoid.  This type describes an\n * interface and is not intended to be instantiated directly.\n *\n * @alias ImageryProvider\n * @constructor\n * @abstract\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see OpenStreetMapImageryProvider\n * @see TileMapServiceImageryProvider\n * @see GoogleEarthEnterpriseImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see GridImageryProvider\n * @see IonImageryProvider\n * @see MapboxImageryProvider\n * @see MapboxStyleImageryProvider\n * @see SingleTileImageryProvider\n * @see TileCoordinatesImageryProvider\n * @see UrlTemplateImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Layers.html|Cesium Sandcastle Imagery Layers Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Layers%20Manipulation.html|Cesium Sandcastle Imagery Manipulation Demo}\n */\n\nfunction ImageryProvider() {\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultNightAlpha = undefined;\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultDayAlpha = undefined;\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultBrightness = undefined;\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultContrast = undefined;\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultHue = undefined;\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultSaturation = undefined;\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultGamma = undefined;\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n\n  this.defaultMinificationFilter = undefined;\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n\n  this.defaultMagnificationFilter = undefined;\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(ImageryProvider.prototype, {\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof ImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof ImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof ImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery. This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof ImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: DeveloperError.throwInstantiationError\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof ImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: DeveloperError.throwInstantiationError\n  }\n});\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\nImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link ImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\n\n\nImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  DeveloperError.throwInstantiationError();\n};\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link ImageryProvider#ready} returns true.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n * @function\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\n\n\nImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  DeveloperError.throwInstantiationError();\n};\n\nvar ktxRegex = /\\.ktx$/i;\nvar crnRegex = /\\.crn$/i;\n/**\n * Loads an image from a given URL.  If the server referenced by the URL already has\n * too many requests pending, this function will instead return undefined, indicating\n * that the request should be retried later.\n *\n * @param {ImageryProvider} imageryProvider The imagery provider for the URL.\n * @param {Resource|String} url The URL of the image.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n */\n\nImageryProvider.loadImage = function (imageryProvider, url) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url); //>>includeEnd('debug');\n\n  var resource = Resource.createIfNeeded(url);\n\n  if (ktxRegex.test(resource.url)) {\n    return loadKTX(resource);\n  } else if (crnRegex.test(resource.url)) {\n    return loadCRN(resource);\n  } else if (defined(imageryProvider) && defined(imageryProvider.tileDiscardPolicy)) {\n    return resource.fetchImage({\n      preferBlob: true,\n      preferImageBitmap: true,\n      flipY: true\n    });\n  }\n\n  return resource.fetchImage({\n    preferImageBitmap: true,\n    flipY: true\n  });\n};\n\nexport default ImageryProvider;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Scene/ImageryProvider.js"],"names":["Check","defined","DeveloperError","loadCRN","loadKTX","Resource","ImageryProvider","defaultAlpha","undefined","defaultNightAlpha","defaultDayAlpha","defaultBrightness","defaultContrast","defaultHue","defaultSaturation","defaultGamma","defaultMinificationFilter","defaultMagnificationFilter","throwInstantiationError","Object","defineProperties","prototype","ready","get","readyPromise","rectangle","tileWidth","tileHeight","maximumLevel","minimumLevel","tilingScheme","tileDiscardPolicy","errorEvent","credit","proxy","hasAlphaChannel","getTileCredits","x","y","level","requestImage","request","pickFeatures","longitude","latitude","ktxRegex","crnRegex","loadImage","imageryProvider","url","resource","createIfNeeded","test","fetchImage","preferBlob","preferImageBitmap","flipY"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,GAA2B;AACzB;AACF;AACA;AACA;AACA;AACA;AACA;AACE,OAAKC,YAAL,GAAoBC,SAApB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,iBAAL,GAAyBD,SAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKE,eAAL,GAAuBF,SAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKG,iBAAL,GAAyBH,SAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKI,eAAL,GAAuBJ,SAAvB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKK,UAAL,GAAkBL,SAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKM,iBAAL,GAAyBN,SAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKO,YAAL,GAAoBP,SAApB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKQ,yBAAL,GAAiCR,SAAjC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKS,0BAAL,GAAkCT,SAAlC;AAEAN,EAAAA,cAAc,CAACgB,uBAAf;AACD;;AAEDC,MAAM,CAACC,gBAAP,CAAwBd,eAAe,CAACe,SAAxC,EAAmD;AACjD;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADf,GAP0C;;AAWjD;AACF;AACA;AACA;AACA;AACA;AACEM,EAAAA,YAAY,EAAE;AACZD,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADR,GAjBmC;;AAqBjD;AACF;AACA;AACA;AACA;AACA;AACA;AACEO,EAAAA,SAAS,EAAE;AACTF,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADX,GA5BsC;;AAgCjD;AACF;AACA;AACA;AACA;AACA;AACA;AACEQ,EAAAA,SAAS,EAAE;AACTH,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADX,GAvCsC;;AA2CjD;AACF;AACA;AACA;AACA;AACA;AACA;AACES,EAAAA,UAAU,EAAE;AACVJ,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADV,GAlDqC;;AAsDjD;AACF;AACA;AACA;AACA;AACA;AACA;AACEU,EAAAA,YAAY,EAAE;AACZL,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADR,GA7DmC;;AAiEjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEW,EAAAA,YAAY,EAAE;AACZN,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADR,GA5EmC;;AAgFjD;AACF;AACA;AACA;AACA;AACA;AACA;AACEY,EAAAA,YAAY,EAAE;AACZP,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADR,GAvFmC;;AA2FjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEa,EAAAA,iBAAiB,EAAE;AACjBR,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADH,GApG8B;;AAwGjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEc,EAAAA,UAAU,EAAE;AACVT,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADV,GAhHqC;;AAoHjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEe,EAAAA,MAAM,EAAE;AACNV,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADd,GA5HyC;;AAgIjD;AACF;AACA;AACA;AACA;AACA;AACEgB,EAAAA,KAAK,EAAE;AACLX,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADf,GAtI0C;;AA0IjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEiB,EAAAA,eAAe,EAAE;AACfZ,IAAAA,GAAG,EAAErB,cAAc,CAACgB;AADL;AApJgC,CAAnD;AAyJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAZ,eAAe,CAACe,SAAhB,CAA0Be,cAA1B,GAA2C,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,KAAhB,EAAuB;AAChErC,EAAAA,cAAc,CAACgB,uBAAf;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,eAAe,CAACe,SAAhB,CAA0BmB,YAA1B,GAAyC,UAAUH,CAAV,EAAaC,CAAb,EAAgBC,KAAhB,EAAuBE,OAAvB,EAAgC;AACvEvC,EAAAA,cAAc,CAACgB,uBAAf;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,eAAe,CAACe,SAAhB,CAA0BqB,YAA1B,GAAyC,UACvCL,CADuC,EAEvCC,CAFuC,EAGvCC,KAHuC,EAIvCI,SAJuC,EAKvCC,QALuC,EAMvC;AACA1C,EAAAA,cAAc,CAACgB,uBAAf;AACD,CARD;;AAUA,IAAI2B,QAAQ,GAAG,SAAf;AACA,IAAIC,QAAQ,GAAG,SAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAxC,eAAe,CAACyC,SAAhB,GAA4B,UAAUC,eAAV,EAA2BC,GAA3B,EAAgC;AAC1D;AACAjD,EAAAA,KAAK,CAACC,OAAN,CAAc,KAAd,EAAqBgD,GAArB,EAF0D,CAG1D;;AAEA,MAAIC,QAAQ,GAAG7C,QAAQ,CAAC8C,cAAT,CAAwBF,GAAxB,CAAf;;AAEA,MAAIJ,QAAQ,CAACO,IAAT,CAAcF,QAAQ,CAACD,GAAvB,CAAJ,EAAiC;AAC/B,WAAO7C,OAAO,CAAC8C,QAAD,CAAd;AACD,GAFD,MAEO,IAAIJ,QAAQ,CAACM,IAAT,CAAcF,QAAQ,CAACD,GAAvB,CAAJ,EAAiC;AACtC,WAAO9C,OAAO,CAAC+C,QAAD,CAAd;AACD,GAFM,MAEA,IACLjD,OAAO,CAAC+C,eAAD,CAAP,IACA/C,OAAO,CAAC+C,eAAe,CAACjB,iBAAjB,CAFF,EAGL;AACA,WAAOmB,QAAQ,CAACG,UAAT,CAAoB;AACzBC,MAAAA,UAAU,EAAE,IADa;AAEzBC,MAAAA,iBAAiB,EAAE,IAFM;AAGzBC,MAAAA,KAAK,EAAE;AAHkB,KAApB,CAAP;AAKD;;AAED,SAAON,QAAQ,CAACG,UAAT,CAAoB;AACzBE,IAAAA,iBAAiB,EAAE,IADM;AAEzBC,IAAAA,KAAK,EAAE;AAFkB,GAApB,CAAP;AAID,CA1BD;;AA2BA,eAAelD,eAAf","sourcesContent":["import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport loadCRN from \"../Core/loadCRN.js\";\nimport loadKTX from \"../Core/loadKTX.js\";\nimport Resource from \"../Core/Resource.js\";\n\n/**\n * Provides imagery to be displayed on the surface of an ellipsoid.  This type describes an\n * interface and is not intended to be instantiated directly.\n *\n * @alias ImageryProvider\n * @constructor\n * @abstract\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see OpenStreetMapImageryProvider\n * @see TileMapServiceImageryProvider\n * @see GoogleEarthEnterpriseImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see GridImageryProvider\n * @see IonImageryProvider\n * @see MapboxImageryProvider\n * @see MapboxStyleImageryProvider\n * @see SingleTileImageryProvider\n * @see TileCoordinatesImageryProvider\n * @see UrlTemplateImageryProvider\n * @see WebMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Layers.html|Cesium Sandcastle Imagery Layers Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Imagery%20Layers%20Manipulation.html|Cesium Sandcastle Imagery Manipulation Demo}\n */\nfunction ImageryProvider() {\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(ImageryProvider.prototype, {\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof ImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof ImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof ImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery. This function should\n   * not be called before {@link ImageryProvider#ready} returns true.\n   * @memberof ImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof ImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof ImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link ImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link ImageryProvider#ready} returns true.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n * @function\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\nImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  DeveloperError.throwInstantiationError();\n};\n\nvar ktxRegex = /\\.ktx$/i;\nvar crnRegex = /\\.crn$/i;\n\n/**\n * Loads an image from a given URL.  If the server referenced by the URL already has\n * too many requests pending, this function will instead return undefined, indicating\n * that the request should be retried later.\n *\n * @param {ImageryProvider} imageryProvider The imagery provider for the URL.\n * @param {Resource|String} url The URL of the image.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n */\nImageryProvider.loadImage = function (imageryProvider, url) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"url\", url);\n  //>>includeEnd('debug');\n\n  var resource = Resource.createIfNeeded(url);\n\n  if (ktxRegex.test(resource.url)) {\n    return loadKTX(resource);\n  } else if (crnRegex.test(resource.url)) {\n    return loadCRN(resource);\n  } else if (\n    defined(imageryProvider) &&\n    defined(imageryProvider.tileDiscardPolicy)\n  ) {\n    return resource.fetchImage({\n      preferBlob: true,\n      preferImageBitmap: true,\n      flipY: true,\n    });\n  }\n\n  return resource.fetchImage({\n    preferImageBitmap: true,\n    flipY: true,\n  });\n};\nexport default ImageryProvider;\n"]},"metadata":{},"sourceType":"module"}