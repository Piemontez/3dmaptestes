{"ast":null,"code":"import Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Resource from \"../Core/Resource.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\nvar trailingSlashRegex = /\\/$/;\nvar defaultCredit = new Credit('&copy; <a href=\"https://www.mapbox.com/about/maps/\">Mapbox</a> &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> <strong><a href=\"https://www.mapbox.com/map-feedback/\">Improve this map</a></strong>');\n/**\n * @typedef {Object} MapboxImageryProvider.ConstructorOptions\n *\n * Initialization options for the MapboxImageryProvider constructor\n *\n * @property {String} [url='https://api.mapbox.com/v4/'] The Mapbox server url.\n * @property {String} mapId The Mapbox Map ID.\n * @property {String} accessToken The public access token for the imagery.\n * @property {String} [format='png'] The format of the image request.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @property {Number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @property {Number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * Provides tiled imagery hosted by Mapbox.\n *\n * @alias MapboxImageryProvider\n * @constructor\n *\n * @param {MapboxImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @example\n * // Mapbox tile provider\n * var mapbox = new Cesium.MapboxImageryProvider({\n *     mapId: 'mapbox.streets',\n *     accessToken: 'thisIsMyAccessToken'\n * });\n *\n * @see {@link https://www.mapbox.com/developers/api/maps/#tiles}\n * @see {@link https://www.mapbox.com/developers/api/#access-tokens}\n */\n\nfunction MapboxImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var mapId = options.mapId; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(mapId)) {\n    throw new DeveloperError(\"options.mapId is required.\");\n  } //>>includeEnd('debug');\n\n\n  var accessToken = options.accessToken; //>>includeStart('debug', pragmas.debug);\n\n  if (!defined(accessToken)) {\n    throw new DeveloperError(\"options.accessToken is required.\");\n  } //>>includeEnd('debug');\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n\n  this.defaultAlpha = undefined;\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultNightAlpha = undefined;\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultDayAlpha = undefined;\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultBrightness = undefined;\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultContrast = undefined;\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultHue = undefined;\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultSaturation = undefined;\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n\n  this.defaultGamma = undefined;\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n\n  this.defaultMinificationFilter = undefined;\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n\n  this.defaultMagnificationFilter = undefined;\n  var resource = Resource.createIfNeeded(defaultValue(options.url, \"https://{s}.tiles.mapbox.com/v4/\"));\n  this._mapId = mapId;\n  this._accessToken = accessToken;\n  var format = defaultValue(options.format, \"png\");\n\n  if (!/\\./.test(format)) {\n    format = \".\" + format;\n  }\n\n  this._format = format;\n  var templateUrl = resource.getUrlComponent();\n\n  if (!trailingSlashRegex.test(templateUrl)) {\n    templateUrl += \"/\";\n  }\n\n  templateUrl += mapId + \"/{z}/{x}/{y}\" + this._format;\n  resource.url = templateUrl;\n  resource.setQueryParameters({\n    access_token: accessToken\n  });\n  var credit;\n\n  if (defined(options.credit)) {\n    credit = options.credit;\n\n    if (typeof credit === \"string\") {\n      credit = new Credit(credit);\n    }\n  } else {\n    credit = defaultCredit;\n  }\n\n  this._resource = resource;\n  this._imageryProvider = new UrlTemplateImageryProvider({\n    url: resource,\n    credit: credit,\n    ellipsoid: options.ellipsoid,\n    minimumLevel: options.minimumLevel,\n    maximumLevel: options.maximumLevel,\n    rectangle: options.rectangle\n  });\n}\n\nObject.defineProperties(MapboxImageryProvider.prototype, {\n  /**\n   * Gets the URL of the Mapbox server.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._imageryProvider.url;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._imageryProvider.ready;\n    }\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._imageryProvider.readyPromise;\n    }\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._imageryProvider.rectangle;\n    }\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._imageryProvider.tileWidth;\n    }\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._imageryProvider.tileHeight;\n    }\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._imageryProvider.maximumLevel;\n    }\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._imageryProvider.minimumLevel;\n    }\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._imageryProvider.tilingScheme;\n    }\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._imageryProvider.tileDiscardPolicy;\n    }\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._imageryProvider.errorEvent;\n    }\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery. This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._imageryProvider.credit;\n    }\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._imageryProvider.proxy;\n    }\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._imageryProvider.hasAlphaChannel;\n    }\n  }\n});\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\n\nMapboxImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link MapboxImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\n\n\nMapboxImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return this._imageryProvider.requestImage(x, y, level, request);\n};\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link MapboxImageryProvider#ready} returns true.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\n\n\nMapboxImageryProvider.prototype.pickFeatures = function (x, y, level, longitude, latitude) {\n  return this._imageryProvider.pickFeatures(x, y, level, longitude, latitude);\n}; // Exposed for tests\n\n\nMapboxImageryProvider._defaultCredit = defaultCredit;\nexport default MapboxImageryProvider;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Scene/MapboxImageryProvider.js"],"names":["Credit","defaultValue","defined","DeveloperError","Resource","UrlTemplateImageryProvider","trailingSlashRegex","defaultCredit","MapboxImageryProvider","options","EMPTY_OBJECT","mapId","accessToken","defaultAlpha","undefined","defaultNightAlpha","defaultDayAlpha","defaultBrightness","defaultContrast","defaultHue","defaultSaturation","defaultGamma","defaultMinificationFilter","defaultMagnificationFilter","resource","createIfNeeded","url","_mapId","_accessToken","format","test","_format","templateUrl","getUrlComponent","setQueryParameters","access_token","credit","_resource","_imageryProvider","ellipsoid","minimumLevel","maximumLevel","rectangle","Object","defineProperties","prototype","get","ready","readyPromise","tileWidth","tileHeight","tilingScheme","tileDiscardPolicy","errorEvent","proxy","hasAlphaChannel","getTileCredits","x","y","level","requestImage","request","pickFeatures","longitude","latitude","_defaultCredit"],"mappings":"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","sourcesContent":["import Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Resource from \"../Core/Resource.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\n\nvar trailingSlashRegex = /\\/$/;\nvar defaultCredit = new Credit(\n  '&copy; <a href=\"https://www.mapbox.com/about/maps/\">Mapbox</a> &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> <strong><a href=\"https://www.mapbox.com/map-feedback/\">Improve this map</a></strong>'\n);\n\n/**\n * @typedef {Object} MapboxImageryProvider.ConstructorOptions\n *\n * Initialization options for the MapboxImageryProvider constructor\n *\n * @property {String} [url='https://api.mapbox.com/v4/'] The Mapbox server url.\n * @property {String} mapId The Mapbox Map ID.\n * @property {String} accessToken The public access token for the imagery.\n * @property {String} [format='png'] The format of the image request.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @property {Number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when specifying\n *                 this that the number of tiles at the minimum level is small, such as four or less.  A larger number is likely\n *                 to result in rendering problems.\n * @property {Number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the image.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * Provides tiled imagery hosted by Mapbox.\n *\n * @alias MapboxImageryProvider\n * @constructor\n *\n * @param {MapboxImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @example\n * // Mapbox tile provider\n * var mapbox = new Cesium.MapboxImageryProvider({\n *     mapId: 'mapbox.streets',\n *     accessToken: 'thisIsMyAccessToken'\n * });\n *\n * @see {@link https://www.mapbox.com/developers/api/maps/#tiles}\n * @see {@link https://www.mapbox.com/developers/api/#access-tokens}\n */\nfunction MapboxImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var mapId = options.mapId;\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(mapId)) {\n    throw new DeveloperError(\"options.mapId is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var accessToken = options.accessToken;\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(accessToken)) {\n    throw new DeveloperError(\"options.accessToken is required.\");\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  var resource = Resource.createIfNeeded(\n    defaultValue(options.url, \"https://{s}.tiles.mapbox.com/v4/\")\n  );\n\n  this._mapId = mapId;\n  this._accessToken = accessToken;\n\n  var format = defaultValue(options.format, \"png\");\n  if (!/\\./.test(format)) {\n    format = \".\" + format;\n  }\n  this._format = format;\n\n  var templateUrl = resource.getUrlComponent();\n  if (!trailingSlashRegex.test(templateUrl)) {\n    templateUrl += \"/\";\n  }\n  templateUrl += mapId + \"/{z}/{x}/{y}\" + this._format;\n  resource.url = templateUrl;\n\n  resource.setQueryParameters({\n    access_token: accessToken,\n  });\n\n  var credit;\n  if (defined(options.credit)) {\n    credit = options.credit;\n    if (typeof credit === \"string\") {\n      credit = new Credit(credit);\n    }\n  } else {\n    credit = defaultCredit;\n  }\n\n  this._resource = resource;\n  this._imageryProvider = new UrlTemplateImageryProvider({\n    url: resource,\n    credit: credit,\n    ellipsoid: options.ellipsoid,\n    minimumLevel: options.minimumLevel,\n    maximumLevel: options.maximumLevel,\n    rectangle: options.rectangle,\n  });\n}\n\nObject.defineProperties(MapboxImageryProvider.prototype, {\n  /**\n   * Gets the URL of the Mapbox server.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._imageryProvider.url;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._imageryProvider.ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._imageryProvider.readyPromise;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by the instance.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._imageryProvider.rectangle;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._imageryProvider.tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._imageryProvider.tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._imageryProvider.maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true. Generally,\n   * a minimum level should only be used when the rectangle of the imagery is small\n   * enough that the number of tiles at the minimum level is small.  An imagery\n   * provider with more than a few tiles at the minimum level will lead to\n   * rendering problems.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._imageryProvider.minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._imageryProvider.tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._imageryProvider.tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._imageryProvider.errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery. This function should\n   * not be called before {@link MapboxImageryProvider#ready} returns true.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._imageryProvider.credit;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._imageryProvider.proxy;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof MapboxImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._imageryProvider.hasAlphaChannel;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nMapboxImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link MapboxImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nMapboxImageryProvider.prototype.requestImage = function (x, y, level, request) {\n  return this._imageryProvider.requestImage(x, y, level, request);\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link MapboxImageryProvider#ready} returns true.\n * This function is optional, so it may not exist on all ImageryProviders.\n *\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\nMapboxImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return this._imageryProvider.pickFeatures(x, y, level, longitude, latitude);\n};\n\n// Exposed for tests\nMapboxImageryProvider._defaultCredit = defaultCredit;\nexport default MapboxImageryProvider;\n"]},"metadata":{},"sourceType":"module"}