{"ast":null,"code":"import PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n/**\n * The format of a pixel, i.e., the number of components it has and what they represent.\n *\n * @enum {Number}\n */\n\nvar PixelFormat = {\n  /**\n   * A pixel format containing a depth value.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DEPTH_COMPONENT: WebGLConstants.DEPTH_COMPONENT,\n\n  /**\n   * A pixel format containing a depth and stencil value, most often used with {@link PixelDatatype.UNSIGNED_INT_24_8}.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DEPTH_STENCIL: WebGLConstants.DEPTH_STENCIL,\n\n  /**\n   * A pixel format containing an alpha channel.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ALPHA: WebGLConstants.ALPHA,\n\n  /**\n   * A pixel format containing red, green, and blue channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB: WebGLConstants.RGB,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA: WebGLConstants.RGBA,\n\n  /**\n   * A pixel format containing a luminance (intensity) channel.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LUMINANCE: WebGLConstants.LUMINANCE,\n\n  /**\n   * A pixel format containing luminance (intensity) and alpha channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LUMINANCE_ALPHA: WebGLConstants.LUMINANCE_ALPHA,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is DXT1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_DXT1: WebGLConstants.COMPRESSED_RGB_S3TC_DXT1_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT1: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT3 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT3: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT5 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT5: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 4bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 2bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 4bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 2bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is ETC1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_ETC1: WebGLConstants.COMPRESSED_RGB_ETC1_WEBGL\n};\n/**\n * @private\n */\n\nPixelFormat.componentsLength = function (pixelFormat) {\n  switch (pixelFormat) {\n    case PixelFormat.RGB:\n      return 3;\n\n    case PixelFormat.RGBA:\n      return 4;\n\n    case PixelFormat.LUMINANCE_ALPHA:\n      return 2;\n\n    case PixelFormat.ALPHA:\n    case PixelFormat.LUMINANCE:\n      return 1;\n\n    default:\n      return 1;\n  }\n};\n/**\n * @private\n */\n\n\nPixelFormat.validate = function (pixelFormat) {\n  return pixelFormat === PixelFormat.DEPTH_COMPONENT || pixelFormat === PixelFormat.DEPTH_STENCIL || pixelFormat === PixelFormat.ALPHA || pixelFormat === PixelFormat.RGB || pixelFormat === PixelFormat.RGBA || pixelFormat === PixelFormat.LUMINANCE || pixelFormat === PixelFormat.LUMINANCE_ALPHA || pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5 || pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGB_ETC1;\n};\n/**\n * @private\n */\n\n\nPixelFormat.isColorFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.ALPHA || pixelFormat === PixelFormat.RGB || pixelFormat === PixelFormat.RGBA || pixelFormat === PixelFormat.LUMINANCE || pixelFormat === PixelFormat.LUMINANCE_ALPHA;\n};\n/**\n * @private\n */\n\n\nPixelFormat.isDepthFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.DEPTH_COMPONENT || pixelFormat === PixelFormat.DEPTH_STENCIL;\n};\n/**\n * @private\n */\n\n\nPixelFormat.isCompressedFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5 || pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGB_ETC1;\n};\n/**\n * @private\n */\n\n\nPixelFormat.isDXTFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGB_DXT1 || pixelFormat === PixelFormat.RGBA_DXT1 || pixelFormat === PixelFormat.RGBA_DXT3 || pixelFormat === PixelFormat.RGBA_DXT5;\n};\n/**\n * @private\n */\n\n\nPixelFormat.isPVRTCFormat = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 || pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1;\n};\n/**\n * @private\n */\n\n\nPixelFormat.isETC1Format = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGB_ETC1;\n};\n/**\n * @private\n */\n\n\nPixelFormat.compressedTextureSizeInBytes = function (pixelFormat, width, height) {\n  switch (pixelFormat) {\n    case PixelFormat.RGB_DXT1:\n    case PixelFormat.RGBA_DXT1:\n    case PixelFormat.RGB_ETC1:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n\n    case PixelFormat.RGBA_DXT3:\n    case PixelFormat.RGBA_DXT5:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n\n    case PixelFormat.RGB_PVRTC_4BPPV1:\n    case PixelFormat.RGBA_PVRTC_4BPPV1:\n      return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\n\n    case PixelFormat.RGB_PVRTC_2BPPV1:\n    case PixelFormat.RGBA_PVRTC_2BPPV1:\n      return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\n\n    default:\n      return 0;\n  }\n};\n/**\n * @private\n */\n\n\nPixelFormat.textureSizeInBytes = function (pixelFormat, pixelDatatype, width, height) {\n  var componentsLength = PixelFormat.componentsLength(pixelFormat);\n\n  if (PixelDatatype.isPacked(pixelDatatype)) {\n    componentsLength = 1;\n  }\n\n  return componentsLength * PixelDatatype.sizeInBytes(pixelDatatype) * width * height;\n};\n/**\n * @private\n */\n\n\nPixelFormat.alignmentInBytes = function (pixelFormat, pixelDatatype, width) {\n  var mod = PixelFormat.textureSizeInBytes(pixelFormat, pixelDatatype, width, 1) % 4;\n  return mod === 0 ? 4 : mod === 2 ? 2 : 1;\n};\n/**\n * @private\n */\n\n\nPixelFormat.createTypedArray = function (pixelFormat, pixelDatatype, width, height) {\n  var constructor;\n  var sizeInBytes = PixelDatatype.sizeInBytes(pixelDatatype);\n\n  if (sizeInBytes === Uint8Array.BYTES_PER_ELEMENT) {\n    constructor = Uint8Array;\n  } else if (sizeInBytes === Uint16Array.BYTES_PER_ELEMENT) {\n    constructor = Uint16Array;\n  } else if (sizeInBytes === Float32Array.BYTES_PER_ELEMENT && pixelDatatype === PixelDatatype.FLOAT) {\n    constructor = Float32Array;\n  } else {\n    constructor = Uint32Array;\n  }\n\n  var size = PixelFormat.componentsLength(pixelFormat) * width * height;\n  return new constructor(size);\n};\n/**\n * @private\n */\n\n\nPixelFormat.flipY = function (bufferView, pixelFormat, pixelDatatype, width, height) {\n  if (height === 1) {\n    return bufferView;\n  }\n\n  var flipped = PixelFormat.createTypedArray(pixelFormat, pixelDatatype, width, height);\n  var numberOfComponents = PixelFormat.componentsLength(pixelFormat);\n  var textureWidth = width * numberOfComponents;\n\n  for (var i = 0; i < height; ++i) {\n    var row = i * width * numberOfComponents;\n    var flippedRow = (height - i - 1) * width * numberOfComponents;\n\n    for (var j = 0; j < textureWidth; ++j) {\n      flipped[flippedRow + j] = bufferView[row + j];\n    }\n  }\n\n  return flipped;\n};\n/**\n * @private\n */\n\n\nPixelFormat.toInternalFormat = function (pixelFormat, pixelDatatype, context) {\n  // WebGL 1 require internalFormat to be the same as PixelFormat\n  if (!context.webgl2) {\n    return pixelFormat;\n  } // Convert pixelFormat to correct internalFormat for WebGL 2\n\n\n  if (pixelFormat === PixelFormat.DEPTH_STENCIL) {\n    return WebGLConstants.DEPTH24_STENCIL8;\n  }\n\n  if (pixelFormat === PixelFormat.DEPTH_COMPONENT) {\n    if (pixelDatatype === PixelDatatype.UNSIGNED_SHORT) {\n      return WebGLConstants.DEPTH_COMPONENT16;\n    } else if (pixelDatatype === PixelDatatype.UNSIGNED_INT) {\n      return WebGLConstants.DEPTH_COMPONENT24;\n    }\n  }\n\n  if (pixelDatatype === PixelDatatype.FLOAT) {\n    switch (pixelFormat) {\n      case PixelFormat.RGBA:\n        return WebGLConstants.RGBA32F;\n\n      case PixelFormat.RGB:\n        return WebGLConstants.RGB32F;\n\n      case PixelFormat.RG:\n        return WebGLConstants.RG32F;\n\n      case PixelFormat.R:\n        return WebGLConstants.R32F;\n    }\n  }\n\n  if (pixelDatatype === PixelDatatype.HALF_FLOAT) {\n    switch (pixelFormat) {\n      case PixelFormat.RGBA:\n        return WebGLConstants.RGBA16F;\n\n      case PixelFormat.RGB:\n        return WebGLConstants.RGB16F;\n\n      case PixelFormat.RG:\n        return WebGLConstants.RG16F;\n\n      case PixelFormat.R:\n        return WebGLConstants.R16F;\n    }\n  }\n\n  return pixelFormat;\n};\n\nexport default Object.freeze(PixelFormat);","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Core/PixelFormat.js"],"names":["PixelDatatype","WebGLConstants","PixelFormat","DEPTH_COMPONENT","DEPTH_STENCIL","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","RGB_DXT1","COMPRESSED_RGB_S3TC_DXT1_EXT","RGBA_DXT1","COMPRESSED_RGBA_S3TC_DXT1_EXT","RGBA_DXT3","COMPRESSED_RGBA_S3TC_DXT3_EXT","RGBA_DXT5","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","RGB_PVRTC_2BPPV1","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","RGBA_PVRTC_4BPPV1","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","RGBA_PVRTC_2BPPV1","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1","COMPRESSED_RGB_ETC1_WEBGL","componentsLength","pixelFormat","validate","isColorFormat","isDepthFormat","isCompressedFormat","isDXTFormat","isPVRTCFormat","isETC1Format","compressedTextureSizeInBytes","width","height","Math","floor","max","textureSizeInBytes","pixelDatatype","isPacked","sizeInBytes","alignmentInBytes","mod","createTypedArray","constructor","Uint8Array","BYTES_PER_ELEMENT","Uint16Array","Float32Array","FLOAT","Uint32Array","size","flipY","bufferView","flipped","numberOfComponents","textureWidth","i","row","flippedRow","j","toInternalFormat","context","webgl2","DEPTH24_STENCIL8","UNSIGNED_SHORT","DEPTH_COMPONENT16","UNSIGNED_INT","DEPTH_COMPONENT24","RGBA32F","RGB32F","RG","RG32F","R","R32F","HALF_FLOAT","RGBA16F","RGB16F","RG16F","R16F","Object","freeze"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,8BAA1B;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAG;AAChB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAEF,cAAc,CAACE,eAPhB;;AAShB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,aAAa,EAAEH,cAAc,CAACG,aAfd;;AAiBhB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,EAAEJ,cAAc,CAACI,KAvBN;;AAyBhB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,GAAG,EAAEL,cAAc,CAACK,GA/BJ;;AAiChB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAI,EAAEN,cAAc,CAACM,IAvCL;;AAyChB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAEP,cAAc,CAACO,SA/CV;;AAiDhB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAER,cAAc,CAACQ,eAvDhB;;AAyDhB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,QAAQ,EAAET,cAAc,CAACU,4BA/DT;;AAiEhB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAEX,cAAc,CAACY,6BAvEV;;AAyEhB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAEb,cAAc,CAACc,6BA/EV;;AAiFhB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAEf,cAAc,CAACgB,6BAvFV;;AAyFhB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,gBAAgB,EAAEjB,cAAc,CAACkB,+BA/FjB;;AAiGhB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,gBAAgB,EAAEnB,cAAc,CAACoB,+BAvGjB;;AAyGhB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,iBAAiB,EAAErB,cAAc,CAACsB,gCA/GlB;;AAiHhB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,iBAAiB,E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","sourcesContent":["import PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * The format of a pixel, i.e., the number of components it has and what they represent.\n *\n * @enum {Number}\n */\nvar PixelFormat = {\n  /**\n   * A pixel format containing a depth value.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DEPTH_COMPONENT: WebGLConstants.DEPTH_COMPONENT,\n\n  /**\n   * A pixel format containing a depth and stencil value, most often used with {@link PixelDatatype.UNSIGNED_INT_24_8}.\n   *\n   * @type {Number}\n   * @constant\n   */\n  DEPTH_STENCIL: WebGLConstants.DEPTH_STENCIL,\n\n  /**\n   * A pixel format containing an alpha channel.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ALPHA: WebGLConstants.ALPHA,\n\n  /**\n   * A pixel format containing red, green, and blue channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB: WebGLConstants.RGB,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA: WebGLConstants.RGBA,\n\n  /**\n   * A pixel format containing a luminance (intensity) channel.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LUMINANCE: WebGLConstants.LUMINANCE,\n\n  /**\n   * A pixel format containing luminance (intensity) and alpha channels.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LUMINANCE_ALPHA: WebGLConstants.LUMINANCE_ALPHA,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is DXT1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_DXT1: WebGLConstants.COMPRESSED_RGB_S3TC_DXT1_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT1: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT3 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT3: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is DXT5 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_DXT5: WebGLConstants.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 4bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is PVR 2bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 4bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_PVRTC_4BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, blue, and alpha channels that is PVR 2bpp compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGBA_PVRTC_2BPPV1: WebGLConstants.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,\n\n  /**\n   * A pixel format containing red, green, and blue channels that is ETC1 compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RGB_ETC1: WebGLConstants.COMPRESSED_RGB_ETC1_WEBGL,\n};\n\n/**\n * @private\n */\nPixelFormat.componentsLength = function (pixelFormat) {\n  switch (pixelFormat) {\n    case PixelFormat.RGB:\n      return 3;\n    case PixelFormat.RGBA:\n      return 4;\n    case PixelFormat.LUMINANCE_ALPHA:\n      return 2;\n    case PixelFormat.ALPHA:\n    case PixelFormat.LUMINANCE:\n      return 1;\n    default:\n      return 1;\n  }\n};\n\n/**\n * @private\n */\nPixelFormat.validate = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.DEPTH_COMPONENT ||\n    pixelFormat === PixelFormat.DEPTH_STENCIL ||\n    pixelFormat === PixelFormat.ALPHA ||\n    pixelFormat === PixelFormat.RGB ||\n    pixelFormat === PixelFormat.RGBA ||\n    pixelFormat === PixelFormat.LUMINANCE ||\n    pixelFormat === PixelFormat.LUMINANCE_ALPHA ||\n    pixelFormat === PixelFormat.RGB_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT3 ||\n    pixelFormat === PixelFormat.RGBA_DXT5 ||\n    pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 ||\n    pixelFormat === PixelFormat.RGB_ETC1\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isColorFormat = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.ALPHA ||\n    pixelFormat === PixelFormat.RGB ||\n    pixelFormat === PixelFormat.RGBA ||\n    pixelFormat === PixelFormat.LUMINANCE ||\n    pixelFormat === PixelFormat.LUMINANCE_ALPHA\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isDepthFormat = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.DEPTH_COMPONENT ||\n    pixelFormat === PixelFormat.DEPTH_STENCIL\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isCompressedFormat = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.RGB_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT3 ||\n    pixelFormat === PixelFormat.RGBA_DXT5 ||\n    pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 ||\n    pixelFormat === PixelFormat.RGB_ETC1\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isDXTFormat = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.RGB_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT1 ||\n    pixelFormat === PixelFormat.RGBA_DXT3 ||\n    pixelFormat === PixelFormat.RGBA_DXT5\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isPVRTCFormat = function (pixelFormat) {\n  return (\n    pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\n    pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.isETC1Format = function (pixelFormat) {\n  return pixelFormat === PixelFormat.RGB_ETC1;\n};\n\n/**\n * @private\n */\nPixelFormat.compressedTextureSizeInBytes = function (\n  pixelFormat,\n  width,\n  height\n) {\n  switch (pixelFormat) {\n    case PixelFormat.RGB_DXT1:\n    case PixelFormat.RGBA_DXT1:\n    case PixelFormat.RGB_ETC1:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n\n    case PixelFormat.RGBA_DXT3:\n    case PixelFormat.RGBA_DXT5:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n\n    case PixelFormat.RGB_PVRTC_4BPPV1:\n    case PixelFormat.RGBA_PVRTC_4BPPV1:\n      return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\n\n    case PixelFormat.RGB_PVRTC_2BPPV1:\n    case PixelFormat.RGBA_PVRTC_2BPPV1:\n      return Math.floor(\n        (Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8\n      );\n\n    default:\n      return 0;\n  }\n};\n\n/**\n * @private\n */\nPixelFormat.textureSizeInBytes = function (\n  pixelFormat,\n  pixelDatatype,\n  width,\n  height\n) {\n  var componentsLength = PixelFormat.componentsLength(pixelFormat);\n  if (PixelDatatype.isPacked(pixelDatatype)) {\n    componentsLength = 1;\n  }\n  return (\n    componentsLength * PixelDatatype.sizeInBytes(pixelDatatype) * width * height\n  );\n};\n\n/**\n * @private\n */\nPixelFormat.alignmentInBytes = function (pixelFormat, pixelDatatype, width) {\n  var mod =\n    PixelFormat.textureSizeInBytes(pixelFormat, pixelDatatype, width, 1) % 4;\n  return mod === 0 ? 4 : mod === 2 ? 2 : 1;\n};\n\n/**\n * @private\n */\nPixelFormat.createTypedArray = function (\n  pixelFormat,\n  pixelDatatype,\n  width,\n  height\n) {\n  var constructor;\n  var sizeInBytes = PixelDatatype.sizeInBytes(pixelDatatype);\n  if (sizeInBytes === Uint8Array.BYTES_PER_ELEMENT) {\n    constructor = Uint8Array;\n  } else if (sizeInBytes === Uint16Array.BYTES_PER_ELEMENT) {\n    constructor = Uint16Array;\n  } else if (\n    sizeInBytes === Float32Array.BYTES_PER_ELEMENT &&\n    pixelDatatype === PixelDatatype.FLOAT\n  ) {\n    constructor = Float32Array;\n  } else {\n    constructor = Uint32Array;\n  }\n\n  var size = PixelFormat.componentsLength(pixelFormat) * width * height;\n  return new constructor(size);\n};\n\n/**\n * @private\n */\nPixelFormat.flipY = function (\n  bufferView,\n  pixelFormat,\n  pixelDatatype,\n  width,\n  height\n) {\n  if (height === 1) {\n    return bufferView;\n  }\n  var flipped = PixelFormat.createTypedArray(\n    pixelFormat,\n    pixelDatatype,\n    width,\n    height\n  );\n  var numberOfComponents = PixelFormat.componentsLength(pixelFormat);\n  var textureWidth = width * numberOfComponents;\n  for (var i = 0; i < height; ++i) {\n    var row = i * width * numberOfComponents;\n    var flippedRow = (height - i - 1) * width * numberOfComponents;\n    for (var j = 0; j < textureWidth; ++j) {\n      flipped[flippedRow + j] = bufferView[row + j];\n    }\n  }\n  return flipped;\n};\n\n/**\n * @private\n */\nPixelFormat.toInternalFormat = function (pixelFormat, pixelDatatype, context) {\n  // WebGL 1 require internalFormat to be the same as PixelFormat\n  if (!context.webgl2) {\n    return pixelFormat;\n  }\n\n  // Convert pixelFormat to correct internalFormat for WebGL 2\n  if (pixelFormat === PixelFormat.DEPTH_STENCIL) {\n    return WebGLConstants.DEPTH24_STENCIL8;\n  }\n\n  if (pixelFormat === PixelFormat.DEPTH_COMPONENT) {\n    if (pixelDatatype === PixelDatatype.UNSIGNED_SHORT) {\n      return WebGLConstants.DEPTH_COMPONENT16;\n    } else if (pixelDatatype === PixelDatatype.UNSIGNED_INT) {\n      return WebGLConstants.DEPTH_COMPONENT24;\n    }\n  }\n\n  if (pixelDatatype === PixelDatatype.FLOAT) {\n    switch (pixelFormat) {\n      case PixelFormat.RGBA:\n        return WebGLConstants.RGBA32F;\n      case PixelFormat.RGB:\n        return WebGLConstants.RGB32F;\n      case PixelFormat.RG:\n        return WebGLConstants.RG32F;\n      case PixelFormat.R:\n        return WebGLConstants.R32F;\n    }\n  }\n\n  if (pixelDatatype === PixelDatatype.HALF_FLOAT) {\n    switch (pixelFormat) {\n      case PixelFormat.RGBA:\n        return WebGLConstants.RGBA16F;\n      case PixelFormat.RGB:\n        return WebGLConstants.RGB16F;\n      case PixelFormat.RG:\n        return WebGLConstants.RG16F;\n      case PixelFormat.R:\n        return WebGLConstants.R16F;\n    }\n  }\n\n  return pixelFormat;\n};\n\nexport default Object.freeze(PixelFormat);\n"]},"metadata":{},"sourceType":"module"}