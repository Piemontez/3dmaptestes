{"ast":null,"code":"import Uri from \"../ThirdParty/Uri.js\";\nimport when from \"../ThirdParty/when.js\";\nimport buildModuleUrl from \"./buildModuleUrl.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport destroyObject from \"./destroyObject.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Event from \"./Event.js\";\nimport FeatureDetection from \"./FeatureDetection.js\";\nimport isCrossOriginUrl from \"./isCrossOriginUrl.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\nfunction canTransferArrayBuffer() {\n  if (!defined(TaskProcessor._canTransferArrayBuffer)) {\n    var worker = new Worker(getWorkerUrl(\"Workers/transferTypedArrayTest.js\"));\n    worker.postMessage = defaultValue(worker.webkitPostMessage, worker.postMessage);\n    var value = 99;\n    var array = new Int8Array([value]);\n\n    try {\n      // postMessage might fail with a DataCloneError\n      // if transferring array buffers is not supported.\n      worker.postMessage({\n        array: array\n      }, [array.buffer]);\n    } catch (e) {\n      TaskProcessor._canTransferArrayBuffer = false;\n      return TaskProcessor._canTransferArrayBuffer;\n    }\n\n    var deferred = when.defer();\n\n    worker.onmessage = function (event) {\n      var array = event.data.array; // some versions of Firefox silently fail to transfer typed arrays.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=841904\n      // Check to make sure the value round-trips successfully.\n\n      var result = defined(array) && array[0] === value;\n      deferred.resolve(result);\n      worker.terminate();\n      TaskProcessor._canTransferArrayBuffer = result;\n    };\n\n    TaskProcessor._canTransferArrayBuffer = deferred.promise;\n  }\n\n  return TaskProcessor._canTransferArrayBuffer;\n}\n\nvar taskCompletedEvent = new Event();\n\nfunction completeTask(processor, data) {\n  --processor._activeTasks;\n  var id = data.id;\n\n  if (!defined(id)) {\n    // This is not one of ours.\n    return;\n  }\n\n  var deferreds = processor._deferreds;\n  var deferred = deferreds[id];\n\n  if (defined(data.error)) {\n    var error = data.error;\n\n    if (error.name === \"RuntimeError\") {\n      error = new RuntimeError(data.error.message);\n      error.stack = data.error.stack;\n    } else if (error.name === \"DeveloperError\") {\n      error = new DeveloperError(data.error.message);\n      error.stack = data.error.stack;\n    }\n\n    taskCompletedEvent.raiseEvent(error);\n    deferred.reject(error);\n  } else {\n    taskCompletedEvent.raiseEvent();\n    deferred.resolve(data.result);\n  }\n\n  delete deferreds[id];\n}\n\nfunction getWorkerUrl(moduleID) {\n  var url = buildModuleUrl(moduleID);\n\n  if (isCrossOriginUrl(url)) {\n    //to load cross-origin, create a shim worker from a blob URL\n    var script = 'importScripts(\"' + url + '\");';\n    var blob;\n\n    try {\n      blob = new Blob([script], {\n        type: \"application/javascript\"\n      });\n    } catch (e) {\n      var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n      var blobBuilder = new BlobBuilder();\n      blobBuilder.append(script);\n      blob = blobBuilder.getBlob(\"application/javascript\");\n    }\n\n    var URL = window.URL || window.webkitURL;\n    url = URL.createObjectURL(blob);\n  }\n\n  return url;\n}\n\nvar bootstrapperUrlResult;\n\nfunction getBootstrapperUrl() {\n  if (!defined(bootstrapperUrlResult)) {\n    bootstrapperUrlResult = getWorkerUrl(\"Workers/cesiumWorkerBootstrapper.js\");\n  }\n\n  return bootstrapperUrlResult;\n}\n\nfunction createWorker(processor) {\n  var worker = new Worker(getBootstrapperUrl());\n  worker.postMessage = defaultValue(worker.webkitPostMessage, worker.postMessage);\n  var bootstrapMessage = {\n    loaderConfig: {\n      paths: {\n        Workers: buildModuleUrl(\"Workers\")\n      },\n      baseUrl: buildModuleUrl.getCesiumBaseUrl().url\n    },\n    workerModule: processor._workerPath\n  };\n  worker.postMessage(bootstrapMessage);\n\n  worker.onmessage = function (event) {\n    completeTask(processor, event.data);\n  };\n\n  return worker;\n}\n\nfunction getWebAssemblyLoaderConfig(processor, wasmOptions) {\n  var config = {\n    modulePath: undefined,\n    wasmBinaryFile: undefined,\n    wasmBinary: undefined\n  }; // Web assembly not supported, use fallback js module if provided\n\n  if (!FeatureDetection.supportsWebAssembly()) {\n    if (!defined(wasmOptions.fallbackModulePath)) {\n      throw new RuntimeError(\"This browser does not support Web Assembly, and no backup module was provided for \" + processor._workerPath);\n    }\n\n    config.modulePath = buildModuleUrl(wasmOptions.fallbackModulePath);\n    return when.resolve(config);\n  }\n\n  config.modulePath = buildModuleUrl(wasmOptions.modulePath);\n  config.wasmBinaryFile = buildModuleUrl(wasmOptions.wasmBinaryFile);\n  return Resource.fetchArrayBuffer({\n    url: config.wasmBinaryFile\n  }).then(function (arrayBuffer) {\n    config.wasmBinary = arrayBuffer;\n    return config;\n  });\n}\n/**\n * A wrapper around a web worker that allows scheduling tasks for a given worker,\n * returning results asynchronously via a promise.\n *\n * The Worker is not constructed until a task is scheduled.\n *\n * @alias TaskProcessor\n * @constructor\n *\n * @param {String} workerPath The Url to the worker. This can either be an absolute path or relative to the Cesium Workers folder.\n * @param {Number} [maximumActiveTasks=Number.POSITIVE_INFINITY] The maximum number of active tasks.  Once exceeded,\n *                                        scheduleTask will not queue any more tasks, allowing\n *                                        work to be rescheduled in future frames.\n */\n\n\nfunction TaskProcessor(workerPath, maximumActiveTasks) {\n  this._workerPath = new Uri(workerPath).isAbsolute() ? workerPath : TaskProcessor._workerModulePrefix + workerPath;\n  this._maximumActiveTasks = defaultValue(maximumActiveTasks, Number.POSITIVE_INFINITY);\n  this._activeTasks = 0;\n  this._deferreds = {};\n  this._nextID = 0;\n}\n\nvar emptyTransferableObjectArray = [];\n/**\n * Schedule a task to be processed by the web worker asynchronously.  If there are currently more\n * tasks active than the maximum set by the constructor, will immediately return undefined.\n * Otherwise, returns a promise that will resolve to the result posted back by the worker when\n * finished.\n *\n * @param {Object} parameters Any input data that will be posted to the worker.\n * @param {Object[]} [transferableObjects] An array of objects contained in parameters that should be\n *                                      transferred to the worker instead of copied.\n * @returns {Promise.<Object>|undefined} Either a promise that will resolve to the result when available, or undefined\n *                    if there are too many active tasks,\n *\n * @example\n * var taskProcessor = new Cesium.TaskProcessor('myWorkerPath');\n * var promise = taskProcessor.scheduleTask({\n *     someParameter : true,\n *     another : 'hello'\n * });\n * if (!Cesium.defined(promise)) {\n *     // too many active tasks - try again later\n * } else {\n *     Cesium.when(promise, function(result) {\n *         // use the result of the task\n *     });\n * }\n */\n\nTaskProcessor.prototype.scheduleTask = function (parameters, transferableObjects) {\n  if (!defined(this._worker)) {\n    this._worker = createWorker(this);\n  }\n\n  if (this._activeTasks >= this._maximumActiveTasks) {\n    return undefined;\n  }\n\n  ++this._activeTasks;\n  var processor = this;\n  return when(canTransferArrayBuffer(), function (canTransferArrayBuffer) {\n    if (!defined(transferableObjects)) {\n      transferableObjects = emptyTransferableObjectArray;\n    } else if (!canTransferArrayBuffer) {\n      transferableObjects.length = 0;\n    }\n\n    var id = processor._nextID++;\n    var deferred = when.defer();\n    processor._deferreds[id] = deferred;\n\n    processor._worker.postMessage({\n      id: id,\n      parameters: parameters,\n      canTransferArrayBuffer: canTransferArrayBuffer\n    }, transferableObjects);\n\n    return deferred.promise;\n  });\n};\n/**\n * Posts a message to a web worker with configuration to initialize loading\n * and compiling a web assembly module asychronously, as well as an optional\n * fallback JavaScript module to use if Web Assembly is not supported.\n *\n * @param {Object} [webAssemblyOptions] An object with the following properties:\n * @param {String} [webAssemblyOptions.modulePath] The path of the web assembly JavaScript wrapper module.\n * @param {String} [webAssemblyOptions.wasmBinaryFile] The path of the web assembly binary file.\n * @param {String} [webAssemblyOptions.fallbackModulePath] The path of the fallback JavaScript module to use if web assembly is not supported.\n * @returns {Promise.<Object>} A promise that resolves to the result when the web worker has loaded and compiled the web assembly module and is ready to process tasks.\n */\n\n\nTaskProcessor.prototype.initWebAssemblyModule = function (webAssemblyOptions) {\n  if (!defined(this._worker)) {\n    this._worker = createWorker(this);\n  }\n\n  var deferred = when.defer();\n  var processor = this;\n  var worker = this._worker;\n  getWebAssemblyLoaderConfig(this, webAssemblyOptions).then(function (wasmConfig) {\n    return when(canTransferArrayBuffer(), function (canTransferArrayBuffer) {\n      var transferableObjects;\n      var binary = wasmConfig.wasmBinary;\n\n      if (defined(binary) && canTransferArrayBuffer) {\n        transferableObjects = [binary];\n      }\n\n      worker.onmessage = function (event) {\n        worker.onmessage = function (event) {\n          completeTask(processor, event.data);\n        };\n\n        deferred.resolve(event.data);\n      };\n\n      worker.postMessage({\n        webAssemblyConfig: wasmConfig\n      }, transferableObjects);\n    });\n  });\n  return deferred;\n};\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see TaskProcessor#destroy\n */\n\n\nTaskProcessor.prototype.isDestroyed = function () {\n  return false;\n};\n/**\n * Destroys this object.  This will immediately terminate the Worker.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n */\n\n\nTaskProcessor.prototype.destroy = function () {\n  if (defined(this._worker)) {\n    this._worker.terminate();\n  }\n\n  return destroyObject(this);\n};\n/**\n * An event that's raised when a task is completed successfully.  Event handlers are passed\n * the error object is a task fails.\n *\n * @type {Event}\n *\n * @private\n */\n\n\nTaskProcessor.taskCompletedEvent = taskCompletedEvent; // exposed for testing purposes\n\nTaskProcessor._defaultWorkerModulePrefix = \"Workers/\";\nTaskProcessor._workerModulePrefix = TaskProcessor._defaultWorkerModulePrefix;\nTaskProcessor._canTransferArrayBuffer = undefined;\nexport default TaskProcessor;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Core/TaskProcessor.js"],"names":["Uri","when","buildModuleUrl","defaultValue","defined","destroyObject","DeveloperError","Event","FeatureDetection","isCrossOriginUrl","Resource","RuntimeError","canTransferArrayBuffer","TaskProcessor","_canTransferArrayBuffer","worker","Worker","getWorkerUrl","postMessage","webkitPostMessage","value","array","Int8Array","buffer","e","deferred","defer","onmessage","event","data","result","resolve","terminate","promise","taskCompletedEvent","completeTask","processor","_activeTasks","id","deferreds","_deferreds","error","name","message","stack","raiseEvent","reject","moduleID","url","script","blob","Blob","type","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","URL","webkitURL","createObjectURL","bootstrapperUrlResult","getBootstrapperUrl","createWorker","bootstrapMessage","loaderConfig","paths","Workers","baseUrl","getCesiumBaseUrl","workerModule","_workerPath","getWebAssemblyLoaderConfig","wasmOptions","config","modulePath","undefined","wasmBinaryFile","wasmBinary","supportsWebAssembly","fallbackModulePath","fetchArrayBuffer","then","arrayBuffer","workerPath","maximumActiveTasks","isAbsolute","_workerModulePrefix","_maximumActiveTasks","Number","POSITIVE_INFINITY","_nextID","emptyTransferableObjectArray","prototype","scheduleTask","parameters","transferableObjects","_worker","length","initWebAssemblyModule","webAssemblyOptions","wasmConfig","binary","webAssemblyConfig","isDestroyed","destroy","_defaultWorkerModulePrefix"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,sBAAhB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;;AAEA,SAASC,sBAAT,GAAkC;AAChC,MAAI,CAACR,OAAO,CAACS,aAAa,CAACC,uBAAf,CAAZ,EAAqD;AACnD,QAAIC,MAAM,GAAG,IAAIC,MAAJ,CAAWC,YAAY,CAAC,mCAAD,CAAvB,CAAb;AACAF,IAAAA,MAAM,CAACG,WAAP,GAAqBf,YAAY,CAC/BY,MAAM,CAACI,iBADwB,EAE/BJ,MAAM,CAACG,WAFwB,CAAjC;AAKA,QAAIE,KAAK,GAAG,EAAZ;AACA,QAAIC,KAAK,GAAG,IAAIC,SAAJ,CAAc,CAACF,KAAD,CAAd,CAAZ;;AAEA,QAAI;AACF;AACA;AACAL,MAAAA,MAAM,CAACG,WAAP,CACE;AACEG,QAAAA,KAAK,EAAEA;AADT,OADF,EAIE,CAACA,KAAK,CAACE,MAAP,CAJF;AAMD,KATD,CASE,OAAOC,CAAP,EAAU;AACVX,MAAAA,aAAa,CAACC,uBAAd,GAAwC,KAAxC;AACA,aAAOD,aAAa,CAACC,uBAArB;AACD;;AAED,QAAIW,QAAQ,GAAGxB,IAAI,CAACyB,KAAL,EAAf;;AAEAX,IAAAA,MAAM,CAACY,SAAP,GAAmB,UAAUC,KAAV,EAAiB;AAClC,UAAIP,KAAK,GAAGO,KAAK,CAACC,IAAN,CAAWR,KAAvB,CADkC,CAGlC;AACA;AACA;;AACA,UAAIS,MAAM,GAAG1B,OAAO,CAACiB,KAAD,CAAP,IAAkBA,KAAK,CAAC,CAAD,CAAL,KAAaD,KAA5C;AACAK,MAAAA,QAAQ,CAACM,OAAT,CAAiBD,MAAjB;AAEAf,MAAAA,MAAM,CAACiB,SAAP;AAEAnB,MAAAA,aAAa,CAACC,uBAAd,GAAwCgB,MAAxC;AACD,KAZD;;AAcAjB,IAAAA,aAAa,CAACC,uBAAd,GAAwCW,QAAQ,CAACQ,OAAjD;AACD;;AAED,SAAOpB,aAAa,CAACC,uBAArB;AACD;;AAED,IAAIoB,kBAAkB,GAAG,IAAI3B,KAAJ,EAAzB;;AAEA,SAAS4B,YAAT,CAAsBC,SAAtB,EAAiCP,IAAjC,EAAuC;AACrC,IAAEO,SAAS,CAACC,YAAZ;AAEA,MAAIC,EAAE,GAAGT,IAAI,CAACS,EAAd;;AACA,MAAI,CAAClC,OAAO,CAACkC,EAAD,CAAZ,EAAkB;AAChB;AACA;AACD;;AAED,MAAIC,SAAS,GAAGH,SAAS,CAACI,UAA1B;AACA,MAAIf,QAAQ,GAAGc,SAAS,CAACD,EAAD,CAAxB;;AAEA,MAAIlC,OAAO,CAACyB,IAAI,CAACY,KAAN,CAAX,EAAyB;AACvB,QAAIA,KAAK,GAAGZ,IAAI,CAACY,KAAjB;;AACA,QAAIA,KAAK,CAACC,IAAN,KAAe,cAAnB,EAAmC;AACjCD,MAAAA,KAAK,GAAG,IAAI9B,YAAJ,CAAiBkB,IAAI,CAACY,KAAL,CAAWE,OAA5B,CAAR;AACAF,MAAAA,KAAK,CAACG,KAAN,GAAcf,IAAI,CAACY,KAAL,CAAWG,KAAzB;AACD,KAHD,MAGO,IAAIH,KAAK,CAACC,IAAN,KAAe,gBAAnB,EAAqC;AAC1CD,MAAAA,KAAK,GAAG,IAAInC,cAAJ,CAAmBuB,IAAI,CAACY,KAAL,CAAWE,OAA9B,CAAR;AACAF,MAAAA,KAAK,CAACG,KAAN,GAAcf,IAAI,CAACY,KAAL,CAAWG,KAAzB;AACD;;AACDV,IAAAA,kBAAkB,CAACW,UAAnB,CAA8BJ,KAA9B;AACAhB,IAAAA,QAAQ,CAACqB,MAAT,CAAgBL,KAAhB;AACD,GAXD,MAWO;AACLP,IAAAA,kBAAkB,CAACW,UAAnB;AACApB,IAAAA,QAAQ,CAACM,OAAT,CAAiBF,IAAI,CAACC,MAAtB;AACD;;AAED,SAAOS,SAAS,CAACD,EAAD,CAAhB;AACD;;AAED,SAASrB,YAAT,CAAsB8B,QAAtB,EAAgC;AAC9B,MAAIC,GAAG,GAAG9C,cAAc,CAAC6C,QAAD,CAAxB;;AAEA,MAAItC,gBAAgB,CAACuC,GAAD,CAApB,EAA2B;AACzB;AACA,QAAIC,MAAM,GAAG,oBAAoBD,GAApB,GAA0B,KAAvC;AAEA,QAAIE,IAAJ;;AACA,QAAI;AACFA,MAAAA,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACF,MAAD,CAAT,EAAmB;AACxBG,QAAAA,IAAI,EAAE;AADkB,OAAnB,CAAP;AAGD,KAJD,CAIE,OAAO5B,CAAP,EAAU;AACV,UAAI6B,WAAW,GACbC,MAAM,CAACD,WAAP,IACAC,MAAM,CAACC,iBADP,IAEAD,MAAM,CAACE,cAFP,IAGAF,MAAM,CAACG,aAJT;AAKA,UAAIC,WAAW,GAAG,IAAIL,WAAJ,EAAlB;AACAK,MAAAA,WAAW,CAACC,MAAZ,CAAmBV,MAAnB;AACAC,MAAAA,IAAI,GAAGQ,WAAW,CAACE,OAAZ,CAAoB,wBAApB,CAAP;AACD;;AAED,QAAIC,GAAG,GAAGP,MAAM,CAACO,GAAP,IAAcP,MAAM,CAACQ,SAA/B;AACAd,IAAAA,GAAG,GAAGa,GAAG,CAACE,eAAJ,CAAoBb,IAApB,CAAN;AACD;;AAED,SAAOF,GAAP;AACD;;AAED,IAAIgB,qBAAJ;;AACA,SAASC,kBAAT,GAA8B;AAC5B,MAAI,CAAC7D,OAAO,CAAC4D,qBAAD,CAAZ,EAAqC;AACnCA,IAAAA,qBAAqB,GAAG/C,YAAY,CAAC,qCAAD,CAApC;AACD;;AACD,SAAO+C,qBAAP;AACD;;AAED,SAASE,YAAT,CAAsB9B,SAAtB,EAAiC;AAC/B,MAAIrB,MAAM,GAAG,IAAIC,MAAJ,CAAWiD,kBAAkB,EAA7B,CAAb;AACAlD,EAAAA,MAAM,CAACG,WAAP,GAAqBf,YAAY,CAC/BY,MAAM,CAACI,iBADwB,EAE/BJ,MAAM,CAACG,WAFwB,CAAjC;AAKA,MAAIiD,gBAAgB,GAAG;AACrBC,IAAAA,YAAY,EAAE;AACZC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAEpE,cAAc,CAAC,SAAD;AADlB,OADK;AAIZqE,MAAAA,OAAO,EAAErE,cAAc,CAACsE,gBAAf,GAAkCxB;AAJ/B,KADO;AAOrByB,IAAAA,YAAY,EAAErC,SAAS,CAACsC;AAPH,GAAvB;AAUA3D,EAAAA,MAAM,CAACG,WAAP,CAAmBiD,gBAAnB;;AACApD,EAAAA,MAAM,CAACY,SAAP,GAAmB,UAAUC,KAAV,EAAiB;AAClCO,IAAAA,YAAY,CAACC,SAAD,EAAYR,KAAK,CAACC,IAAlB,CAAZ;AACD,GAFD;;AAIA,SAAOd,MAAP;AACD;;AAED,SAAS4D,0BAAT,CAAoCvC,SAApC,EAA+CwC,WAA/C,EAA4D;AAC1D,MAAIC,MAAM,GAAG;AACXC,IAAAA,UAAU,EAAEC,SADD;AAEXC,IAAAA,cAAc,EAAED,SAFL;AAGXE,IAAAA,UAAU,EAAEF;AAHD,GAAb,CAD0D,CAO1D;;AACA,MAAI,CAACvE,gBAAgB,CAAC0E,mBAAjB,EAAL,EAA6C;AAC3C,QAAI,CAAC9E,OAAO,CAACwE,WAAW,CAACO,kBAAb,CAAZ,EAA8C;AAC5C,YAAM,IAAIxE,YAAJ,CACJ,uFACEyB,SAAS,CAACsC,WAFR,CAAN;AAID;;AAEDG,IAAAA,MAAM,CAACC,UAAP,GAAoB5E,cAAc,CAAC0E,WAAW,CAACO,kBAAb,CAAlC;AACA,WAAOlF,IAAI,CAAC8B,OAAL,CAAa8C,MAAb,CAAP;AACD;;AAEDA,EAAAA,MAAM,CAACC,UAAP,GAAoB5E,cAAc,CAAC0E,WAAW,CAACE,UAAb,CAAlC;AACAD,EAAAA,MAAM,CAACG,cAAP,GAAwB9E,cAAc,CAAC0E,WAAW,CAACI,cAAb,CAAtC;AAEA,SAAOtE,QAAQ,CAAC0E,gBAAT,CAA0B;AAC/BpC,IAAAA,GAAG,EAAE6B,MAAM,CAACG;AADmB,GAA1B,EAEJK,IAFI,CAEC,UAAUC,WAAV,EAAuB;AAC7BT,IAAAA,MAAM,CAACI,UAAP,GAAoBK,WAApB;AACA,WAAOT,MAAP;AACD,GALM,CAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAShE,aAAT,CAAuB0E,UAAvB,EAAmCC,kBAAnC,EAAuD;AACrD,OAAKd,WAAL,GAAmB,IAAI1E,GAAJ,CAAQuF,UAAR,EAAoBE,UAApB,KACfF,UADe,GAEf1E,aAAa,CAAC6E,mBAAd,GAAoCH,UAFxC;AAGA,OAAKI,mBAAL,GAA2BxF,YAAY,CACrCqF,kBADqC,EAErCI,MAAM,CAACC,iBAF8B,CAAvC;AAIA,OAAKxD,YAAL,GAAoB,CAApB;AACA,OAAKG,UAAL,GAAkB,EAAlB;AACA,OAAKsD,OAAL,GAAe,CAAf;AACD;;AAED,IAAIC,4BAA4B,GAAG,EAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAlF,aAAa,CAACmF,SAAd,CAAwBC,YAAxB,GAAuC,UACrCC,UADqC,EAErCC,mBAFqC,EAGrC;AACA,MAAI,CAAC/F,OAAO,CAAC,KAAKgG,OAAN,CAAZ,EAA4B;AAC1B,SAAKA,OAAL,GAAelC,YAAY,CAAC,IAAD,CAA3B;AACD;;AAED,MAAI,KAAK7B,YAAL,IAAqB,KAAKsD,mBAA9B,EAAmD;AACjD,WAAOZ,SAAP;AACD;;AAED,IAAE,KAAK1C,YAAP;AAEA,MAAID,SAAS,GAAG,IAAhB;AACA,SAAOnC,IAAI,CAACW,sBAAsB,EAAvB,EAA2B,UAAUA,sBAAV,EAAkC;AACtE,QAAI,CAACR,OAAO,CAAC+F,mBAAD,CAAZ,EAAmC;AACjCA,MAAAA,mBAAmB,GAAGJ,4BAAtB;AACD,KAFD,MAEO,IAAI,CAACnF,sBAAL,EAA6B;AAClCuF,MAAAA,mBAAmB,CAACE,MAApB,GAA6B,CAA7B;AACD;;AAED,QAAI/D,EAAE,GAAGF,SAAS,CAAC0D,OAAV,EAAT;AACA,QAAIrE,QAAQ,GAAGxB,IAAI,CAACyB,KAAL,EAAf;AACAU,IAAAA,SAAS,CAACI,UAAV,CAAqBF,EAArB,IAA2Bb,QAA3B;;AAEAW,IAAAA,SAAS,CAACgE,OAAV,CAAkBlF,WAAlB,CACE;AACEoB,MAAAA,EAAE,EAAEA,EADN;AAEE4D,MAAAA,UAAU,EAAEA,UAFd;AAGEtF,MAAAA,sBAAsB,EAAEA;AAH1B,KADF,EAMEuF,mBANF;;AASA,WAAO1E,QAAQ,CAACQ,OAAhB;AACD,GArBU,CAAX;AAsBD,CArCD;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACApB,aAAa,CAACmF,SAAd,CAAwBM,qBAAxB,GAAgD,UAAUC,kBAAV,EAA8B;AAC5E,MAAI,CAACnG,OAAO,CAAC,KAAKgG,OAAN,CAAZ,EAA4B;AAC1B,SAAKA,OAAL,GAAelC,YAAY,CAAC,IAAD,CAA3B;AACD;;AAED,MAAIzC,QAAQ,GAAGxB,IAAI,CAACyB,KAAL,EAAf;AACA,MAAIU,SAAS,GAAG,IAAhB;AACA,MAAIrB,MAAM,GAAG,KAAKqF,OAAlB;AACAzB,EAAAA,0BAA0B,CAAC,IAAD,EAAO4B,kBAAP,CAA1B,CAAqDlB,IAArD,CAA0D,UACxDmB,UADwD,EAExD;AACA,WAAOvG,IAAI,CAACW,sBAAsB,EAAvB,EAA2B,UAAUA,sBAAV,EAAkC;AACtE,UAAIuF,mBAAJ;AACA,UAAIM,MAAM,GAAGD,UAAU,CAACvB,UAAxB;;AACA,UAAI7E,OAAO,CAACqG,MAAD,CAAP,IAAmB7F,sBAAvB,EAA+C;AAC7CuF,QAAAA,mBAAmB,GAAG,CAACM,MAAD,CAAtB;AACD;;AAED1F,MAAAA,MAAM,CAACY,SAAP,GAAmB,UAAUC,KAAV,EAAiB;AAClCb,QAAAA,MAAM,CAACY,SAAP,GAAmB,UAAUC,KAAV,EAAiB;AAClCO,UAAAA,YAAY,CAACC,SAAD,EAAYR,KAAK,CAACC,IAAlB,CAAZ;AACD,SAFD;;AAIAJ,QAAAA,QAAQ,CAACM,OAAT,CAAiBH,KAAK,CAACC,IAAvB;AACD,OAND;;AAQAd,MAAAA,MAAM,CAACG,WAAP,CACE;AAAEwF,QAAAA,iBAAiB,EAAEF;AAArB,OADF,EAEEL,mBAFF;AAID,KAnBU,CAAX;AAoBD,GAvBD;AAyBA,SAAO1E,QAAP;AACD,CAlCD;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,aAAa,CAACmF,SAAd,CAAwBW,WAAxB,GAAsC,YAAY;AAChD,SAAO,KAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA9F,aAAa,CAACmF,SAAd,CAAwBY,OAAxB,GAAkC,YAAY;AAC5C,MAAIxG,OAAO,CAAC,KAAKgG,OAAN,CAAX,EAA2B;AACzB,SAAKA,OAAL,CAAapE,SAAb;AACD;;AACD,SAAO3B,aAAa,CAAC,IAAD,CAApB;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAQ,aAAa,CAACqB,kBAAd,GAAmCA,kBAAnC,C,CAEA;;AACArB,aAAa,CAACgG,0BAAd,GAA2C,UAA3C;AACAhG,aAAa,CAAC6E,mBAAd,GAAoC7E,aAAa,CAACgG,0BAAlD;AACAhG,aAAa,CAACC,uBAAd,GAAwCiE,SAAxC;AACA,eAAelE,aAAf","sourcesContent":["import Uri from \"../ThirdParty/Uri.js\";\nimport when from \"../ThirdParty/when.js\";\nimport buildModuleUrl from \"./buildModuleUrl.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport destroyObject from \"./destroyObject.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Event from \"./Event.js\";\nimport FeatureDetection from \"./FeatureDetection.js\";\nimport isCrossOriginUrl from \"./isCrossOriginUrl.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\n\nfunction canTransferArrayBuffer() {\n  if (!defined(TaskProcessor._canTransferArrayBuffer)) {\n    var worker = new Worker(getWorkerUrl(\"Workers/transferTypedArrayTest.js\"));\n    worker.postMessage = defaultValue(\n      worker.webkitPostMessage,\n      worker.postMessage\n    );\n\n    var value = 99;\n    var array = new Int8Array([value]);\n\n    try {\n      // postMessage might fail with a DataCloneError\n      // if transferring array buffers is not supported.\n      worker.postMessage(\n        {\n          array: array,\n        },\n        [array.buffer]\n      );\n    } catch (e) {\n      TaskProcessor._canTransferArrayBuffer = false;\n      return TaskProcessor._canTransferArrayBuffer;\n    }\n\n    var deferred = when.defer();\n\n    worker.onmessage = function (event) {\n      var array = event.data.array;\n\n      // some versions of Firefox silently fail to transfer typed arrays.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=841904\n      // Check to make sure the value round-trips successfully.\n      var result = defined(array) && array[0] === value;\n      deferred.resolve(result);\n\n      worker.terminate();\n\n      TaskProcessor._canTransferArrayBuffer = result;\n    };\n\n    TaskProcessor._canTransferArrayBuffer = deferred.promise;\n  }\n\n  return TaskProcessor._canTransferArrayBuffer;\n}\n\nvar taskCompletedEvent = new Event();\n\nfunction completeTask(processor, data) {\n  --processor._activeTasks;\n\n  var id = data.id;\n  if (!defined(id)) {\n    // This is not one of ours.\n    return;\n  }\n\n  var deferreds = processor._deferreds;\n  var deferred = deferreds[id];\n\n  if (defined(data.error)) {\n    var error = data.error;\n    if (error.name === \"RuntimeError\") {\n      error = new RuntimeError(data.error.message);\n      error.stack = data.error.stack;\n    } else if (error.name === \"DeveloperError\") {\n      error = new DeveloperError(data.error.message);\n      error.stack = data.error.stack;\n    }\n    taskCompletedEvent.raiseEvent(error);\n    deferred.reject(error);\n  } else {\n    taskCompletedEvent.raiseEvent();\n    deferred.resolve(data.result);\n  }\n\n  delete deferreds[id];\n}\n\nfunction getWorkerUrl(moduleID) {\n  var url = buildModuleUrl(moduleID);\n\n  if (isCrossOriginUrl(url)) {\n    //to load cross-origin, create a shim worker from a blob URL\n    var script = 'importScripts(\"' + url + '\");';\n\n    var blob;\n    try {\n      blob = new Blob([script], {\n        type: \"application/javascript\",\n      });\n    } catch (e) {\n      var BlobBuilder =\n        window.BlobBuilder ||\n        window.WebKitBlobBuilder ||\n        window.MozBlobBuilder ||\n        window.MSBlobBuilder;\n      var blobBuilder = new BlobBuilder();\n      blobBuilder.append(script);\n      blob = blobBuilder.getBlob(\"application/javascript\");\n    }\n\n    var URL = window.URL || window.webkitURL;\n    url = URL.createObjectURL(blob);\n  }\n\n  return url;\n}\n\nvar bootstrapperUrlResult;\nfunction getBootstrapperUrl() {\n  if (!defined(bootstrapperUrlResult)) {\n    bootstrapperUrlResult = getWorkerUrl(\"Workers/cesiumWorkerBootstrapper.js\");\n  }\n  return bootstrapperUrlResult;\n}\n\nfunction createWorker(processor) {\n  var worker = new Worker(getBootstrapperUrl());\n  worker.postMessage = defaultValue(\n    worker.webkitPostMessage,\n    worker.postMessage\n  );\n\n  var bootstrapMessage = {\n    loaderConfig: {\n      paths: {\n        Workers: buildModuleUrl(\"Workers\"),\n      },\n      baseUrl: buildModuleUrl.getCesiumBaseUrl().url,\n    },\n    workerModule: processor._workerPath,\n  };\n\n  worker.postMessage(bootstrapMessage);\n  worker.onmessage = function (event) {\n    completeTask(processor, event.data);\n  };\n\n  return worker;\n}\n\nfunction getWebAssemblyLoaderConfig(processor, wasmOptions) {\n  var config = {\n    modulePath: undefined,\n    wasmBinaryFile: undefined,\n    wasmBinary: undefined,\n  };\n\n  // Web assembly not supported, use fallback js module if provided\n  if (!FeatureDetection.supportsWebAssembly()) {\n    if (!defined(wasmOptions.fallbackModulePath)) {\n      throw new RuntimeError(\n        \"This browser does not support Web Assembly, and no backup module was provided for \" +\n          processor._workerPath\n      );\n    }\n\n    config.modulePath = buildModuleUrl(wasmOptions.fallbackModulePath);\n    return when.resolve(config);\n  }\n\n  config.modulePath = buildModuleUrl(wasmOptions.modulePath);\n  config.wasmBinaryFile = buildModuleUrl(wasmOptions.wasmBinaryFile);\n\n  return Resource.fetchArrayBuffer({\n    url: config.wasmBinaryFile,\n  }).then(function (arrayBuffer) {\n    config.wasmBinary = arrayBuffer;\n    return config;\n  });\n}\n\n/**\n * A wrapper around a web worker that allows scheduling tasks for a given worker,\n * returning results asynchronously via a promise.\n *\n * The Worker is not constructed until a task is scheduled.\n *\n * @alias TaskProcessor\n * @constructor\n *\n * @param {String} workerPath The Url to the worker. This can either be an absolute path or relative to the Cesium Workers folder.\n * @param {Number} [maximumActiveTasks=Number.POSITIVE_INFINITY] The maximum number of active tasks.  Once exceeded,\n *                                        scheduleTask will not queue any more tasks, allowing\n *                                        work to be rescheduled in future frames.\n */\nfunction TaskProcessor(workerPath, maximumActiveTasks) {\n  this._workerPath = new Uri(workerPath).isAbsolute()\n    ? workerPath\n    : TaskProcessor._workerModulePrefix + workerPath;\n  this._maximumActiveTasks = defaultValue(\n    maximumActiveTasks,\n    Number.POSITIVE_INFINITY\n  );\n  this._activeTasks = 0;\n  this._deferreds = {};\n  this._nextID = 0;\n}\n\nvar emptyTransferableObjectArray = [];\n\n/**\n * Schedule a task to be processed by the web worker asynchronously.  If there are currently more\n * tasks active than the maximum set by the constructor, will immediately return undefined.\n * Otherwise, returns a promise that will resolve to the result posted back by the worker when\n * finished.\n *\n * @param {Object} parameters Any input data that will be posted to the worker.\n * @param {Object[]} [transferableObjects] An array of objects contained in parameters that should be\n *                                      transferred to the worker instead of copied.\n * @returns {Promise.<Object>|undefined} Either a promise that will resolve to the result when available, or undefined\n *                    if there are too many active tasks,\n *\n * @example\n * var taskProcessor = new Cesium.TaskProcessor('myWorkerPath');\n * var promise = taskProcessor.scheduleTask({\n *     someParameter : true,\n *     another : 'hello'\n * });\n * if (!Cesium.defined(promise)) {\n *     // too many active tasks - try again later\n * } else {\n *     Cesium.when(promise, function(result) {\n *         // use the result of the task\n *     });\n * }\n */\nTaskProcessor.prototype.scheduleTask = function (\n  parameters,\n  transferableObjects\n) {\n  if (!defined(this._worker)) {\n    this._worker = createWorker(this);\n  }\n\n  if (this._activeTasks >= this._maximumActiveTasks) {\n    return undefined;\n  }\n\n  ++this._activeTasks;\n\n  var processor = this;\n  return when(canTransferArrayBuffer(), function (canTransferArrayBuffer) {\n    if (!defined(transferableObjects)) {\n      transferableObjects = emptyTransferableObjectArray;\n    } else if (!canTransferArrayBuffer) {\n      transferableObjects.length = 0;\n    }\n\n    var id = processor._nextID++;\n    var deferred = when.defer();\n    processor._deferreds[id] = deferred;\n\n    processor._worker.postMessage(\n      {\n        id: id,\n        parameters: parameters,\n        canTransferArrayBuffer: canTransferArrayBuffer,\n      },\n      transferableObjects\n    );\n\n    return deferred.promise;\n  });\n};\n\n/**\n * Posts a message to a web worker with configuration to initialize loading\n * and compiling a web assembly module asychronously, as well as an optional\n * fallback JavaScript module to use if Web Assembly is not supported.\n *\n * @param {Object} [webAssemblyOptions] An object with the following properties:\n * @param {String} [webAssemblyOptions.modulePath] The path of the web assembly JavaScript wrapper module.\n * @param {String} [webAssemblyOptions.wasmBinaryFile] The path of the web assembly binary file.\n * @param {String} [webAssemblyOptions.fallbackModulePath] The path of the fallback JavaScript module to use if web assembly is not supported.\n * @returns {Promise.<Object>} A promise that resolves to the result when the web worker has loaded and compiled the web assembly module and is ready to process tasks.\n */\nTaskProcessor.prototype.initWebAssemblyModule = function (webAssemblyOptions) {\n  if (!defined(this._worker)) {\n    this._worker = createWorker(this);\n  }\n\n  var deferred = when.defer();\n  var processor = this;\n  var worker = this._worker;\n  getWebAssemblyLoaderConfig(this, webAssemblyOptions).then(function (\n    wasmConfig\n  ) {\n    return when(canTransferArrayBuffer(), function (canTransferArrayBuffer) {\n      var transferableObjects;\n      var binary = wasmConfig.wasmBinary;\n      if (defined(binary) && canTransferArrayBuffer) {\n        transferableObjects = [binary];\n      }\n\n      worker.onmessage = function (event) {\n        worker.onmessage = function (event) {\n          completeTask(processor, event.data);\n        };\n\n        deferred.resolve(event.data);\n      };\n\n      worker.postMessage(\n        { webAssemblyConfig: wasmConfig },\n        transferableObjects\n      );\n    });\n  });\n\n  return deferred;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see TaskProcessor#destroy\n */\nTaskProcessor.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys this object.  This will immediately terminate the Worker.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n */\nTaskProcessor.prototype.destroy = function () {\n  if (defined(this._worker)) {\n    this._worker.terminate();\n  }\n  return destroyObject(this);\n};\n\n/**\n * An event that's raised when a task is completed successfully.  Event handlers are passed\n * the error object is a task fails.\n *\n * @type {Event}\n *\n * @private\n */\nTaskProcessor.taskCompletedEvent = taskCompletedEvent;\n\n// exposed for testing purposes\nTaskProcessor._defaultWorkerModulePrefix = \"Workers/\";\nTaskProcessor._workerModulePrefix = TaskProcessor._defaultWorkerModulePrefix;\nTaskProcessor._canTransferArrayBuffer = undefined;\nexport default TaskProcessor;\n"]},"metadata":{},"sourceType":"module"}