{"ast":null,"code":"import WebGLConstants from \"../Core/WebGLConstants.js\";\n/**\n * Determines how two pixels' values are combined.\n *\n * @enum {Number}\n */\n\nvar BlendEquation = {\n  /**\n   * Pixel values are added componentwise.  This is used in additive blending for translucency.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ADD: WebGLConstants.FUNC_ADD,\n\n  /**\n   * Pixel values are subtracted componentwise (source - destination).  This is used in alpha blending for translucency.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SUBTRACT: WebGLConstants.FUNC_SUBTRACT,\n\n  /**\n   * Pixel values are subtracted componentwise (destination - source).\n   *\n   * @type {Number}\n   * @constant\n   */\n  REVERSE_SUBTRACT: WebGLConstants.FUNC_REVERSE_SUBTRACT,\n\n  /**\n   * Pixel values are given to the minimum function (min(source, destination)).\n   *\n   * This equation operates on each pixel color component.\n   *\n   * @type {Number}\n   * @constant\n   */\n  MIN: WebGLConstants.MIN,\n\n  /**\n   * Pixel values are given to the maximum function (max(source, destination)).\n   *\n   * This equation operates on each pixel color component.\n   *\n   * @type {Number}\n   * @constant\n   */\n  MAX: WebGLConstants.MAX\n};\nexport default Object.freeze(BlendEquation);","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Scene/BlendEquation.js"],"names":["WebGLConstants","BlendEquation","ADD","FUNC_ADD","SUBTRACT","FUNC_SUBTRACT","REVERSE_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","Object","freeze"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,2BAA3B;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa,GAAG;AAClB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,GAAG,EAAEF,cAAc,CAACG,QAPF;;AASlB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,QAAQ,EAAEJ,cAAc,CAACK,aAfP;;AAiBlB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,gBAAgB,EAAEN,cAAc,CAACO,qBAvBf;;AAyBlB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,GAAG,EAAER,cAAc,CAACQ,GAjCF;;AAmClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,GAAG,EAAET,cAAc,CAACS;AA3CF,CAApB;AA6CA,eAAeC,MAAM,CAACC,MAAP,CAAcV,aAAd,CAAf","sourcesContent":["import WebGLConstants from \"../Core/WebGLConstants.js\";\n\n/**\n * Determines how two pixels' values are combined.\n *\n * @enum {Number}\n */\nvar BlendEquation = {\n  /**\n   * Pixel values are added componentwise.  This is used in additive blending for translucency.\n   *\n   * @type {Number}\n   * @constant\n   */\n  ADD: WebGLConstants.FUNC_ADD,\n\n  /**\n   * Pixel values are subtracted componentwise (source - destination).  This is used in alpha blending for translucency.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SUBTRACT: WebGLConstants.FUNC_SUBTRACT,\n\n  /**\n   * Pixel values are subtracted componentwise (destination - source).\n   *\n   * @type {Number}\n   * @constant\n   */\n  REVERSE_SUBTRACT: WebGLConstants.FUNC_REVERSE_SUBTRACT,\n\n  /**\n   * Pixel values are given to the minimum function (min(source, destination)).\n   *\n   * This equation operates on each pixel color component.\n   *\n   * @type {Number}\n   * @constant\n   */\n  MIN: WebGLConstants.MIN,\n\n  /**\n   * Pixel values are given to the maximum function (max(source, destination)).\n   *\n   * This equation operates on each pixel color component.\n   *\n   * @type {Number}\n   * @constant\n   */\n  MAX: WebGLConstants.MAX,\n};\nexport default Object.freeze(BlendEquation);\n"]},"metadata":{},"sourceType":"module"}