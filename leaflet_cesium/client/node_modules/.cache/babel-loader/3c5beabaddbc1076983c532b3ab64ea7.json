{"ast":null,"code":"import defaultValue from \"../Core/defaultValue.js\";\nimport Pass from \"./Pass.js\";\n/**\n * Represents a command to the renderer for GPU Compute (using old-school GPGPU).\n *\n * @private\n * @constructor\n */\n\nfunction ComputeCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  /**\n   * The vertex array. If none is provided, a viewport quad will be used.\n   *\n   * @type {VertexArray}\n   * @default undefined\n   */\n\n  this.vertexArray = options.vertexArray;\n  /**\n   * The fragment shader source. The default vertex shader is ViewportQuadVS.\n   *\n   * @type {ShaderSource}\n   * @default undefined\n   */\n\n  this.fragmentShaderSource = options.fragmentShaderSource;\n  /**\n   * The shader program to apply.\n   *\n   * @type {ShaderProgram}\n   * @default undefined\n   */\n\n  this.shaderProgram = options.shaderProgram;\n  /**\n   * An object with functions whose names match the uniforms in the shader program\n   * and return values to set those uniforms.\n   *\n   * @type {Object}\n   * @default undefined\n   */\n\n  this.uniformMap = options.uniformMap;\n  /**\n   * Texture to use for offscreen rendering.\n   *\n   * @type {Texture}\n   * @default undefined\n   */\n\n  this.outputTexture = options.outputTexture;\n  /**\n   * Function that is called immediately before the ComputeCommand is executed. Used to\n   * update any renderer resources. Takes the ComputeCommand as its single argument.\n   *\n   * @type {Function}\n   * @default undefined\n   */\n\n  this.preExecute = options.preExecute;\n  /**\n   * Function that is called after the ComputeCommand is executed. Takes the output\n   * texture as its single argument.\n   *\n   * @type {Function}\n   * @default undefined\n   */\n\n  this.postExecute = options.postExecute;\n  /**\n   * Function that is called when the command is canceled\n   *\n   * @type {Function}\n   * @default undefined\n   */\n\n  this.canceled = options.canceled;\n  /**\n   * Whether the renderer resources will persist beyond this call. If not, they\n   * will be destroyed after completion.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  this.persists = defaultValue(options.persists, false);\n  /**\n   * The pass when to render. Always compute pass.\n   *\n   * @type {Pass}\n   * @default Pass.COMPUTE;\n   */\n\n  this.pass = Pass.COMPUTE;\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows us to see who created a command when we only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @type {Object}\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n\n  this.owner = options.owner;\n}\n/**\n * Executes the compute command.\n *\n * @param {ComputeEngine} computeEngine The context that processes the compute command.\n */\n\n\nComputeCommand.prototype.execute = function (computeEngine) {\n  computeEngine.execute(this);\n};\n\nexport default ComputeCommand;","map":{"version":3,"sources":["/home/usuario/davi/thalamus/wms/3dmaptestes/leaflet_cesium/client/node_modules/cesium/Source/Renderer/ComputeCommand.js"],"names":["defaultValue","Pass","ComputeCommand","options","EMPTY_OBJECT","vertexArray","fragmentShaderSource","shaderProgram","uniformMap","outputTexture","preExecute","postExecute","canceled","persists","pass","COMPUTE","owner","prototype","execute","computeEngine"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC/BA,EAAAA,OAAO,GAAGH,YAAY,CAACG,OAAD,EAAUH,YAAY,CAACI,YAAvB,CAAtB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,WAAL,GAAmBF,OAAO,CAACE,WAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,oBAAL,GAA4BH,OAAO,CAACG,oBAApC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,aAAL,GAAqBJ,OAAO,CAACI,aAA7B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBL,OAAO,CAACK,UAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,aAAL,GAAqBN,OAAO,CAACM,aAA7B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,UAAL,GAAkBP,OAAO,CAACO,UAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,WAAL,GAAmBR,OAAO,CAACQ,WAA3B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,QAAL,GAAgBT,OAAO,CAACS,QAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,QAAL,GAAgBb,YAAY,CAACG,OAAO,CAACU,QAAT,EAAmB,KAAnB,CAA5B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,IAAL,GAAYb,IAAI,CAACc,OAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAab,OAAO,CAACa,KAArB;AACD;AAED;AACA;AACA;AACA;AACA;;;AACAd,cAAc,CAACe,SAAf,CAAyBC,OAAzB,GAAmC,UAAUC,aAAV,EAAyB;AAC1DA,EAAAA,aAAa,CAACD,OAAd,CAAsB,IAAtB;AACD,CAFD;;AAGA,eAAehB,cAAf","sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport Pass from \"./Pass.js\";\n\n/**\n * Represents a command to the renderer for GPU Compute (using old-school GPGPU).\n *\n * @private\n * @constructor\n */\nfunction ComputeCommand(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  /**\n   * The vertex array. If none is provided, a viewport quad will be used.\n   *\n   * @type {VertexArray}\n   * @default undefined\n   */\n  this.vertexArray = options.vertexArray;\n\n  /**\n   * The fragment shader source. The default vertex shader is ViewportQuadVS.\n   *\n   * @type {ShaderSource}\n   * @default undefined\n   */\n  this.fragmentShaderSource = options.fragmentShaderSource;\n\n  /**\n   * The shader program to apply.\n   *\n   * @type {ShaderProgram}\n   * @default undefined\n   */\n  this.shaderProgram = options.shaderProgram;\n\n  /**\n   * An object with functions whose names match the uniforms in the shader program\n   * and return values to set those uniforms.\n   *\n   * @type {Object}\n   * @default undefined\n   */\n  this.uniformMap = options.uniformMap;\n\n  /**\n   * Texture to use for offscreen rendering.\n   *\n   * @type {Texture}\n   * @default undefined\n   */\n  this.outputTexture = options.outputTexture;\n\n  /**\n   * Function that is called immediately before the ComputeCommand is executed. Used to\n   * update any renderer resources. Takes the ComputeCommand as its single argument.\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.preExecute = options.preExecute;\n\n  /**\n   * Function that is called after the ComputeCommand is executed. Takes the output\n   * texture as its single argument.\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.postExecute = options.postExecute;\n\n  /**\n   * Function that is called when the command is canceled\n   *\n   * @type {Function}\n   * @default undefined\n   */\n  this.canceled = options.canceled;\n\n  /**\n   * Whether the renderer resources will persist beyond this call. If not, they\n   * will be destroyed after completion.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n  this.persists = defaultValue(options.persists, false);\n\n  /**\n   * The pass when to render. Always compute pass.\n   *\n   * @type {Pass}\n   * @default Pass.COMPUTE;\n   */\n  this.pass = Pass.COMPUTE;\n\n  /**\n   * The object who created this command.  This is useful for debugging command\n   * execution; it allows us to see who created a command when we only have a\n   * reference to the command, and can be used to selectively execute commands\n   * with {@link Scene#debugCommandFilter}.\n   *\n   * @type {Object}\n   * @default undefined\n   *\n   * @see Scene#debugCommandFilter\n   */\n  this.owner = options.owner;\n}\n\n/**\n * Executes the compute command.\n *\n * @param {ComputeEngine} computeEngine The context that processes the compute command.\n */\nComputeCommand.prototype.execute = function (computeEngine) {\n  computeEngine.execute(this);\n};\nexport default ComputeCommand;\n"]},"metadata":{},"sourceType":"module"}